import * as eslint_plugin_import_x875 from "eslint-plugin-import-x";
import * as eslint_plugin_import_x182 from "eslint-plugin-import-x";
import { createNodeResolver } from "eslint-plugin-import-x";
import * as eslint_plugin_react690 from "eslint-plugin-react";
import * as eslint_plugin_react410 from "eslint-plugin-react";
import pluginReact from "eslint-plugin-react";
import * as eslint_plugin_react_hooks692 from "eslint-plugin-react-hooks";
import * as pluginReactHooks from "eslint-plugin-react-hooks";
import * as eslint_plugin_react_hooks412 from "eslint-plugin-react-hooks";
import * as _stylistic_eslint_plugin1104 from "@stylistic/eslint-plugin";
import * as _stylistic_eslint_plugin413 from "@stylistic/eslint-plugin";
import * as _typescript_eslint_utils_ts_eslint693 from "@typescript-eslint/utils/ts-eslint";
import * as _typescript_eslint_utils_ts_eslint1107 from "@typescript-eslint/utils/ts-eslint";
import * as _typescript_eslint_utils_ts_eslint1103 from "@typescript-eslint/utils/ts-eslint";
import * as _typescript_eslint_utils_ts_eslint0 from "@typescript-eslint/utils/ts-eslint";
import * as eslint_plugin_import_x_rules_no_unresolved694 from "eslint-plugin-import-x/rules/no-unresolved";
import * as eslint_plugin_import_x_rules_no_unresolved1 from "eslint-plugin-import-x/rules/no-unresolved";
import * as eslint_plugin_import_x_utils696 from "eslint-plugin-import-x/utils";
import * as eslint_plugin_import_x_utils3 from "eslint-plugin-import-x/utils";
import * as eslint_plugin_import_x_rules_named699 from "eslint-plugin-import-x/rules/named";
import * as eslint_plugin_import_x_rules_named6 from "eslint-plugin-import-x/rules/named";
import * as eslint_plugin_import_x_rules_namespace707 from "eslint-plugin-import-x/rules/namespace";
import * as eslint_plugin_import_x_rules_namespace14 from "eslint-plugin-import-x/rules/namespace";
import * as eslint_plugin_import_x_rules_no_namespace712 from "eslint-plugin-import-x/rules/no-namespace";
import * as eslint_plugin_import_x_rules_no_namespace19 from "eslint-plugin-import-x/rules/no-namespace";
import * as eslint_plugin_import_x_rules_export716 from "eslint-plugin-import-x/rules/export";
import * as eslint_plugin_import_x_rules_export23 from "eslint-plugin-import-x/rules/export";
import * as eslint_plugin_import_x_rules_extensions723 from "eslint-plugin-import-x/rules/extensions";
import * as eslint_plugin_import_x_rules_extensions30 from "eslint-plugin-import-x/rules/extensions";
import * as eslint_plugin_import_x_rules_no_restricted_paths728 from "eslint-plugin-import-x/rules/no-restricted-paths";
import * as eslint_plugin_import_x_rules_no_restricted_paths35 from "eslint-plugin-import-x/rules/no-restricted-paths";
import * as eslint_plugin_import_x_rules_no_internal_modules733 from "eslint-plugin-import-x/rules/no-internal-modules";
import * as eslint_plugin_import_x_rules_no_internal_modules40 from "eslint-plugin-import-x/rules/no-internal-modules";
import * as eslint_plugin_import_x_rules_group_exports737 from "eslint-plugin-import-x/rules/group-exports";
import * as eslint_plugin_import_x_rules_group_exports44 from "eslint-plugin-import-x/rules/group-exports";
import * as eslint_plugin_import_x_rules_consistent_type_specifier_style749 from "eslint-plugin-import-x/rules/consistent-type-specifier-style";
import * as eslint_plugin_import_x_rules_consistent_type_specifier_style56 from "eslint-plugin-import-x/rules/consistent-type-specifier-style";
import * as eslint_plugin_import_x_rules_no_cycle756 from "eslint-plugin-import-x/rules/no-cycle";
import * as eslint_plugin_import_x_rules_no_cycle63 from "eslint-plugin-import-x/rules/no-cycle";
import * as eslint_plugin_import_x_rules_no_anonymous_default_export770 from "eslint-plugin-import-x/rules/no-anonymous-default-export";
import * as eslint_plugin_import_x_rules_no_anonymous_default_export77 from "eslint-plugin-import-x/rules/no-anonymous-default-export";
import * as eslint_plugin_import_x_rules_no_rename_default774 from "eslint-plugin-import-x/rules/no-rename-default";
import * as eslint_plugin_import_x_rules_no_rename_default81 from "eslint-plugin-import-x/rules/no-rename-default";
import * as eslint_plugin_import_x_rules_no_unused_modules778 from "eslint-plugin-import-x/rules/no-unused-modules";
import * as eslint_plugin_import_x_rules_no_unused_modules85 from "eslint-plugin-import-x/rules/no-unused-modules";
import * as eslint_plugin_import_x_rules_no_commonjs782 from "eslint-plugin-import-x/rules/no-commonjs";
import * as eslint_plugin_import_x_rules_no_commonjs89 from "eslint-plugin-import-x/rules/no-commonjs";
import * as eslint_plugin_import_x_rules_no_duplicates789 from "eslint-plugin-import-x/rules/no-duplicates";
import * as eslint_plugin_import_x_rules_no_duplicates96 from "eslint-plugin-import-x/rules/no-duplicates";
import * as eslint_plugin_import_x_rules_first793 from "eslint-plugin-import-x/rules/first";
import * as eslint_plugin_import_x_rules_first100 from "eslint-plugin-import-x/rules/first";
import * as eslint_plugin_import_x_rules_max_dependencies798 from "eslint-plugin-import-x/rules/max-dependencies";
import * as eslint_plugin_import_x_rules_max_dependencies105 from "eslint-plugin-import-x/rules/max-dependencies";
import * as eslint_plugin_import_x_rules_no_extraneous_dependencies802 from "eslint-plugin-import-x/rules/no-extraneous-dependencies";
import * as eslint_plugin_import_x_rules_no_extraneous_dependencies109 from "eslint-plugin-import-x/rules/no-extraneous-dependencies";
import * as eslint_plugin_import_x_rules_no_nodejs_modules811 from "eslint-plugin-import-x/rules/no-nodejs-modules";
import * as eslint_plugin_import_x_rules_no_nodejs_modules118 from "eslint-plugin-import-x/rules/no-nodejs-modules";
import * as eslint_plugin_import_x_rules_order818 from "eslint-plugin-import-x/rules/order";
import * as eslint_plugin_import_x_rules_order125 from "eslint-plugin-import-x/rules/order";
import * as eslint_plugin_import_x_rules_newline_after_import822 from "eslint-plugin-import-x/rules/newline-after-import";
import * as eslint_plugin_import_x_rules_newline_after_import129 from "eslint-plugin-import-x/rules/newline-after-import";
import * as eslint_plugin_import_x_rules_prefer_default_export826 from "eslint-plugin-import-x/rules/prefer-default-export";
import * as eslint_plugin_import_x_rules_prefer_default_export133 from "eslint-plugin-import-x/rules/prefer-default-export";
import * as eslint_plugin_import_x_rules_no_dynamic_require836 from "eslint-plugin-import-x/rules/no-dynamic-require";
import * as eslint_plugin_import_x_rules_no_dynamic_require143 from "eslint-plugin-import-x/rules/no-dynamic-require";
import * as eslint_plugin_import_x_rules_no_unassigned_import844 from "eslint-plugin-import-x/rules/no-unassigned-import";
import * as eslint_plugin_import_x_rules_no_unassigned_import151 from "eslint-plugin-import-x/rules/no-unassigned-import";
import * as eslint_plugin_import_x_rules_no_useless_path_segments848 from "eslint-plugin-import-x/rules/no-useless-path-segments";
import * as eslint_plugin_import_x_rules_no_useless_path_segments155 from "eslint-plugin-import-x/rules/no-useless-path-segments";
import * as eslint_plugin_import_x_rules_dynamic_import_chunkname852 from "eslint-plugin-import-x/rules/dynamic-import-chunkname";
import * as eslint_plugin_import_x_rules_dynamic_import_chunkname159 from "eslint-plugin-import-x/rules/dynamic-import-chunkname";
import * as eslint_plugin_import_x_rules_no_import_module_exports857 from "eslint-plugin-import-x/rules/no-import-module-exports";
import * as eslint_plugin_import_x_rules_no_import_module_exports164 from "eslint-plugin-import-x/rules/no-import-module-exports";
import * as eslint_import_context894 from "eslint-import-context";
import * as eslint_import_context202 from "eslint-import-context";
import * as eslint896 from "eslint";
import * as eslint484 from "eslint";
import * as eslint897 from "eslint";
import * as eslint1105 from "eslint";
import * as eslint1108 from "eslint";
import * as eslint204 from "eslint";
import { Linter } from "eslint";

//#region src/base.d.ts
declare const _default: ({
  name: string;
  languageOptions: {
    parser: _typescript_eslint_utils_ts_eslint693.Parser.LooseParserModule;
    parserOptions: {
      projectService: {
        allowDefaultProject: string[];
      };
      tsconfigRootDir: string;
    };
  };
  files?: undefined;
  rules?: undefined;
} | {
  name: string;
  files: string[];
  /** Last reviewed: ESLint v^8.47.0 */
  rules: {
    "unicode-bom": "off";
    "accessor-pairs": "error";
    "arrow-body-style": ["error", "as-needed"];
    "block-scoped-var": "error";
    camelcase: ["error", {
      properties: "never";
    }];
    "capitalized-comments": "off";
    "class-methods-use-this": "off";
    complexity: "off";
    "consistent-return": "off";
    "consistent-this": "off";
    curly: ["error", "multi-line"];
    "default-case": "error";
    "default-case-last": "error";
    "default-param-last": "error";
    "dot-notation": ["error", {
      allowKeywords: true;
    }];
    eqeqeq: ["error", "smart"];
    "func-name-matching": "off";
    "func-names": "off";
    "func-style": ["error", "declaration", {
      allowArrowFunctions: true;
    }];
    "grouped-accessor-pairs": "error";
    "guard-for-in": "error";
    "id-denylist": "off";
    "id-length": "off";
    "id-match": "off";
    "init-declarations": "off";
    "logical-assignment-operators": ["error", "always", {
      enforceForIfStatements: true;
    }];
    "max-classes-per-file": "off";
    "max-depth": "off";
    "max-lines": "off";
    "max-lines-per-function": "off";
    "max-nested-callbacks": "off";
    "max-params": "off";
    "max-statements": "off";
    "new-cap": ["error", {
      newIsCap: true;
    }];
    "no-alert": "error";
    "no-array-constructor": "off";
    "no-bitwise": ["error", {
      allow: string[];
    }];
    "no-caller": "error";
    "no-case-declarations": "error";
    "no-confusing-arrow": "off";
    "no-console": "warn";
    "no-continue": "error";
    "no-delete-var": "error";
    "no-div-regex": "error";
    "no-else-return": "error";
    "no-empty": "error";
    "no-empty-function": ["error", {
      allow: ("arrowFunctions" | "constructors")[];
    }];
    "no-empty-static-block": "error";
    "no-eq-null": "error";
    "no-eval": "error";
    "no-extend-native": "error";
    "no-extra-bind": "error";
    "no-extra-boolean-cast": "error";
    "no-extra-label": "error";
    "no-global-assign": "error";
    "no-implicit-coercion": "off";
    "no-implicit-globals": "off";
    "no-implied-eval": "error";
    "no-inline-comments": "off";
    "no-invalid-this": "off";
    "no-iterator": "error";
    "no-label-var": "error";
    "no-labels": "error";
    "no-lone-blocks": "error";
    "no-lonely-if": "error";
    "no-loop-func": "error";
    "no-magic-numbers": "off";
    "no-multi-assign": "error";
    "no-multi-str": "error";
    "no-negated-condition": "error";
    "no-nested-ternary": "off";
    "no-new": "error";
    "no-new-func": "error";
    "no-new-wrappers": "error";
    "no-nonoctal-decimal-escape": "error";
    "no-object-constructor": "error";
    "no-octal": "error";
    "no-octal-escape": "error";
    "no-param-reassign": "error";
    "no-plusplus": "off";
    "no-proto": "error";
    "no-redeclare": "error";
    "no-regex-spaces": "error";
    "no-restricted-exports": "off";
    "no-restricted-globals": "off";
    "no-restricted-imports": "off";
    "no-restricted-properties": "off";
    "no-restricted-syntax": "off";
    "no-return-assign": ["error", "always"];
    "no-script-url": "error";
    "no-sequences": "error";
    "no-shadow": "error";
    "no-shadow-restricted-names": "error";
    "no-ternary": "off";
    "no-throw-literal": "error";
    "no-undef-init": "error";
    "no-undefined": "error";
    "no-underscore-dangle": "off";
    "no-unneeded-ternary": "error";
    "no-unused-expressions": "off";
    "no-unused-labels": "error";
    "no-useless-call": "error";
    "no-useless-catch": "error";
    "no-useless-computed-key": "error";
    "no-useless-concat": "error";
    "no-useless-constructor": "error";
    "no-useless-escape": "error";
    "no-useless-rename": "error";
    "no-useless-return": "error";
    "no-var": "error";
    "no-void": ["error", {
      allowAsStatement: true;
    }];
    "no-warning-comments": "off";
    "no-with": "error";
    "object-shorthand": ["error", "properties"];
    "one-var": ["error", "never"];
    "operator-assignment": ["error", "always"];
    "prefer-arrow-callback": "error";
    "prefer-const": "off";
    "prefer-destructuring": "off";
    "prefer-exponentiation-operator": "error";
    "prefer-named-capture-group": "warn";
    "prefer-numeric-literals": "error";
    "prefer-object-has-own": "error";
    "prefer-object-spread": "error";
    "prefer-promise-reject-errors": "error";
    "prefer-regex-literals": "error";
    "prefer-rest-params": "error";
    "prefer-spread": "error";
    "prefer-template": "error";
    radix: "error";
    "require-await": "error";
    "require-unicode-regexp": "off";
    "require-yield": "error";
    "sort-imports": "off";
    "sort-keys": "off";
    "sort-vars": "off";
    strict: ["error", "never"];
    "symbol-description": "error";
    "vars-on-top": "error";
    yoda: "error";
    "array-callback-return": ["warn", {
      allowImplicit: true;
      checkForEach: true;
    }];
    "constructor-super": "error";
    "for-direction": "error";
    "getter-return": "error";
    "no-async-promise-executor": "error";
    "no-await-in-loop": "error";
    "no-class-assign": "error";
    "no-compare-neg-zero": "error";
    "no-cond-assign": ["error", "always"];
    "no-const-assign": "error";
    "no-constant-binary-expression": "error";
    "no-constant-condition": "warn";
    "no-constructor-return": "error";
    "no-control-regex": "error";
    "no-debugger": "warn";
    "no-dupe-args": "error";
    "no-dupe-class-members": "error";
    "no-dupe-else-if": "error";
    "no-dupe-keys": "error";
    "no-duplicate-case": "error";
    "no-duplicate-imports": ["error", {
      includeExports: true;
    }];
    "no-empty-character-class": "error";
    "no-empty-pattern": "error";
    "no-ex-assign": "error";
    "no-fallthrough": "error";
    "no-func-assign": "error";
    "no-import-assign": "error";
    "no-inner-declarations": "error";
    "no-invalid-regexp": "error";
    "no-irregular-whitespace": "error";
    "no-loss-of-precision": "error";
    "no-misleading-character-class": "error";
    "no-new-native-nonconstructor": "warn";
    "no-obj-calls": "error";
    "no-promise-executor-return": "error";
    "no-prototype-builtins": "error";
    "no-self-assign": "error";
    "no-self-compare": "error";
    "no-setter-return": "error";
    "no-sparse-arrays": "error";
    "no-template-curly-in-string": "error";
    "no-this-before-super": "error";
    "no-unassigned-vars": "error";
    "no-undef": "error";
    "no-unexpected-multiline": "off";
    "no-unmodified-loop-condition": "warn";
    "no-unreachable": "error";
    "no-unreachable-loop": "error";
    "no-unsafe-finally": "error";
    "no-unsafe-negation": "error";
    "no-unsafe-optional-chaining": "error";
    "no-unused-private-class-members": "warn";
    "no-unused-vars": "warn";
    "no-use-before-define": ["error", {
      functions: false;
    }];
    "no-useless-assignment": "error";
    "no-useless-backreference": "error";
    "require-atomic-updates": "error";
    "use-isnan": "error";
    "valid-typeof": "error";
  };
  languageOptions?: undefined;
} | {
  name: string;
  files: string[];
  rules: {
    "no-console": "off";
    "no-undefined": "off";
  };
  languageOptions?: undefined;
} | ({
  name: string;
  plugins: {
    "import-x": {
      meta: {
        name: string;
        version: string;
      };
      rules: {
        "no-unresolved": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_no_unresolved694.MessageId, [(eslint_plugin_import_x_rules_no_unresolved694.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        named: _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_named699.MessageId, [(eslint_plugin_import_x_utils696.ModuleOptions | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        default: _typescript_eslint_utils_ts_eslint693.RuleModule<"noDefaultExport", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        namespace: _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_namespace707.MessageId, [eslint_plugin_import_x_rules_namespace707.Options], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-namespace": _typescript_eslint_utils_ts_eslint693.RuleModule<"noNamespace", [(eslint_plugin_import_x_rules_no_namespace712.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        export: _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_export716.MessageId, [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-mutable-exports": _typescript_eslint_utils_ts_eslint693.RuleModule<"noMutable", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        extensions: _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_extensions723.MessageId, eslint_plugin_import_x_rules_extensions723.Options, eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-restricted-paths": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_no_restricted_paths728.MessageId, [(eslint_plugin_import_x_rules_no_restricted_paths728.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-internal-modules": _typescript_eslint_utils_ts_eslint693.RuleModule<"noAllowed", [(eslint_plugin_import_x_rules_no_internal_modules733.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "group-exports": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_group_exports737.MessageId, [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-relative-packages": _typescript_eslint_utils_ts_eslint693.RuleModule<"noAllowed", [(eslint_plugin_import_x_utils696.ModuleOptions | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-relative-parent-imports": _typescript_eslint_utils_ts_eslint693.RuleModule<"noAllowed", [(eslint_plugin_import_x_utils696.ModuleOptions | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "consistent-type-specifier-style": _typescript_eslint_utils_ts_eslint693.RuleModule<"inline" | "topLevel", [(eslint_plugin_import_x_rules_consistent_type_specifier_style749.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-self-import": _typescript_eslint_utils_ts_eslint693.RuleModule<"self", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-cycle": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_no_cycle756.MessageId, [(eslint_plugin_import_x_rules_no_cycle756.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-named-default": _typescript_eslint_utils_ts_eslint693.RuleModule<"default", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-named-as-default": _typescript_eslint_utils_ts_eslint693.RuleModule<"default", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-named-as-default-member": _typescript_eslint_utils_ts_eslint693.RuleModule<"member", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-anonymous-default-export": _typescript_eslint_utils_ts_eslint693.RuleModule<"assign" | "anonymous", [(eslint_plugin_import_x_rules_no_anonymous_default_export770.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-rename-default": _typescript_eslint_utils_ts_eslint693.RuleModule<"renameDefault", [(eslint_plugin_import_x_rules_no_rename_default774.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-unused-modules": _typescript_eslint_utils_ts_eslint693.RuleModule<"notFound" | "unused", eslint_plugin_import_x_rules_no_unused_modules778.Options[], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-commonjs": _typescript_eslint_utils_ts_eslint693.RuleModule<"import" | "export", [(eslint_plugin_import_x_rules_no_commonjs782.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-amd": _typescript_eslint_utils_ts_eslint693.RuleModule<"amd", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-duplicates": _typescript_eslint_utils_ts_eslint693.RuleModule<"duplicate", [(eslint_plugin_import_x_rules_no_duplicates789.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        first: _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_first793.MessageId, [(eslint_plugin_import_x_rules_first793.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "max-dependencies": _typescript_eslint_utils_ts_eslint693.RuleModule<"max", [(eslint_plugin_import_x_rules_max_dependencies798.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-extraneous-dependencies": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_no_extraneous_dependencies802.MessageId, [(eslint_plugin_import_x_rules_no_extraneous_dependencies802.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-absolute-path": _typescript_eslint_utils_ts_eslint693.RuleModule<"absolute", [(eslint_plugin_import_x_utils696.ModuleOptions | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-nodejs-modules": _typescript_eslint_utils_ts_eslint693.RuleModule<"builtin", [(eslint_plugin_import_x_rules_no_nodejs_modules811.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-webpack-loader-syntax": _typescript_eslint_utils_ts_eslint693.RuleModule<"unexpected", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        order: _typescript_eslint_utils_ts_eslint693.RuleModule<"error" | "order" | "noLineWithinGroup" | "noLineBetweenGroups" | "oneLineBetweenGroups" | "oneLineBetweenTheMultiLineImport" | "oneLineBetweenThisMultiLineImport" | "noLineBetweenSingleLineImport", [(eslint_plugin_import_x_rules_order818.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "newline-after-import": _typescript_eslint_utils_ts_eslint693.RuleModule<"newline", [(eslint_plugin_import_x_rules_newline_after_import822.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "prefer-default-export": _typescript_eslint_utils_ts_eslint693.RuleModule<"any" | "single", [(eslint_plugin_import_x_rules_prefer_default_export826.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-default-export": _typescript_eslint_utils_ts_eslint693.RuleModule<"preferNamed" | "noAliasDefault", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-named-export": _typescript_eslint_utils_ts_eslint693.RuleModule<"noAllowed", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-dynamic-require": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_no_dynamic_require836.MessageId, [(eslint_plugin_import_x_rules_no_dynamic_require836.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        unambiguous: _typescript_eslint_utils_ts_eslint693.RuleModule<"module", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-unassigned-import": _typescript_eslint_utils_ts_eslint693.RuleModule<"unassigned", [(eslint_plugin_import_x_rules_no_unassigned_import844.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-useless-path-segments": _typescript_eslint_utils_ts_eslint693.RuleModule<"useless", [(eslint_plugin_import_x_rules_no_useless_path_segments848.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "dynamic-import-chunkname": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_dynamic_import_chunkname852.MessageId, [(eslint_plugin_import_x_rules_dynamic_import_chunkname852.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-import-module-exports": _typescript_eslint_utils_ts_eslint693.RuleModule<"notAllowed", [(eslint_plugin_import_x_rules_no_import_module_exports857.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-empty-named-blocks": _typescript_eslint_utils_ts_eslint693.RuleModule<"emptyNamed" | "unused" | "emptyImport", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "exports-last": _typescript_eslint_utils_ts_eslint693.RuleModule<"end", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "no-deprecated": _typescript_eslint_utils_ts_eslint693.RuleModule<"deprecated" | "deprecatedDesc", [], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
        "imports-first": _typescript_eslint_utils_ts_eslint693.RuleModule<eslint_plugin_import_x_rules_first793.MessageId, [(eslint_plugin_import_x_rules_first793.Options | undefined)?], eslint_plugin_import_x_utils696.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint693.RuleListener>;
      };
      cjsRequire: eslint_plugin_import_x875.CjsRequire;
      importXResolverCompat: typeof eslint_plugin_import_x875.importXResolverCompat;
      createNodeResolver: typeof createNodeResolver;
    } & {
      flatConfigs: {
        recommended: eslint_plugin_import_x875.PluginFlatConfig;
        errors: eslint_plugin_import_x875.PluginFlatConfig;
        warnings: eslint_plugin_import_x875.PluginFlatConfig;
        'stage-0': eslint_plugin_import_x875.PluginFlatConfig;
        react: eslint_plugin_import_x875.PluginFlatConfig;
        'react-native': eslint_plugin_import_x875.PluginFlatConfig;
        electron: eslint_plugin_import_x875.PluginFlatConfig;
        typescript: eslint_plugin_import_x875.PluginFlatConfig;
      };
      configs: {
        recommended: {
          plugins: ["import-x"];
          rules: {
            "import-x/no-unresolved": "error";
            "import-x/named": "error";
            "import-x/namespace": "error";
            "import-x/default": "error";
            "import-x/export": "error";
            "import-x/no-named-as-default": "warn";
            "import-x/no-named-as-default-member": "warn";
            "import-x/no-duplicates": "warn";
          };
          parserOptions: {
            sourceType: "module";
            ecmaVersion: 2018;
          };
        };
        errors: {
          plugins: ["import-x"];
          rules: {
            "import-x/no-unresolved": 2;
            "import-x/named": 2;
            "import-x/namespace": 2;
            "import-x/default": 2;
            "import-x/export": 2;
          };
        };
        warnings: {
          plugins: ["import-x"];
          rules: {
            "import-x/no-named-as-default": 1;
            "import-x/no-named-as-default-member": 1;
            "import-x/no-rename-default": 1;
            "import-x/no-duplicates": 1;
          };
        };
        'stage-0': eslint_plugin_import_x875.PluginConfig;
        react: {
          settings: {
            "import-x/extensions": (".js" | ".jsx")[];
          };
          parserOptions: {
            ecmaFeatures: {
              jsx: true;
            };
          };
        };
        'react-native': {
          settings: {
            "import-x/resolver": {
              node: {
                extensions: string[];
              };
            };
          };
        };
        electron: {
          settings: {
            "import-x/core-modules": string[];
          };
        };
        typescript: {
          settings: {
            "import-x/extensions": readonly [".ts", ".tsx", ".cts", ".mts", ".js", ".jsx", ".cjs", ".mjs"];
            "import-x/external-module-folders": string[];
            "import-x/parsers": {
              "@typescript-eslint/parser": (".ts" | ".tsx" | ".cts" | ".mts")[];
            };
            "import-x/resolver": {
              typescript: true;
            };
          };
          rules: {
            "import-x/named": "off";
          };
        };
        'flat/recommended': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/errors': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/warnings': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/stage-0': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/react': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/react-native': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/electron': eslint_plugin_import_x875.PluginFlatConfig;
        'flat/typescript': eslint_plugin_import_x875.PluginFlatConfig;
      };
    };
  };
  settings: {
    "import-x/extensions": string[];
    "import-x/resolver-next": ({
      interfaceVersion: number;
      name: string;
      resolve(source: string, file: string): eslint_import_context894.ResolvedResult;
    } | eslint_import_context894.NewResolver)[];
  };
  rules: {
    "import-x/export": "error";
    "import-x/no-deprecated": "error";
    "import-x/no-empty-named-blocks": "warn";
    "import-x/no-extraneous-dependencies": "off";
    "import-x/no-mutable-exports": "error";
    "import-x/no-named-as-default": "warn";
    "import-x/no-named-as-default-member": "warn";
    "import-x/no-unused-modules": "error";
    "import-x/no-amd": "off";
    "import-x/no-commonjs": "off";
    "import-x/no-nodejs-modules": "off";
    "import-x/no-import-module-exports": "warn";
    "import-x/unambiguous": "off";
    "import-x/default": "error";
    "import-x/named": "error";
    "import-x/namespace": "error";
    "import-x/no-absolute-path": "error";
    "import-x/no-cycle": "warn";
    "import-x/no-dynamic-require": "error";
    "import-x/no-internal-modules": "off";
    "import-x/no-relative-packages": "warn";
    "import-x/no-relative-parent-imports": "off";
    "import-x/no-restricted-paths": "off";
    "import-x/no-self-import": "error";
    "import-x/no-unresolved": ["error", {
      commonjs: boolean;
      ignore: string[];
    }];
    "import-x/no-useless-path-segments": ["error", {
      noUselessIndex: boolean;
    }];
    "import-x/no-webpack-loader-syntax": "error";
    "import-x/consistent-type-specifier-style": "off";
    "import-x/dynamic-import-chunkname": "off";
    "import-x/exports-last": "off";
    "import-x/extensions": "off";
    "import-x/first": ["error", string];
    "import-x/group-exports": "off";
    "import-x/max-dependencies": "off";
    "import-x/newline-after-import": "error";
    "import-x/no-anonymous-default-export": "warn";
    "import-x/no-default-export": "warn";
    "import-x/no-duplicates": "error";
    "import-x/no-named-default": "off";
    "import-x/no-named-export": "off";
    "import-x/no-namespace": "off";
    "import-x/no-unassigned-import": "off";
    "import-x/order": ["error", {
      "newlines-between": string;
      pathGroups: {
        pattern: string;
        group: string;
      }[];
      groups: (string | string[])[];
    }];
    "import-x/prefer-default-export": "off";
  };
  files?: undefined;
} | {
  name: string;
  files: string[];
  rules: {
    "import-x/no-default-export": "off";
    "import-x/no-anonymous-default-export": "off";
    "import-x/export"?: undefined;
    "import-x/no-deprecated"?: undefined;
    "import-x/no-empty-named-blocks"?: undefined;
    "import-x/no-extraneous-dependencies"?: undefined;
    "import-x/no-mutable-exports"?: undefined;
    "import-x/no-named-as-default"?: undefined;
    "import-x/no-named-as-default-member"?: undefined;
    "import-x/no-unused-modules"?: undefined;
    "import-x/no-amd"?: undefined;
    "import-x/no-commonjs"?: undefined;
    "import-x/no-nodejs-modules"?: undefined;
    "import-x/no-import-module-exports"?: undefined;
    "import-x/unambiguous"?: undefined;
    "import-x/default"?: undefined;
    "import-x/named"?: undefined;
    "import-x/namespace"?: undefined;
    "import-x/no-absolute-path"?: undefined;
    "import-x/no-cycle"?: undefined;
    "import-x/no-dynamic-require"?: undefined;
    "import-x/no-internal-modules"?: undefined;
    "import-x/no-relative-packages"?: undefined;
    "import-x/no-relative-parent-imports"?: undefined;
    "import-x/no-restricted-paths"?: undefined;
    "import-x/no-self-import"?: undefined;
    "import-x/no-unresolved"?: undefined;
    "import-x/no-useless-path-segments"?: undefined;
    "import-x/no-webpack-loader-syntax"?: undefined;
    "import-x/consistent-type-specifier-style"?: undefined;
    "import-x/dynamic-import-chunkname"?: undefined;
    "import-x/exports-last"?: undefined;
    "import-x/extensions"?: undefined;
    "import-x/first"?: undefined;
    "import-x/group-exports"?: undefined;
    "import-x/max-dependencies"?: undefined;
    "import-x/newline-after-import"?: undefined;
    "import-x/no-duplicates"?: undefined;
    "import-x/no-named-default"?: undefined;
    "import-x/no-named-export"?: undefined;
    "import-x/no-namespace"?: undefined;
    "import-x/no-unassigned-import"?: undefined;
    "import-x/order"?: undefined;
    "import-x/prefer-default-export"?: undefined;
  };
  plugins?: undefined;
  settings?: undefined;
})[] | {
  name: string;
  plugins: {
    promise: any;
  };
  rules: {
    "promise/always-return": "error";
    "promise/avoid-new": "off";
    "promise/catch-or-return": ["error", {
      terminationMethod: string[];
    }];
    "promise/no-callback-in-promise": "warn";
    "promise/no-multiple-resolved": "error";
    "promise/no-native": "off";
    "promise/no-nesting": "warn";
    "promise/no-new-statics": "error";
    "promise/no-promise-in-callback": "warn";
    "promise/no-return-in-finally": "error";
    "promise/no-return-wrap": "error";
    "promise/param-names": "error";
    "promise/prefer-await-to-callbacks": "error";
    "promise/prefer-await-to-then": "error";
    "promise/valid-params": "error";
  };
})[];
//#endregion
//#region src/jest.d.ts
declare const _default$2: {
  name: string;
  files: string[];
  languageOptions: {
    globals: {
      afterAll: false;
      afterEach: false;
      beforeAll: false;
      beforeEach: false;
      describe: false;
      expect: false;
      fit: false;
      it: false;
      jest: false;
      test: false;
      xdescribe: false;
      xit: false;
      xtest: false;
    };
  };
  plugins: {
    jest: {
      meta: {
        name: string;
        version: string;
      };
      environments: {
        globals: {
          globals: {
            [key: string]: boolean;
          };
        };
      };
      configs: {
        all: Linter.LegacyConfig;
        recommended: Linter.LegacyConfig;
        style: Linter.LegacyConfig;
        "flat/all": Linter.FlatConfig;
        "flat/recommended": Linter.FlatConfig;
        "flat/style": Linter.FlatConfig;
      };
      rules: {
        [key: string]: eslint896.Rule.RuleModule;
      };
    };
  };
  rules: {
    "jest/consistent-test-it": "error";
    "jest/expect-expect": ["error", {
      assertFunctionNames: string[];
    }];
    "jest/lowercase-name": "off";
    "jest/no-alias-methods": "warn";
    "jest/no-commented-out-tests": "warn";
    "jest/no-conditional-expect": "warn";
    "jest/no-deprecated-functions": "error";
    "jest/no-disabled-tests": "warn";
    "jest/no-done-callback": "error";
    "jest/no-duplicate-hooks": "error";
    "jest/no-export": "error";
    "jest/no-focused-tests": "error";
    "jest/no-hooks": "off";
    "jest/no-identical-title": "error";
    "jest/no-if": "error";
    "jest/no-interpolation-in-snapshots": "error";
    "jest/no-jasmine-globals": "error";
    "jest/no-large-snapshots": ["warn", {
      maxSize: number;
    }];
    "jest/no-mocks-import": "error";
    "jest/no-restricted-matchers": "off";
    "jest/no-standalone-expect": "error";
    "jest/no-test-prefixes": "error";
    "jest/prefer-expect-assertions": "off";
    "jest/prefer-hooks-on-top": "warn";
    "jest/prefer-spy-on": "warn";
    "jest/prefer-strict-equal": "warn";
    "jest/prefer-to-contain": "warn";
    "jest/prefer-to-have-length": "warn";
    "jest/require-to-throw-message": "error";
    "jest/require-top-level-describe": "error";
    "jest/valid-expect": "error";
    "jest/valid-expect-in-promise": "error";
    "jest/valid-title": "error";
  };
}[];
//#endregion
//#region src/next.d.ts
declare const _default$3: ({
  name: string;
  files: string[];
  languageOptions: {
    parserOptions: {
      ecmaFeatures: {
        jsx: true;
        modules: boolean;
      };
      sourceType: "module";
    };
    globals: {
      AbortController: false;
      AbortSignal: false;
      AbsoluteOrientationSensor: false;
      AbstractRange: false;
      Accelerometer: false;
      addEventListener: false;
      ai: false;
      AI: false;
      AICreateMonitor: false;
      AITextSession: false;
      alert: false;
      AnalyserNode: false;
      Animation: false;
      AnimationEffect: false;
      AnimationEvent: false;
      AnimationPlaybackEvent: false;
      AnimationTimeline: false;
      AsyncDisposableStack: false;
      atob: false;
      Attr: false;
      Audio: false;
      AudioBuffer: false;
      AudioBufferSourceNode: false;
      AudioContext: false;
      AudioData: false;
      AudioDecoder: false;
      AudioDestinationNode: false;
      AudioEncoder: false;
      AudioListener: false;
      AudioNode: false;
      AudioParam: false;
      AudioParamMap: false;
      AudioProcessingEvent: false;
      AudioScheduledSourceNode: false;
      AudioSinkInfo: false;
      AudioWorklet: false;
      AudioWorkletGlobalScope: false;
      AudioWorkletNode: false;
      AudioWorkletProcessor: false;
      AuthenticatorAssertionResponse: false;
      AuthenticatorAttestationResponse: false;
      AuthenticatorResponse: false;
      BackgroundFetchManager: false;
      BackgroundFetchRecord: false;
      BackgroundFetchRegistration: false;
      BarcodeDetector: false;
      BarProp: false;
      BaseAudioContext: false;
      BatteryManager: false;
      BeforeUnloadEvent: false;
      BiquadFilterNode: false;
      Blob: false;
      BlobEvent: false;
      Bluetooth: false;
      BluetoothCharacteristicProperties: false;
      BluetoothDevice: false;
      BluetoothRemoteGATTCharacteristic: false;
      BluetoothRemoteGATTDescriptor: false;
      BluetoothRemoteGATTServer: false;
      BluetoothRemoteGATTService: false;
      BluetoothUUID: false;
      blur: false;
      BroadcastChannel: false;
      BrowserCaptureMediaStreamTrack: false;
      btoa: false;
      ByteLengthQueuingStrategy: false;
      Cache: false;
      caches: false;
      CacheStorage: false;
      cancelAnimationFrame: false;
      cancelIdleCallback: false;
      CanvasCaptureMediaStream: false;
      CanvasCaptureMediaStreamTrack: false;
      CanvasGradient: false;
      CanvasPattern: false;
      CanvasRenderingContext2D: false;
      CaptureController: false;
      CaretPosition: false;
      CDATASection: false;
      ChannelMergerNode: false;
      ChannelSplitterNode: false;
      ChapterInformation: false;
      CharacterBoundsUpdateEvent: false;
      CharacterData: false;
      clearInterval: false;
      clearTimeout: false;
      clientInformation: false;
      Clipboard: false;
      ClipboardEvent: false;
      ClipboardItem: false;
      close: false;
      closed: false;
      CloseEvent: false;
      CloseWatcher: false;
      CommandEvent: false;
      Comment: false;
      CompositionEvent: false;
      CompressionStream: false;
      confirm: false;
      console: false;
      ConstantSourceNode: false;
      ContentVisibilityAutoStateChangeEvent: false;
      ConvolverNode: false;
      CookieChangeEvent: false;
      CookieDeprecationLabel: false;
      cookieStore: false;
      CookieStore: false;
      CookieStoreManager: false;
      CountQueuingStrategy: false;
      createImageBitmap: false;
      Credential: false;
      credentialless: false;
      CredentialsContainer: false;
      CropTarget: false;
      crossOriginIsolated: false;
      crypto: false;
      Crypto: false;
      CryptoKey: false;
      CSPViolationReportBody: false;
      CSS: false;
      CSSAnimation: false;
      CSSConditionRule: false;
      CSSContainerRule: false;
      CSSCounterStyleRule: false;
      CSSFontFaceRule: false;
      CSSFontFeatureValuesRule: false;
      CSSFontPaletteValuesRule: false;
      CSSGroupingRule: false;
      CSSImageValue: false;
      CSSImportRule: false;
      CSSKeyframeRule: false;
      CSSKeyframesRule: false;
      CSSKeywordValue: false;
      CSSLayerBlockRule: false;
      CSSLayerStatementRule: false;
      CSSMarginRule: false;
      CSSMathClamp: false;
      CSSMathInvert: false;
      CSSMathMax: false;
      CSSMathMin: false;
      CSSMathNegate: false;
      CSSMathProduct: false;
      CSSMathSum: false;
      CSSMathValue: false;
      CSSMatrixComponent: false;
      CSSMediaRule: false;
      CSSNamespaceRule: false;
      CSSNestedDeclarations: false;
      CSSNumericArray: false;
      CSSNumericValue: false;
      CSSPageDescriptors: false;
      CSSPageRule: false;
      CSSPerspective: false;
      CSSPositionTryDescriptors: false;
      CSSPositionTryRule: false;
      CSSPositionValue: false;
      CSSPropertyRule: false;
      CSSRotate: false;
      CSSRule: false;
      CSSRuleList: false;
      CSSScale: false;
      CSSScopeRule: false;
      CSSSkew: false;
      CSSSkewX: false;
      CSSSkewY: false;
      CSSStartingStyleRule: false;
      CSSStyleDeclaration: false;
      CSSStyleRule: false;
      CSSStyleSheet: false;
      CSSStyleValue: false;
      CSSSupportsRule: false;
      CSSTransformComponent: false;
      CSSTransformValue: false;
      CSSTransition: false;
      CSSTranslate: false;
      CSSUnitValue: false;
      CSSUnparsedValue: false;
      CSSVariableReferenceValue: false;
      CSSViewTransitionRule: false;
      currentFrame: false;
      currentTime: false;
      CustomElementRegistry: false;
      customElements: false;
      CustomEvent: false;
      CustomStateSet: false;
      DataTransfer: false;
      DataTransferItem: false;
      DataTransferItemList: false;
      DecompressionStream: false;
      DelayNode: false;
      DelegatedInkTrailPresenter: false;
      DeviceMotionEvent: false;
      DeviceMotionEventAcceleration: false;
      DeviceMotionEventRotationRate: false;
      DeviceOrientationEvent: false;
      devicePixelRatio: false;
      DevicePosture: false;
      dispatchEvent: false;
      DisposableStack: false;
      document: false;
      Document: false;
      DocumentFragment: false;
      documentPictureInPicture: false;
      DocumentPictureInPicture: false;
      DocumentPictureInPictureEvent: false;
      DocumentTimeline: false;
      DocumentType: false;
      DOMError: false;
      DOMException: false;
      DOMImplementation: false;
      DOMMatrix: false;
      DOMMatrixReadOnly: false;
      DOMParser: false;
      DOMPoint: false;
      DOMPointReadOnly: false;
      DOMQuad: false;
      DOMRect: false;
      DOMRectList: false;
      DOMRectReadOnly: false;
      DOMStringList: false;
      DOMStringMap: false;
      DOMTokenList: false;
      DragEvent: false;
      DynamicsCompressorNode: false;
      EditContext: false;
      Element: false;
      ElementInternals: false;
      EncodedAudioChunk: false;
      EncodedVideoChunk: false;
      ErrorEvent: false;
      event: false;
      Event: false;
      EventCounts: false;
      EventSource: false;
      EventTarget: false;
      external: false;
      External: false;
      EyeDropper: false;
      FeaturePolicy: false;
      FederatedCredential: false;
      fence: false;
      Fence: false;
      FencedFrameConfig: false;
      fetch: false;
      fetchLater: false;
      FetchLaterResult: false;
      File: false;
      FileList: false;
      FileReader: false;
      FileSystem: false;
      FileSystemDirectoryEntry: false;
      FileSystemDirectoryHandle: false;
      FileSystemDirectoryReader: false;
      FileSystemEntry: false;
      FileSystemFileEntry: false;
      FileSystemFileHandle: false;
      FileSystemHandle: false;
      FileSystemObserver: false;
      FileSystemWritableFileStream: false;
      find: false;
      focus: false;
      FocusEvent: false;
      FontData: false;
      FontFace: false;
      FontFaceSet: false;
      FontFaceSetLoadEvent: false;
      FormData: false;
      FormDataEvent: false;
      FragmentDirective: false;
      frameElement: false;
      frames: false;
      GainNode: false;
      Gamepad: false;
      GamepadAxisMoveEvent: false;
      GamepadButton: false;
      GamepadButtonEvent: false;
      GamepadEvent: false;
      GamepadHapticActuator: false;
      GamepadPose: false;
      Geolocation: false;
      GeolocationCoordinates: false;
      GeolocationPosition: false;
      GeolocationPositionError: false;
      getComputedStyle: false;
      getScreenDetails: false;
      getSelection: false;
      GPU: false;
      GPUAdapter: false;
      GPUAdapterInfo: false;
      GPUBindGroup: false;
      GPUBindGroupLayout: false;
      GPUBuffer: false;
      GPUBufferUsage: false;
      GPUCanvasContext: false;
      GPUColorWrite: false;
      GPUCommandBuffer: false;
      GPUCommandEncoder: false;
      GPUCompilationInfo: false;
      GPUCompilationMessage: false;
      GPUComputePassEncoder: false;
      GPUComputePipeline: false;
      GPUDevice: false;
      GPUDeviceLostInfo: false;
      GPUError: false;
      GPUExternalTexture: false;
      GPUInternalError: false;
      GPUMapMode: false;
      GPUOutOfMemoryError: false;
      GPUPipelineError: false;
      GPUPipelineLayout: false;
      GPUQuerySet: false;
      GPUQueue: false;
      GPURenderBundle: false;
      GPURenderBundleEncoder: false;
      GPURenderPassEncoder: false;
      GPURenderPipeline: false;
      GPUSampler: false;
      GPUShaderModule: false;
      GPUShaderStage: false;
      GPUSupportedFeatures: false;
      GPUSupportedLimits: false;
      GPUTexture: false;
      GPUTextureUsage: false;
      GPUTextureView: false;
      GPUUncapturedErrorEvent: false;
      GPUValidationError: false;
      GravitySensor: false;
      Gyroscope: false;
      HashChangeEvent: false;
      Headers: false;
      HID: false;
      HIDConnectionEvent: false;
      HIDDevice: false;
      HIDInputReportEvent: false;
      Highlight: false;
      HighlightRegistry: false;
      history: false;
      History: false;
      HTMLAllCollection: false;
      HTMLAnchorElement: false;
      HTMLAreaElement: false;
      HTMLAudioElement: false;
      HTMLBaseElement: false;
      HTMLBodyElement: false;
      HTMLBRElement: false;
      HTMLButtonElement: false;
      HTMLCanvasElement: false;
      HTMLCollection: false;
      HTMLDataElement: false;
      HTMLDataListElement: false;
      HTMLDetailsElement: false;
      HTMLDialogElement: false;
      HTMLDirectoryElement: false;
      HTMLDivElement: false;
      HTMLDListElement: false;
      HTMLDocument: false;
      HTMLElement: false;
      HTMLEmbedElement: false;
      HTMLFencedFrameElement: false;
      HTMLFieldSetElement: false;
      HTMLFontElement: false;
      HTMLFormControlsCollection: false;
      HTMLFormElement: false;
      HTMLFrameElement: false;
      HTMLFrameSetElement: false;
      HTMLHeadElement: false;
      HTMLHeadingElement: false;
      HTMLHRElement: false;
      HTMLHtmlElement: false;
      HTMLIFrameElement: false;
      HTMLImageElement: false;
      HTMLInputElement: false;
      HTMLLabelElement: false;
      HTMLLegendElement: false;
      HTMLLIElement: false;
      HTMLLinkElement: false;
      HTMLMapElement: false;
      HTMLMarqueeElement: false;
      HTMLMediaElement: false;
      HTMLMenuElement: false;
      HTMLMetaElement: false;
      HTMLMeterElement: false;
      HTMLModElement: false;
      HTMLObjectElement: false;
      HTMLOListElement: false;
      HTMLOptGroupElement: false;
      HTMLOptionElement: false;
      HTMLOptionsCollection: false;
      HTMLOutputElement: false;
      HTMLParagraphElement: false;
      HTMLParamElement: false;
      HTMLPictureElement: false;
      HTMLPreElement: false;
      HTMLProgressElement: false;
      HTMLQuoteElement: false;
      HTMLScriptElement: false;
      HTMLSelectedContentElement: false;
      HTMLSelectElement: false;
      HTMLSlotElement: false;
      HTMLSourceElement: false;
      HTMLSpanElement: false;
      HTMLStyleElement: false;
      HTMLTableCaptionElement: false;
      HTMLTableCellElement: false;
      HTMLTableColElement: false;
      HTMLTableElement: false;
      HTMLTableRowElement: false;
      HTMLTableSectionElement: false;
      HTMLTemplateElement: false;
      HTMLTextAreaElement: false;
      HTMLTimeElement: false;
      HTMLTitleElement: false;
      HTMLTrackElement: false;
      HTMLUListElement: false;
      HTMLUnknownElement: false;
      HTMLVideoElement: false;
      IDBCursor: false;
      IDBCursorWithValue: false;
      IDBDatabase: false;
      IDBFactory: false;
      IDBIndex: false;
      IDBKeyRange: false;
      IDBObjectStore: false;
      IDBOpenDBRequest: false;
      IDBRequest: false;
      IDBTransaction: false;
      IDBVersionChangeEvent: false;
      IdentityCredential: false;
      IdentityCredentialError: false;
      IdentityProvider: false;
      IdleDeadline: false;
      IdleDetector: false;
      IIRFilterNode: false;
      Image: false;
      ImageBitmap: false;
      ImageBitmapRenderingContext: false;
      ImageCapture: false;
      ImageData: false;
      ImageDecoder: false;
      ImageTrack: false;
      ImageTrackList: false;
      indexedDB: false;
      Ink: false;
      innerHeight: false;
      innerWidth: false;
      InputDeviceCapabilities: false;
      InputDeviceInfo: false;
      InputEvent: false;
      IntersectionObserver: false;
      IntersectionObserverEntry: false;
      isSecureContext: false;
      Keyboard: false;
      KeyboardEvent: false;
      KeyboardLayoutMap: false;
      KeyframeEffect: false;
      LanguageDetector: false;
      LargestContentfulPaint: false;
      LaunchParams: false;
      launchQueue: false;
      LaunchQueue: false;
      LayoutShift: false;
      LayoutShiftAttribution: false;
      length: false;
      LinearAccelerationSensor: false;
      localStorage: false;
      location: true;
      Location: false;
      locationbar: false;
      Lock: false;
      LockManager: false;
      matchMedia: false;
      MathMLElement: false;
      MediaCapabilities: false;
      MediaCapabilitiesInfo: false;
      MediaDeviceInfo: false;
      MediaDevices: false;
      MediaElementAudioSourceNode: false;
      MediaEncryptedEvent: false;
      MediaError: false;
      MediaKeyError: false;
      MediaKeyMessageEvent: false;
      MediaKeys: false;
      MediaKeySession: false;
      MediaKeyStatusMap: false;
      MediaKeySystemAccess: false;
      MediaList: false;
      MediaMetadata: false;
      MediaQueryList: false;
      MediaQueryListEvent: false;
      MediaRecorder: false;
      MediaRecorderErrorEvent: false;
      MediaSession: false;
      MediaSource: false;
      MediaSourceHandle: false;
      MediaStream: false;
      MediaStreamAudioDestinationNode: false;
      MediaStreamAudioSourceNode: false;
      MediaStreamEvent: false;
      MediaStreamTrack: false;
      MediaStreamTrackAudioSourceNode: false;
      MediaStreamTrackAudioStats: false;
      MediaStreamTrackEvent: false;
      MediaStreamTrackGenerator: false;
      MediaStreamTrackProcessor: false;
      MediaStreamTrackVideoStats: false;
      menubar: false;
      MessageChannel: false;
      MessageEvent: false;
      MessagePort: false;
      MIDIAccess: false;
      MIDIConnectionEvent: false;
      MIDIInput: false;
      MIDIInputMap: false;
      MIDIMessageEvent: false;
      MIDIOutput: false;
      MIDIOutputMap: false;
      MIDIPort: false;
      MimeType: false;
      MimeTypeArray: false;
      model: false;
      ModelGenericSession: false;
      ModelManager: false;
      MouseEvent: false;
      moveBy: false;
      moveTo: false;
      MutationEvent: false;
      MutationObserver: false;
      MutationRecord: false;
      name: false;
      NamedNodeMap: false;
      NavigateEvent: false;
      navigation: false;
      Navigation: false;
      NavigationActivation: false;
      NavigationCurrentEntryChangeEvent: false;
      NavigationDestination: false;
      NavigationHistoryEntry: false;
      NavigationPreloadManager: false;
      NavigationTransition: false;
      navigator: false;
      Navigator: false;
      NavigatorLogin: false;
      NavigatorManagedData: false;
      NavigatorUAData: false;
      NetworkInformation: false;
      Node: false;
      NodeFilter: false;
      NodeIterator: false;
      NodeList: false;
      Notification: false;
      NotifyPaintEvent: false;
      NotRestoredReasonDetails: false;
      NotRestoredReasons: false;
      Observable: false;
      OfflineAudioCompletionEvent: false;
      OfflineAudioContext: false;
      offscreenBuffering: false;
      OffscreenCanvas: false;
      OffscreenCanvasRenderingContext2D: false;
      onabort: true;
      onafterprint: true;
      onanimationcancel: true;
      onanimationend: true;
      onanimationiteration: true;
      onanimationstart: true;
      onappinstalled: true;
      onauxclick: true;
      onbeforeinput: true;
      onbeforeinstallprompt: true;
      onbeforematch: true;
      onbeforeprint: true;
      onbeforetoggle: true;
      onbeforeunload: true;
      onbeforexrselect: true;
      onblur: true;
      oncancel: true;
      oncanplay: true;
      oncanplaythrough: true;
      onchange: true;
      onclick: true;
      onclose: true;
      oncommand: true;
      oncontentvisibilityautostatechange: true;
      oncontextlost: true;
      oncontextmenu: true;
      oncontextrestored: true;
      oncopy: true;
      oncuechange: true;
      oncut: true;
      ondblclick: true;
      ondevicemotion: true;
      ondeviceorientation: true;
      ondeviceorientationabsolute: true;
      ondrag: true;
      ondragend: true;
      ondragenter: true;
      ondragleave: true;
      ondragover: true;
      ondragstart: true;
      ondrop: true;
      ondurationchange: true;
      onemptied: true;
      onended: true;
      onerror: true;
      onfocus: true;
      onformdata: true;
      ongamepadconnected: true;
      ongamepaddisconnected: true;
      ongotpointercapture: true;
      onhashchange: true;
      oninput: true;
      oninvalid: true;
      onkeydown: true;
      onkeypress: true;
      onkeyup: true;
      onlanguagechange: true;
      onload: true;
      onloadeddata: true;
      onloadedmetadata: true;
      onloadstart: true;
      onlostpointercapture: true;
      onmessage: true;
      onmessageerror: true;
      onmousedown: true;
      onmouseenter: true;
      onmouseleave: true;
      onmousemove: true;
      onmouseout: true;
      onmouseover: true;
      onmouseup: true;
      onmousewheel: true;
      onoffline: true;
      ononline: true;
      onpagehide: true;
      onpagereveal: true;
      onpageshow: true;
      onpageswap: true;
      onpaste: true;
      onpause: true;
      onplay: true;
      onplaying: true;
      onpointercancel: true;
      onpointerdown: true;
      onpointerenter: true;
      onpointerleave: true;
      onpointermove: true;
      onpointerout: true;
      onpointerover: true;
      onpointerrawupdate: true;
      onpointerup: true;
      onpopstate: true;
      onprogress: true;
      onratechange: true;
      onrejectionhandled: true;
      onreset: true;
      onresize: true;
      onscroll: true;
      onscrollend: true;
      onscrollsnapchange: true;
      onscrollsnapchanging: true;
      onsearch: true;
      onsecuritypolicyviolation: true;
      onseeked: true;
      onseeking: true;
      onselect: true;
      onselectionchange: true;
      onselectstart: true;
      onslotchange: true;
      onstalled: true;
      onstorage: true;
      onsubmit: true;
      onsuspend: true;
      ontimeupdate: true;
      ontoggle: true;
      ontransitioncancel: true;
      ontransitionend: true;
      ontransitionrun: true;
      ontransitionstart: true;
      onunhandledrejection: true;
      onunload: true;
      onvolumechange: true;
      onwaiting: true;
      onwheel: true;
      open: false;
      opener: false;
      Option: false;
      OrientationSensor: false;
      origin: false;
      originAgentCluster: false;
      OscillatorNode: false;
      OTPCredential: false;
      outerHeight: false;
      outerWidth: false;
      OverconstrainedError: false;
      PageRevealEvent: false;
      PageSwapEvent: false;
      PageTransitionEvent: false;
      pageXOffset: false;
      pageYOffset: false;
      PannerNode: false;
      parent: false;
      PasswordCredential: false;
      Path2D: false;
      PaymentAddress: false;
      PaymentManager: false;
      PaymentMethodChangeEvent: false;
      PaymentRequest: false;
      PaymentRequestUpdateEvent: false;
      PaymentResponse: false;
      performance: false;
      Performance: false;
      PerformanceElementTiming: false;
      PerformanceEntry: false;
      PerformanceEventTiming: false;
      PerformanceLongAnimationFrameTiming: false;
      PerformanceLongTaskTiming: false;
      PerformanceMark: false;
      PerformanceMeasure: false;
      PerformanceNavigation: false;
      PerformanceNavigationTiming: false;
      PerformanceObserver: false;
      PerformanceObserverEntryList: false;
      PerformancePaintTiming: false;
      PerformanceResourceTiming: false;
      PerformanceScriptTiming: false;
      PerformanceServerTiming: false;
      PerformanceTiming: false;
      PeriodicSyncManager: false;
      PeriodicWave: false;
      Permissions: false;
      PermissionStatus: false;
      PERSISTENT: false;
      personalbar: false;
      PictureInPictureEvent: false;
      PictureInPictureWindow: false;
      Plugin: false;
      PluginArray: false;
      PointerEvent: false;
      PopStateEvent: false;
      postMessage: false;
      Presentation: false;
      PresentationAvailability: false;
      PresentationConnection: false;
      PresentationConnectionAvailableEvent: false;
      PresentationConnectionCloseEvent: false;
      PresentationConnectionList: false;
      PresentationReceiver: false;
      PresentationRequest: false;
      PressureObserver: false;
      PressureRecord: false;
      print: false;
      ProcessingInstruction: false;
      Profiler: false;
      ProgressEvent: false;
      PromiseRejectionEvent: false;
      prompt: false;
      ProtectedAudience: false;
      PublicKeyCredential: false;
      PushManager: false;
      PushSubscription: false;
      PushSubscriptionOptions: false;
      queryLocalFonts: false;
      queueMicrotask: false;
      RadioNodeList: false;
      Range: false;
      ReadableByteStreamController: false;
      ReadableStream: false;
      ReadableStreamBYOBReader: false;
      ReadableStreamBYOBRequest: false;
      ReadableStreamDefaultController: false;
      ReadableStreamDefaultReader: false;
      registerProcessor: false;
      RelativeOrientationSensor: false;
      RemotePlayback: false;
      removeEventListener: false;
      ReportBody: false;
      reportError: false;
      ReportingObserver: false;
      Request: false;
      requestAnimationFrame: false;
      requestIdleCallback: false;
      resizeBy: false;
      ResizeObserver: false;
      ResizeObserverEntry: false;
      ResizeObserverSize: false;
      resizeTo: false;
      Response: false;
      RestrictionTarget: false;
      RTCCertificate: false;
      RTCDataChannel: false;
      RTCDataChannelEvent: false;
      RTCDtlsTransport: false;
      RTCDTMFSender: false;
      RTCDTMFToneChangeEvent: false;
      RTCEncodedAudioFrame: false;
      RTCEncodedVideoFrame: false;
      RTCError: false;
      RTCErrorEvent: false;
      RTCIceCandidate: false;
      RTCIceTransport: false;
      RTCPeerConnection: false;
      RTCPeerConnectionIceErrorEvent: false;
      RTCPeerConnectionIceEvent: false;
      RTCRtpReceiver: false;
      RTCRtpScriptTransform: false;
      RTCRtpSender: false;
      RTCRtpTransceiver: false;
      RTCSctpTransport: false;
      RTCSessionDescription: false;
      RTCStatsReport: false;
      RTCTrackEvent: false;
      sampleRate: false;
      scheduler: false;
      Scheduler: false;
      Scheduling: false;
      screen: false;
      Screen: false;
      ScreenDetailed: false;
      ScreenDetails: false;
      screenLeft: false;
      ScreenOrientation: false;
      screenTop: false;
      screenX: false;
      screenY: false;
      ScriptProcessorNode: false;
      scroll: false;
      scrollbars: false;
      scrollBy: false;
      ScrollTimeline: false;
      scrollTo: false;
      scrollX: false;
      scrollY: false;
      SecurityPolicyViolationEvent: false;
      Selection: false;
      self: false;
      Sensor: false;
      SensorErrorEvent: false;
      Serial: false;
      SerialPort: false;
      ServiceWorker: false;
      ServiceWorkerContainer: false;
      ServiceWorkerRegistration: false;
      sessionStorage: false;
      setInterval: false;
      setTimeout: false;
      ShadowRoot: false;
      sharedStorage: false;
      SharedStorage: false;
      SharedStorageAppendMethod: false;
      SharedStorageClearMethod: false;
      SharedStorageDeleteMethod: false;
      SharedStorageModifierMethod: false;
      SharedStorageSetMethod: false;
      SharedStorageWorklet: false;
      SharedWorker: false;
      showDirectoryPicker: false;
      showOpenFilePicker: false;
      showSaveFilePicker: false;
      SnapEvent: false;
      SourceBuffer: false;
      SourceBufferList: false;
      speechSynthesis: false;
      SpeechSynthesis: false;
      SpeechSynthesisErrorEvent: false;
      SpeechSynthesisEvent: false;
      SpeechSynthesisUtterance: false;
      SpeechSynthesisVoice: false;
      StaticRange: false;
      status: false;
      statusbar: false;
      StereoPannerNode: false;
      stop: false;
      Storage: false;
      StorageBucket: false;
      StorageBucketManager: false;
      StorageEvent: false;
      StorageManager: false;
      structuredClone: false;
      styleMedia: false;
      StylePropertyMap: false;
      StylePropertyMapReadOnly: false;
      StyleSheet: false;
      StyleSheetList: false;
      SubmitEvent: false;
      Subscriber: false;
      SubtleCrypto: false;
      SuppressedError: false;
      SVGAElement: false;
      SVGAngle: false;
      SVGAnimatedAngle: false;
      SVGAnimatedBoolean: false;
      SVGAnimatedEnumeration: false;
      SVGAnimatedInteger: false;
      SVGAnimatedLength: false;
      SVGAnimatedLengthList: false;
      SVGAnimatedNumber: false;
      SVGAnimatedNumberList: false;
      SVGAnimatedPreserveAspectRatio: false;
      SVGAnimatedRect: false;
      SVGAnimatedString: false;
      SVGAnimatedTransformList: false;
      SVGAnimateElement: false;
      SVGAnimateMotionElement: false;
      SVGAnimateTransformElement: false;
      SVGAnimationElement: false;
      SVGCircleElement: false;
      SVGClipPathElement: false;
      SVGComponentTransferFunctionElement: false;
      SVGDefsElement: false;
      SVGDescElement: false;
      SVGElement: false;
      SVGEllipseElement: false;
      SVGFEBlendElement: false;
      SVGFEColorMatrixElement: false;
      SVGFEComponentTransferElement: false;
      SVGFECompositeElement: false;
      SVGFEConvolveMatrixElement: false;
      SVGFEDiffuseLightingElement: false;
      SVGFEDisplacementMapElement: false;
      SVGFEDistantLightElement: false;
      SVGFEDropShadowElement: false;
      SVGFEFloodElement: false;
      SVGFEFuncAElement: false;
      SVGFEFuncBElement: false;
      SVGFEFuncGElement: false;
      SVGFEFuncRElement: false;
      SVGFEGaussianBlurElement: false;
      SVGFEImageElement: false;
      SVGFEMergeElement: false;
      SVGFEMergeNodeElement: false;
      SVGFEMorphologyElement: false;
      SVGFEOffsetElement: false;
      SVGFEPointLightElement: false;
      SVGFESpecularLightingElement: false;
      SVGFESpotLightElement: false;
      SVGFETileElement: false;
      SVGFETurbulenceElement: false;
      SVGFilterElement: false;
      SVGForeignObjectElement: false;
      SVGGElement: false;
      SVGGeometryElement: false;
      SVGGradientElement: false;
      SVGGraphicsElement: false;
      SVGImageElement: false;
      SVGLength: false;
      SVGLengthList: false;
      SVGLinearGradientElement: false;
      SVGLineElement: false;
      SVGMarkerElement: false;
      SVGMaskElement: false;
      SVGMatrix: false;
      SVGMetadataElement: false;
      SVGMPathElement: false;
      SVGNumber: false;
      SVGNumberList: false;
      SVGPathElement: false;
      SVGPatternElement: false;
      SVGPoint: false;
      SVGPointList: false;
      SVGPolygonElement: false;
      SVGPolylineElement: false;
      SVGPreserveAspectRatio: false;
      SVGRadialGradientElement: false;
      SVGRect: false;
      SVGRectElement: false;
      SVGScriptElement: false;
      SVGSetElement: false;
      SVGStopElement: false;
      SVGStringList: false;
      SVGStyleElement: false;
      SVGSVGElement: false;
      SVGSwitchElement: false;
      SVGSymbolElement: false;
      SVGTextContentElement: false;
      SVGTextElement: false;
      SVGTextPathElement: false;
      SVGTextPositioningElement: false;
      SVGTitleElement: false;
      SVGTransform: false;
      SVGTransformList: false;
      SVGTSpanElement: false;
      SVGUnitTypes: false;
      SVGUseElement: false;
      SVGViewElement: false;
      SyncManager: false;
      TaskAttributionTiming: false;
      TaskController: false;
      TaskPriorityChangeEvent: false;
      TaskSignal: false;
      TEMPORARY: false;
      Text: false;
      TextDecoder: false;
      TextDecoderStream: false;
      TextEncoder: false;
      TextEncoderStream: false;
      TextEvent: false;
      TextFormat: false;
      TextFormatUpdateEvent: false;
      TextMetrics: false;
      TextTrack: false;
      TextTrackCue: false;
      TextTrackCueList: false;
      TextTrackList: false;
      TextUpdateEvent: false;
      TimeEvent: false;
      TimeRanges: false;
      ToggleEvent: false;
      toolbar: false;
      top: false;
      Touch: false;
      TouchEvent: false;
      TouchList: false;
      TrackEvent: false;
      TransformStream: false;
      TransformStreamDefaultController: false;
      TransitionEvent: false;
      TreeWalker: false;
      TrustedHTML: false;
      TrustedScript: false;
      TrustedScriptURL: false;
      TrustedTypePolicy: false;
      TrustedTypePolicyFactory: false;
      trustedTypes: false;
      UIEvent: false;
      URL: false;
      URLPattern: false;
      URLSearchParams: false;
      USB: false;
      USBAlternateInterface: false;
      USBConfiguration: false;
      USBConnectionEvent: false;
      USBDevice: false;
      USBEndpoint: false;
      USBInterface: false;
      USBInTransferResult: false;
      USBIsochronousInTransferPacket: false;
      USBIsochronousInTransferResult: false;
      USBIsochronousOutTransferPacket: false;
      USBIsochronousOutTransferResult: false;
      USBOutTransferResult: false;
      UserActivation: false;
      ValidityState: false;
      VideoColorSpace: false;
      VideoDecoder: false;
      VideoEncoder: false;
      VideoFrame: false;
      VideoPlaybackQuality: false;
      ViewTimeline: false;
      ViewTransition: false;
      ViewTransitionTypeSet: false;
      VirtualKeyboard: false;
      VirtualKeyboardGeometryChangeEvent: false;
      VisibilityStateEntry: false;
      visualViewport: false;
      VisualViewport: false;
      VTTCue: false;
      VTTRegion: false;
      WakeLock: false;
      WakeLockSentinel: false;
      WaveShaperNode: false;
      WebAssembly: false;
      WebGL2RenderingContext: false;
      WebGLActiveInfo: false;
      WebGLBuffer: false;
      WebGLContextEvent: false;
      WebGLFramebuffer: false;
      WebGLObject: false;
      WebGLProgram: false;
      WebGLQuery: false;
      WebGLRenderbuffer: false;
      WebGLRenderingContext: false;
      WebGLSampler: false;
      WebGLShader: false;
      WebGLShaderPrecisionFormat: false;
      WebGLSync: false;
      WebGLTexture: false;
      WebGLTransformFeedback: false;
      WebGLUniformLocation: false;
      WebGLVertexArrayObject: false;
      WebSocket: false;
      WebSocketError: false;
      WebSocketStream: false;
      WebTransport: false;
      WebTransportBidirectionalStream: false;
      WebTransportDatagramDuplexStream: false;
      WebTransportError: false;
      WebTransportReceiveStream: false;
      WebTransportSendStream: false;
      WGSLLanguageFeatures: false;
      WheelEvent: false;
      when: false;
      window: false;
      Window: false;
      WindowControlsOverlay: false;
      WindowControlsOverlayGeometryChangeEvent: false;
      Worker: false;
      Worklet: false;
      WorkletGlobalScope: false;
      WritableStream: false;
      WritableStreamDefaultController: false;
      WritableStreamDefaultWriter: false;
      XMLDocument: false;
      XMLHttpRequest: false;
      XMLHttpRequestEventTarget: false;
      XMLHttpRequestUpload: false;
      XMLSerializer: false;
      XPathEvaluator: false;
      XPathExpression: false;
      XPathResult: false;
      XRAnchor: false;
      XRAnchorSet: false;
      XRBoundedReferenceSpace: false;
      XRCamera: false;
      XRCPUDepthInformation: false;
      XRDepthInformation: false;
      XRDOMOverlayState: false;
      XRFrame: false;
      XRHand: false;
      XRHitTestResult: false;
      XRHitTestSource: false;
      XRInputSource: false;
      XRInputSourceArray: false;
      XRInputSourceEvent: false;
      XRInputSourcesChangeEvent: false;
      XRJointPose: false;
      XRJointSpace: false;
      XRLayer: false;
      XRLightEstimate: false;
      XRLightProbe: false;
      XRPose: false;
      XRRay: false;
      XRReferenceSpace: false;
      XRReferenceSpaceEvent: false;
      XRRenderState: false;
      XRRigidTransform: false;
      XRSession: false;
      XRSessionEvent: false;
      XRSpace: false;
      XRSystem: false;
      XRTransientInputHitTestResult: false;
      XRTransientInputHitTestSource: false;
      XRView: false;
      XRViewerPose: false;
      XRViewport: false;
      XRWebGLBinding: false;
      XRWebGLDepthInformation: false;
      XRWebGLLayer: false;
      XSLTProcessor: false;
    };
  };
  settings: {
    react: {
      version: string;
    };
  };
  plugins: {
    react: {
      deprecatedRules: Partial<{
        'boolean-prop-naming': eslint484.Rule.RuleModule;
        'button-has-type': eslint484.Rule.RuleModule;
        'checked-requires-onchange-or-readonly': eslint484.Rule.RuleModule;
        'default-props-match-prop-types': eslint484.Rule.RuleModule;
        'destructuring-assignment': eslint484.Rule.RuleModule;
        'display-name': eslint484.Rule.RuleModule;
        'forbid-component-props': eslint484.Rule.RuleModule;
        'forbid-dom-props': eslint484.Rule.RuleModule;
        'forbid-elements': eslint484.Rule.RuleModule;
        'forbid-foreign-prop-types': eslint484.Rule.RuleModule;
        'forbid-prop-types': eslint484.Rule.RuleModule;
        'forward-ref-uses-ref': eslint484.Rule.RuleModule;
        'function-component-definition': eslint484.Rule.RuleModule;
        'hook-use-state': eslint484.Rule.RuleModule;
        'iframe-missing-sandbox': eslint484.Rule.RuleModule;
        'jsx-boolean-value': eslint484.Rule.RuleModule;
        'jsx-child-element-spacing': eslint484.Rule.RuleModule;
        'jsx-closing-bracket-location': eslint484.Rule.RuleModule;
        'jsx-closing-tag-location': eslint484.Rule.RuleModule;
        'jsx-curly-spacing': eslint484.Rule.RuleModule;
        'jsx-curly-newline': eslint484.Rule.RuleModule;
        'jsx-equals-spacing': eslint484.Rule.RuleModule;
        'jsx-filename-extension': eslint484.Rule.RuleModule;
        'jsx-first-prop-new-line': eslint484.Rule.RuleModule;
        'jsx-handler-names': eslint484.Rule.RuleModule;
        'jsx-indent': eslint484.Rule.RuleModule;
        'jsx-indent-props': eslint484.Rule.RuleModule;
        'jsx-key': eslint484.Rule.RuleModule;
        'jsx-max-depth': eslint484.Rule.RuleModule;
        'jsx-max-props-per-line': eslint484.Rule.RuleModule;
        'jsx-newline': eslint484.Rule.RuleModule;
        'jsx-no-bind': eslint484.Rule.RuleModule;
        'jsx-no-comment-textnodes': eslint484.Rule.RuleModule;
        'jsx-no-constructed-context-values': eslint484.Rule.RuleModule;
        'jsx-no-duplicate-props': eslint484.Rule.RuleModule;
        'jsx-no-leaked-render': eslint484.Rule.RuleModule;
        'jsx-no-literals': eslint484.Rule.RuleModule;
        'jsx-no-script-url': eslint484.Rule.RuleModule;
        'jsx-no-target-blank': eslint484.Rule.RuleModule;
        'jsx-no-useless-fragment': eslint484.Rule.RuleModule;
        'jsx-one-expression-per-line': eslint484.Rule.RuleModule;
        'jsx-no-undef': eslint484.Rule.RuleModule;
        'jsx-curly-brace-presence': eslint484.Rule.RuleModule;
        'jsx-pascal-case': eslint484.Rule.RuleModule;
        'jsx-fragments': eslint484.Rule.RuleModule;
        'jsx-props-no-multi-spaces': eslint484.Rule.RuleModule;
        'jsx-props-no-spreading': eslint484.Rule.RuleModule;
        'jsx-props-no-spread-multi': eslint484.Rule.RuleModule;
        'jsx-sort-default-props': eslint484.Rule.RuleModule;
        'jsx-sort-props': eslint484.Rule.RuleModule;
        'jsx-space-before-closing': eslint484.Rule.RuleModule;
        'jsx-tag-spacing': eslint484.Rule.RuleModule;
        'jsx-uses-react': eslint484.Rule.RuleModule;
        'jsx-uses-vars': eslint484.Rule.RuleModule;
        'jsx-wrap-multilines': eslint484.Rule.RuleModule;
        'no-invalid-html-attribute': eslint484.Rule.RuleModule;
        'no-access-state-in-setstate': eslint484.Rule.RuleModule;
        'no-adjacent-inline-elements': eslint484.Rule.RuleModule;
        'no-array-index-key': eslint484.Rule.RuleModule;
        'no-arrow-function-lifecycle': eslint484.Rule.RuleModule;
        'no-children-prop': eslint484.Rule.RuleModule;
        'no-danger': eslint484.Rule.RuleModule;
        'no-danger-with-children': eslint484.Rule.RuleModule;
        'no-deprecated': eslint484.Rule.RuleModule;
        'no-did-mount-set-state': eslint484.Rule.RuleModule;
        'no-did-update-set-state': eslint484.Rule.RuleModule;
        'no-direct-mutation-state': eslint484.Rule.RuleModule;
        'no-find-dom-node': eslint484.Rule.RuleModule;
        'no-is-mounted': eslint484.Rule.RuleModule;
        'no-multi-comp': eslint484.Rule.RuleModule;
        'no-namespace': eslint484.Rule.RuleModule;
        'no-set-state': eslint484.Rule.RuleModule;
        'no-string-refs': eslint484.Rule.RuleModule;
        'no-redundant-should-component-update': eslint484.Rule.RuleModule;
        'no-render-return-value': eslint484.Rule.RuleModule;
        'no-this-in-sfc': eslint484.Rule.RuleModule;
        'no-typos': eslint484.Rule.RuleModule;
        'no-unescaped-entities': eslint484.Rule.RuleModule;
        'no-unknown-property': eslint484.Rule.RuleModule;
        'no-unsafe': eslint484.Rule.RuleModule;
        'no-unstable-nested-components': eslint484.Rule.RuleModule;
        'no-unused-class-component-methods': eslint484.Rule.RuleModule;
        'no-unused-prop-types': eslint484.Rule.RuleModule;
        'no-unused-state': eslint484.Rule.RuleModule;
        'no-object-type-as-default-prop': eslint484.Rule.RuleModule;
        'no-will-update-set-state': eslint484.Rule.RuleModule;
        'prefer-es6-class': eslint484.Rule.RuleModule;
        'prefer-exact-props': eslint484.Rule.RuleModule;
        'prefer-read-only-props': eslint484.Rule.RuleModule;
        'prefer-stateless-function': eslint484.Rule.RuleModule;
        'prop-types': eslint484.Rule.RuleModule;
        'react-in-jsx-scope': eslint484.Rule.RuleModule;
        'require-default-props': eslint484.Rule.RuleModule;
        'require-optimization': eslint484.Rule.RuleModule;
        'require-render-return': eslint484.Rule.RuleModule;
        'self-closing-comp': eslint484.Rule.RuleModule;
        'sort-comp': eslint484.Rule.RuleModule;
        'sort-default-props': eslint484.Rule.RuleModule;
        'sort-prop-types': eslint484.Rule.RuleModule;
        'state-in-constructor': eslint484.Rule.RuleModule;
        'static-property-placement': eslint484.Rule.RuleModule;
        'style-prop-object': eslint484.Rule.RuleModule;
        'void-dom-elements-no-children': eslint484.Rule.RuleModule;
      }>;
      rules: {
        'boolean-prop-naming': eslint484.Rule.RuleModule;
        'button-has-type': eslint484.Rule.RuleModule;
        'checked-requires-onchange-or-readonly': eslint484.Rule.RuleModule;
        'default-props-match-prop-types': eslint484.Rule.RuleModule;
        'destructuring-assignment': eslint484.Rule.RuleModule;
        'display-name': eslint484.Rule.RuleModule;
        'forbid-component-props': eslint484.Rule.RuleModule;
        'forbid-dom-props': eslint484.Rule.RuleModule;
        'forbid-elements': eslint484.Rule.RuleModule;
        'forbid-foreign-prop-types': eslint484.Rule.RuleModule;
        'forbid-prop-types': eslint484.Rule.RuleModule;
        'forward-ref-uses-ref': eslint484.Rule.RuleModule;
        'function-component-definition': eslint484.Rule.RuleModule;
        'hook-use-state': eslint484.Rule.RuleModule;
        'iframe-missing-sandbox': eslint484.Rule.RuleModule;
        'jsx-boolean-value': eslint484.Rule.RuleModule;
        'jsx-child-element-spacing': eslint484.Rule.RuleModule;
        'jsx-closing-bracket-location': eslint484.Rule.RuleModule;
        'jsx-closing-tag-location': eslint484.Rule.RuleModule;
        'jsx-curly-spacing': eslint484.Rule.RuleModule;
        'jsx-curly-newline': eslint484.Rule.RuleModule;
        'jsx-equals-spacing': eslint484.Rule.RuleModule;
        'jsx-filename-extension': eslint484.Rule.RuleModule;
        'jsx-first-prop-new-line': eslint484.Rule.RuleModule;
        'jsx-handler-names': eslint484.Rule.RuleModule;
        'jsx-indent': eslint484.Rule.RuleModule;
        'jsx-indent-props': eslint484.Rule.RuleModule;
        'jsx-key': eslint484.Rule.RuleModule;
        'jsx-max-depth': eslint484.Rule.RuleModule;
        'jsx-max-props-per-line': eslint484.Rule.RuleModule;
        'jsx-newline': eslint484.Rule.RuleModule;
        'jsx-no-bind': eslint484.Rule.RuleModule;
        'jsx-no-comment-textnodes': eslint484.Rule.RuleModule;
        'jsx-no-constructed-context-values': eslint484.Rule.RuleModule;
        'jsx-no-duplicate-props': eslint484.Rule.RuleModule;
        'jsx-no-leaked-render': eslint484.Rule.RuleModule;
        'jsx-no-literals': eslint484.Rule.RuleModule;
        'jsx-no-script-url': eslint484.Rule.RuleModule;
        'jsx-no-target-blank': eslint484.Rule.RuleModule;
        'jsx-no-useless-fragment': eslint484.Rule.RuleModule;
        'jsx-one-expression-per-line': eslint484.Rule.RuleModule;
        'jsx-no-undef': eslint484.Rule.RuleModule;
        'jsx-curly-brace-presence': eslint484.Rule.RuleModule;
        'jsx-pascal-case': eslint484.Rule.RuleModule;
        'jsx-fragments': eslint484.Rule.RuleModule;
        'jsx-props-no-multi-spaces': eslint484.Rule.RuleModule;
        'jsx-props-no-spreading': eslint484.Rule.RuleModule;
        'jsx-props-no-spread-multi': eslint484.Rule.RuleModule;
        'jsx-sort-default-props': eslint484.Rule.RuleModule;
        'jsx-sort-props': eslint484.Rule.RuleModule;
        'jsx-space-before-closing': eslint484.Rule.RuleModule;
        'jsx-tag-spacing': eslint484.Rule.RuleModule;
        'jsx-uses-react': eslint484.Rule.RuleModule;
        'jsx-uses-vars': eslint484.Rule.RuleModule;
        'jsx-wrap-multilines': eslint484.Rule.RuleModule;
        'no-invalid-html-attribute': eslint484.Rule.RuleModule;
        'no-access-state-in-setstate': eslint484.Rule.RuleModule;
        'no-adjacent-inline-elements': eslint484.Rule.RuleModule;
        'no-array-index-key': eslint484.Rule.RuleModule;
        'no-arrow-function-lifecycle': eslint484.Rule.RuleModule;
        'no-children-prop': eslint484.Rule.RuleModule;
        'no-danger': eslint484.Rule.RuleModule;
        'no-danger-with-children': eslint484.Rule.RuleModule;
        'no-deprecated': eslint484.Rule.RuleModule;
        'no-did-mount-set-state': eslint484.Rule.RuleModule;
        'no-did-update-set-state': eslint484.Rule.RuleModule;
        'no-direct-mutation-state': eslint484.Rule.RuleModule;
        'no-find-dom-node': eslint484.Rule.RuleModule;
        'no-is-mounted': eslint484.Rule.RuleModule;
        'no-multi-comp': eslint484.Rule.RuleModule;
        'no-namespace': eslint484.Rule.RuleModule;
        'no-set-state': eslint484.Rule.RuleModule;
        'no-string-refs': eslint484.Rule.RuleModule;
        'no-redundant-should-component-update': eslint484.Rule.RuleModule;
        'no-render-return-value': eslint484.Rule.RuleModule;
        'no-this-in-sfc': eslint484.Rule.RuleModule;
        'no-typos': eslint484.Rule.RuleModule;
        'no-unescaped-entities': eslint484.Rule.RuleModule;
        'no-unknown-property': eslint484.Rule.RuleModule;
        'no-unsafe': eslint484.Rule.RuleModule;
        'no-unstable-nested-components': eslint484.Rule.RuleModule;
        'no-unused-class-component-methods': eslint484.Rule.RuleModule;
        'no-unused-prop-types': eslint484.Rule.RuleModule;
        'no-unused-state': eslint484.Rule.RuleModule;
        'no-object-type-as-default-prop': eslint484.Rule.RuleModule;
        'no-will-update-set-state': eslint484.Rule.RuleModule;
        'prefer-es6-class': eslint484.Rule.RuleModule;
        'prefer-exact-props': eslint484.Rule.RuleModule;
        'prefer-read-only-props': eslint484.Rule.RuleModule;
        'prefer-stateless-function': eslint484.Rule.RuleModule;
        'prop-types': eslint484.Rule.RuleModule;
        'react-in-jsx-scope': eslint484.Rule.RuleModule;
        'require-default-props': eslint484.Rule.RuleModule;
        'require-optimization': eslint484.Rule.RuleModule;
        'require-render-return': eslint484.Rule.RuleModule;
        'self-closing-comp': eslint484.Rule.RuleModule;
        'sort-comp': eslint484.Rule.RuleModule;
        'sort-default-props': eslint484.Rule.RuleModule;
        'sort-prop-types': eslint484.Rule.RuleModule;
        'state-in-constructor': eslint484.Rule.RuleModule;
        'static-property-placement': eslint484.Rule.RuleModule;
        'style-prop-object': eslint484.Rule.RuleModule;
        'void-dom-elements-no-children': eslint484.Rule.RuleModule;
      };
      configs: {
        recommended: {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
          };
          rules: {
            "react/display-name": 2;
            "react/jsx-key": 2;
            "react/jsx-no-comment-textnodes": 2;
            "react/jsx-no-duplicate-props": 2;
            "react/jsx-no-target-blank": 2;
            "react/jsx-no-undef": 2;
            "react/jsx-uses-react": 2;
            "react/jsx-uses-vars": 2;
            "react/no-children-prop": 2;
            "react/no-danger-with-children": 2;
            "react/no-deprecated": 2;
            "react/no-direct-mutation-state": 2;
            "react/no-find-dom-node": 2;
            "react/no-is-mounted": 2;
            "react/no-render-return-value": 2;
            "react/no-string-refs": 2;
            "react/no-unescaped-entities": 2;
            "react/no-unknown-property": 2;
            "react/no-unsafe": 0;
            "react/prop-types": 2;
            "react/react-in-jsx-scope": 2;
            "react/require-render-return": 2;
          };
        };
        all: {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
          };
          rules: Record<"boolean-prop-naming" | "button-has-type" | "checked-requires-onchange-or-readonly" | "default-props-match-prop-types" | "destructuring-assignment" | "display-name" | "forbid-component-props" | "forbid-dom-props" | "forbid-elements" | "forbid-foreign-prop-types" | "forbid-prop-types" | "prop-types" | "forward-ref-uses-ref" | "function-component-definition" | "hook-use-state" | "iframe-missing-sandbox" | "jsx-boolean-value" | "jsx-child-element-spacing" | "jsx-closing-bracket-location" | "jsx-closing-tag-location" | "jsx-curly-spacing" | "jsx-curly-newline" | "jsx-equals-spacing" | "jsx-filename-extension" | "jsx-first-prop-new-line" | "jsx-handler-names" | "jsx-indent" | "jsx-indent-props" | "jsx-key" | "jsx-max-depth" | "jsx-max-props-per-line" | "jsx-newline" | "jsx-no-bind" | "jsx-no-comment-textnodes" | "jsx-no-constructed-context-values" | "jsx-no-duplicate-props" | "jsx-no-leaked-render" | "jsx-no-literals" | "jsx-no-script-url" | "jsx-no-target-blank" | "jsx-no-useless-fragment" | "jsx-one-expression-per-line" | "jsx-no-undef" | "jsx-curly-brace-presence" | "jsx-pascal-case" | "jsx-fragments" | "jsx-props-no-multi-spaces" | "jsx-props-no-spreading" | "jsx-props-no-spread-multi" | "sort-default-props" | "jsx-sort-default-props" | "jsx-sort-props" | "jsx-tag-spacing" | "jsx-space-before-closing" | "jsx-uses-react" | "jsx-uses-vars" | "jsx-wrap-multilines" | "no-invalid-html-attribute" | "no-access-state-in-setstate" | "no-adjacent-inline-elements" | "no-array-index-key" | "no-arrow-function-lifecycle" | "no-children-prop" | "no-danger" | "no-danger-with-children" | "no-deprecated" | "no-direct-mutation-state" | "no-find-dom-node" | "no-is-mounted" | "no-multi-comp" | "no-namespace" | "no-set-state" | "no-string-refs" | "no-redundant-should-component-update" | "no-render-return-value" | "no-this-in-sfc" | "no-typos" | "no-unescaped-entities" | "no-unknown-property" | "no-unsafe" | "no-unstable-nested-components" | "no-unused-class-component-methods" | "no-unused-prop-types" | "no-unused-state" | "no-object-type-as-default-prop" | "prefer-es6-class" | "prefer-exact-props" | "prefer-read-only-props" | "prefer-stateless-function" | "react-in-jsx-scope" | "require-default-props" | "require-optimization" | "require-render-return" | "self-closing-comp" | "sort-comp" | "sort-prop-types" | "state-in-constructor" | "static-property-placement" | "style-prop-object" | "void-dom-elements-no-children" | "no-did-mount-set-state" | "no-did-update-set-state" | "no-will-update-set-state", 2 | "error">;
        };
        'jsx-runtime': {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
            jsxPragma: any;
          };
          rules: {
            "react/react-in-jsx-scope": 0;
            "react/jsx-uses-react": 0;
          };
        };
        flat: Record<string, eslint_plugin_react690.ReactFlatConfig>;
      } & {
        flat: Record<string, eslint_plugin_react690.ReactFlatConfig>;
      };
    };
  };
  rules: {
    "react/boolean-prop-naming": ["error", {
      validateNested: boolean;
    }];
    "react/button-has-type": "warn";
    "react/default-props-match-prop-types": "error";
    "react/destructuring-assignment": ["warn", string, {
      ignoreClassFields: boolean;
    }];
    "react/display-name": "warn";
    "react/forbid-component-props": "off";
    "react/forbid-dom-props": "off";
    "react/forbid-elements": "off";
    "react/forbid-foreign-prop-types": "off";
    "react/forbid-prop-types": "off";
    "react/function-component-definition": ["error", {
      namedComponents: string;
      unnamedComponents: string;
    }];
    "react/hook-use-state": "error";
    "react/iframe-missing-sandbox": "warn";
    "react/jsx-boolean-value": "warn";
    "react/jsx-child-element-spacing": "warn";
    "react/jsx-closing-bracket-location": "off";
    "react/jsx-closing-tag-location": "off";
    "react/jsx-curly-brace-presence": "off";
    "react/jsx-curly-newline": "off";
    "react/jsx-curly-spacing": "off";
    "react/jsx-equals-spacing": "off";
    "react/jsx-filename-extension": ["warn", {
      extensions: string[];
    }];
    "react/jsx-first-prop-new-line": "off";
    "react/jsx-fragments": ["warn", string];
    "react/jsx-handler-names": "warn";
    "react/jsx-indent": "off";
    "react/jsx-indent-props": "off";
    "react/jsx-key": "warn";
    "react/jsx-max-depth": "off";
    "react/jsx-max-props-per-line": "off";
    "react/jsx-newline": "off";
    "react/jsx-no-bind": ["warn", {
      ignoreDOMComponents: boolean;
      allowArrowFunctions: boolean;
    }];
    "react/jsx-no-comment-textnodes": "off";
    "react/jsx-no-constructed-context-values": "off";
    "react/jsx-no-duplicate-props": "error";
    "react/jsx-no-leaked-render": "error";
    "react/jsx-no-literals": "off";
    "react/jsx-no-script-url": "error";
    "react/jsx-no-target-blank": "error";
    "react/jsx-no-undef": "off";
    "react/jsx-no-useless-fragment": "off";
    "react/jsx-one-expression-per-line": "off";
    "react/jsx-pascal-case": "error";
    "react/jsx-props-no-multi-spaces": "off";
    "react/jsx-props-no-spreading": "off";
    "react/jsx-sort-default-props": "off";
    "react/jsx-sort-props": "off";
    "react/jsx-space-before-closing": "off";
    "react/jsx-tag-spacing": "off";
    "react/jsx-uses-react": "error";
    "react/jsx-uses-vars": "error";
    "react/jsx-wrap-multilines": "off";
    "react/no-access-state-in-setstate": "error";
    "react/no-adjacent-inline-elements": "off";
    "react/no-array-index-key": "error";
    "react/no-children-prop": "error";
    "react/no-danger": "off";
    "react/no-danger-with-children": "error";
    "react/no-deprecated": "error";
    "react/no-did-mount-set-state": "error";
    "react/no-did-update-set-state": "error";
    "react/no-direct-mutation-state": "error";
    "react/no-find-dom-node": "error";
    "react/no-invalid-html-attribute": "error";
    "react/no-is-mounted": "error";
    "react/no-multi-comp": "off";
    "react/no-namespace": "off";
    "react/no-object-type-as-default-prop": "error";
    "react/no-redundant-should-component-update": "error";
    "react/no-render-return-value": "error";
    "react/no-set-state": "off";
    "react/no-string-refs": "error";
    "react/no-this-in-sfc": "error";
    "react/no-typos": "warn";
    "react/no-unescaped-entities": "off";
    "react/no-unknown-property": "warn";
    "react/no-unsafe": "error";
    "react/no-unstable-nested-components": ["error", {
      allowAsProps: boolean;
    }];
    "react/no-unused-class-component-methods": "warn";
    "react/no-unused-prop-types": "warn";
    "react/no-unused-state": "warn";
    "react/no-will-update-set-state": "error";
    "react/prefer-es6-class": ["error", string];
    "react/prefer-exact-props": "off";
    "react/prefer-read-only-props": "error";
    "react/prefer-stateless-function": "error";
    "react/prop-types": "off";
    "react/react-in-jsx-scope": "off";
    "react/require-default-props": ["warn", {
      forbidDefaultForRequired: boolean;
      functions: string;
    }];
    "react/require-optimization": "off";
    "react/require-render-return": "error";
    "react/self-closing-comp": "error";
    "react/sort-comp": "off";
    "react/sort-default-props": "off";
    "react/sort-prop-types": "off";
    "react/state-in-constructor": "off";
    "react/static-property-placement": "off";
    "react/style-prop-object": "error";
    "react/void-dom-elements-no-children": "error";
  };
} | {
  name: string;
  plugins: {
    "react-hooks": typeof eslint_plugin_react_hooks692;
  };
  rules: {
    "react-hooks/rules-of-hooks": "error";
    "react-hooks/exhaustive-deps": "warn";
  };
} | {
  name: string;
  plugins: {
    "jsx-a11y": any;
  };
  rules: {
    "jsx-a11y/alt-text": "error";
    "jsx-a11y/anchor-ambiguous-text": "off";
    "jsx-a11y/anchor-has-content": "error";
    "jsx-a11y/anchor-is-valid": "error";
    "jsx-a11y/aria-activedescendant-has-tabindex": "error";
    "jsx-a11y/aria-props": "error";
    "jsx-a11y/aria-proptypes": "error";
    "jsx-a11y/aria-role": "error";
    "jsx-a11y/aria-unsupported-elements": "error";
    "jsx-a11y/autocomplete-valid": "error";
    "jsx-a11y/click-events-have-key-events": "error";
    "jsx-a11y/heading-has-content": "error";
    "jsx-a11y/html-has-lang": "error";
    "jsx-a11y/iframe-has-title": "error";
    "jsx-a11y/img-redundant-alt": "error";
    "jsx-a11y/interactive-supports-focus": "error";
    "jsx-a11y/label-has-associated-control": "error";
    "jsx-a11y/lang": "error";
    "jsx-a11y/media-has-caption": "error";
    "jsx-a11y/mouse-events-have-key-events": "error";
    "jsx-a11y/no-access-key": "error";
    "jsx-a11y/no-aria-hidden-on-focusable": "warn";
    "jsx-a11y/no-autofocus": "error";
    "jsx-a11y/no-distracting-elements": "error";
    "jsx-a11y/no-interactive-element-to-noninteractive-role": "error";
    "jsx-a11y/no-noninteractive-element-interactions": "error";
    "jsx-a11y/no-noninteractive-element-to-interactive-role": "error";
    "jsx-a11y/no-noninteractive-tabindex": "error";
    "jsx-a11y/no-redundant-roles": "error";
    "jsx-a11y/no-static-element-interactions": "error";
    "jsx-a11y/prefer-tag-over-role": "warn";
    "jsx-a11y/role-has-required-aria-props": "error";
    "jsx-a11y/role-supports-aria-props": "error";
    "jsx-a11y/scope": "error";
    "jsx-a11y/tabindex-no-positive": "error";
  };
} | {
  name: string;
  files: string[];
  plugins: {
    "@next/next": any;
  };
  rules: {
    "@next/next/google-font-display": "error";
    "@next/next/google-font-preconnect": "error";
    "@next/next/no-css-tags": "error";
    "@next/next/no-document-import-in-page": "error";
    "@next/next/no-head-import-in-document": "error";
    "@next/next/no-html-link-for-pages": "error";
    "@next/next/no-img-element": "error";
    "@next/next/no-page-custom-font": "error";
    "@next/next/no-sync-scripts": "error";
    "@next/next/no-title-in-document-head": "error";
    "@next/next/no-unwanted-polyfillio": "error";
    "@next/next/inline-script-id": "error";
    "@next/next/no-typos": "warn";
    "@next/next/next-script-for-ga": "error";
    "@next/next/no-duplicate-head": "error";
    "import-x/no-default-export"?: undefined;
    "import-x/no-anonymous-default-export"?: undefined;
  };
} | {
  name: string;
  files: string[];
  rules: {
    "import-x/no-default-export": "off";
    "import-x/no-anonymous-default-export": "off";
    "@next/next/google-font-display"?: undefined;
    "@next/next/google-font-preconnect"?: undefined;
    "@next/next/no-css-tags"?: undefined;
    "@next/next/no-document-import-in-page"?: undefined;
    "@next/next/no-head-import-in-document"?: undefined;
    "@next/next/no-html-link-for-pages"?: undefined;
    "@next/next/no-img-element"?: undefined;
    "@next/next/no-page-custom-font"?: undefined;
    "@next/next/no-sync-scripts"?: undefined;
    "@next/next/no-title-in-document-head"?: undefined;
    "@next/next/no-unwanted-polyfillio"?: undefined;
    "@next/next/inline-script-id"?: undefined;
    "@next/next/no-typos"?: undefined;
    "@next/next/next-script-for-ga"?: undefined;
    "@next/next/no-duplicate-head"?: undefined;
  };
  plugins?: undefined;
})[][];
//#endregion
//#region src/react.d.ts
declare const _default$4: ({
  name: string;
  files: string[];
  languageOptions: {
    parserOptions: {
      ecmaFeatures: {
        jsx: true;
        modules: boolean;
      };
      sourceType: "module";
    };
    globals: {
      AbortController: false;
      AbortSignal: false;
      AbsoluteOrientationSensor: false;
      AbstractRange: false;
      Accelerometer: false;
      addEventListener: false;
      ai: false;
      AI: false;
      AICreateMonitor: false;
      AITextSession: false;
      alert: false;
      AnalyserNode: false;
      Animation: false;
      AnimationEffect: false;
      AnimationEvent: false;
      AnimationPlaybackEvent: false;
      AnimationTimeline: false;
      AsyncDisposableStack: false;
      atob: false;
      Attr: false;
      Audio: false;
      AudioBuffer: false;
      AudioBufferSourceNode: false;
      AudioContext: false;
      AudioData: false;
      AudioDecoder: false;
      AudioDestinationNode: false;
      AudioEncoder: false;
      AudioListener: false;
      AudioNode: false;
      AudioParam: false;
      AudioParamMap: false;
      AudioProcessingEvent: false;
      AudioScheduledSourceNode: false;
      AudioSinkInfo: false;
      AudioWorklet: false;
      AudioWorkletGlobalScope: false;
      AudioWorkletNode: false;
      AudioWorkletProcessor: false;
      AuthenticatorAssertionResponse: false;
      AuthenticatorAttestationResponse: false;
      AuthenticatorResponse: false;
      BackgroundFetchManager: false;
      BackgroundFetchRecord: false;
      BackgroundFetchRegistration: false;
      BarcodeDetector: false;
      BarProp: false;
      BaseAudioContext: false;
      BatteryManager: false;
      BeforeUnloadEvent: false;
      BiquadFilterNode: false;
      Blob: false;
      BlobEvent: false;
      Bluetooth: false;
      BluetoothCharacteristicProperties: false;
      BluetoothDevice: false;
      BluetoothRemoteGATTCharacteristic: false;
      BluetoothRemoteGATTDescriptor: false;
      BluetoothRemoteGATTServer: false;
      BluetoothRemoteGATTService: false;
      BluetoothUUID: false;
      blur: false;
      BroadcastChannel: false;
      BrowserCaptureMediaStreamTrack: false;
      btoa: false;
      ByteLengthQueuingStrategy: false;
      Cache: false;
      caches: false;
      CacheStorage: false;
      cancelAnimationFrame: false;
      cancelIdleCallback: false;
      CanvasCaptureMediaStream: false;
      CanvasCaptureMediaStreamTrack: false;
      CanvasGradient: false;
      CanvasPattern: false;
      CanvasRenderingContext2D: false;
      CaptureController: false;
      CaretPosition: false;
      CDATASection: false;
      ChannelMergerNode: false;
      ChannelSplitterNode: false;
      ChapterInformation: false;
      CharacterBoundsUpdateEvent: false;
      CharacterData: false;
      clearInterval: false;
      clearTimeout: false;
      clientInformation: false;
      Clipboard: false;
      ClipboardEvent: false;
      ClipboardItem: false;
      close: false;
      closed: false;
      CloseEvent: false;
      CloseWatcher: false;
      CommandEvent: false;
      Comment: false;
      CompositionEvent: false;
      CompressionStream: false;
      confirm: false;
      console: false;
      ConstantSourceNode: false;
      ContentVisibilityAutoStateChangeEvent: false;
      ConvolverNode: false;
      CookieChangeEvent: false;
      CookieDeprecationLabel: false;
      cookieStore: false;
      CookieStore: false;
      CookieStoreManager: false;
      CountQueuingStrategy: false;
      createImageBitmap: false;
      Credential: false;
      credentialless: false;
      CredentialsContainer: false;
      CropTarget: false;
      crossOriginIsolated: false;
      crypto: false;
      Crypto: false;
      CryptoKey: false;
      CSPViolationReportBody: false;
      CSS: false;
      CSSAnimation: false;
      CSSConditionRule: false;
      CSSContainerRule: false;
      CSSCounterStyleRule: false;
      CSSFontFaceRule: false;
      CSSFontFeatureValuesRule: false;
      CSSFontPaletteValuesRule: false;
      CSSGroupingRule: false;
      CSSImageValue: false;
      CSSImportRule: false;
      CSSKeyframeRule: false;
      CSSKeyframesRule: false;
      CSSKeywordValue: false;
      CSSLayerBlockRule: false;
      CSSLayerStatementRule: false;
      CSSMarginRule: false;
      CSSMathClamp: false;
      CSSMathInvert: false;
      CSSMathMax: false;
      CSSMathMin: false;
      CSSMathNegate: false;
      CSSMathProduct: false;
      CSSMathSum: false;
      CSSMathValue: false;
      CSSMatrixComponent: false;
      CSSMediaRule: false;
      CSSNamespaceRule: false;
      CSSNestedDeclarations: false;
      CSSNumericArray: false;
      CSSNumericValue: false;
      CSSPageDescriptors: false;
      CSSPageRule: false;
      CSSPerspective: false;
      CSSPositionTryDescriptors: false;
      CSSPositionTryRule: false;
      CSSPositionValue: false;
      CSSPropertyRule: false;
      CSSRotate: false;
      CSSRule: false;
      CSSRuleList: false;
      CSSScale: false;
      CSSScopeRule: false;
      CSSSkew: false;
      CSSSkewX: false;
      CSSSkewY: false;
      CSSStartingStyleRule: false;
      CSSStyleDeclaration: false;
      CSSStyleRule: false;
      CSSStyleSheet: false;
      CSSStyleValue: false;
      CSSSupportsRule: false;
      CSSTransformComponent: false;
      CSSTransformValue: false;
      CSSTransition: false;
      CSSTranslate: false;
      CSSUnitValue: false;
      CSSUnparsedValue: false;
      CSSVariableReferenceValue: false;
      CSSViewTransitionRule: false;
      currentFrame: false;
      currentTime: false;
      CustomElementRegistry: false;
      customElements: false;
      CustomEvent: false;
      CustomStateSet: false;
      DataTransfer: false;
      DataTransferItem: false;
      DataTransferItemList: false;
      DecompressionStream: false;
      DelayNode: false;
      DelegatedInkTrailPresenter: false;
      DeviceMotionEvent: false;
      DeviceMotionEventAcceleration: false;
      DeviceMotionEventRotationRate: false;
      DeviceOrientationEvent: false;
      devicePixelRatio: false;
      DevicePosture: false;
      dispatchEvent: false;
      DisposableStack: false;
      document: false;
      Document: false;
      DocumentFragment: false;
      documentPictureInPicture: false;
      DocumentPictureInPicture: false;
      DocumentPictureInPictureEvent: false;
      DocumentTimeline: false;
      DocumentType: false;
      DOMError: false;
      DOMException: false;
      DOMImplementation: false;
      DOMMatrix: false;
      DOMMatrixReadOnly: false;
      DOMParser: false;
      DOMPoint: false;
      DOMPointReadOnly: false;
      DOMQuad: false;
      DOMRect: false;
      DOMRectList: false;
      DOMRectReadOnly: false;
      DOMStringList: false;
      DOMStringMap: false;
      DOMTokenList: false;
      DragEvent: false;
      DynamicsCompressorNode: false;
      EditContext: false;
      Element: false;
      ElementInternals: false;
      EncodedAudioChunk: false;
      EncodedVideoChunk: false;
      ErrorEvent: false;
      event: false;
      Event: false;
      EventCounts: false;
      EventSource: false;
      EventTarget: false;
      external: false;
      External: false;
      EyeDropper: false;
      FeaturePolicy: false;
      FederatedCredential: false;
      fence: false;
      Fence: false;
      FencedFrameConfig: false;
      fetch: false;
      fetchLater: false;
      FetchLaterResult: false;
      File: false;
      FileList: false;
      FileReader: false;
      FileSystem: false;
      FileSystemDirectoryEntry: false;
      FileSystemDirectoryHandle: false;
      FileSystemDirectoryReader: false;
      FileSystemEntry: false;
      FileSystemFileEntry: false;
      FileSystemFileHandle: false;
      FileSystemHandle: false;
      FileSystemObserver: false;
      FileSystemWritableFileStream: false;
      find: false;
      focus: false;
      FocusEvent: false;
      FontData: false;
      FontFace: false;
      FontFaceSet: false;
      FontFaceSetLoadEvent: false;
      FormData: false;
      FormDataEvent: false;
      FragmentDirective: false;
      frameElement: false;
      frames: false;
      GainNode: false;
      Gamepad: false;
      GamepadAxisMoveEvent: false;
      GamepadButton: false;
      GamepadButtonEvent: false;
      GamepadEvent: false;
      GamepadHapticActuator: false;
      GamepadPose: false;
      Geolocation: false;
      GeolocationCoordinates: false;
      GeolocationPosition: false;
      GeolocationPositionError: false;
      getComputedStyle: false;
      getScreenDetails: false;
      getSelection: false;
      GPU: false;
      GPUAdapter: false;
      GPUAdapterInfo: false;
      GPUBindGroup: false;
      GPUBindGroupLayout: false;
      GPUBuffer: false;
      GPUBufferUsage: false;
      GPUCanvasContext: false;
      GPUColorWrite: false;
      GPUCommandBuffer: false;
      GPUCommandEncoder: false;
      GPUCompilationInfo: false;
      GPUCompilationMessage: false;
      GPUComputePassEncoder: false;
      GPUComputePipeline: false;
      GPUDevice: false;
      GPUDeviceLostInfo: false;
      GPUError: false;
      GPUExternalTexture: false;
      GPUInternalError: false;
      GPUMapMode: false;
      GPUOutOfMemoryError: false;
      GPUPipelineError: false;
      GPUPipelineLayout: false;
      GPUQuerySet: false;
      GPUQueue: false;
      GPURenderBundle: false;
      GPURenderBundleEncoder: false;
      GPURenderPassEncoder: false;
      GPURenderPipeline: false;
      GPUSampler: false;
      GPUShaderModule: false;
      GPUShaderStage: false;
      GPUSupportedFeatures: false;
      GPUSupportedLimits: false;
      GPUTexture: false;
      GPUTextureUsage: false;
      GPUTextureView: false;
      GPUUncapturedErrorEvent: false;
      GPUValidationError: false;
      GravitySensor: false;
      Gyroscope: false;
      HashChangeEvent: false;
      Headers: false;
      HID: false;
      HIDConnectionEvent: false;
      HIDDevice: false;
      HIDInputReportEvent: false;
      Highlight: false;
      HighlightRegistry: false;
      history: false;
      History: false;
      HTMLAllCollection: false;
      HTMLAnchorElement: false;
      HTMLAreaElement: false;
      HTMLAudioElement: false;
      HTMLBaseElement: false;
      HTMLBodyElement: false;
      HTMLBRElement: false;
      HTMLButtonElement: false;
      HTMLCanvasElement: false;
      HTMLCollection: false;
      HTMLDataElement: false;
      HTMLDataListElement: false;
      HTMLDetailsElement: false;
      HTMLDialogElement: false;
      HTMLDirectoryElement: false;
      HTMLDivElement: false;
      HTMLDListElement: false;
      HTMLDocument: false;
      HTMLElement: false;
      HTMLEmbedElement: false;
      HTMLFencedFrameElement: false;
      HTMLFieldSetElement: false;
      HTMLFontElement: false;
      HTMLFormControlsCollection: false;
      HTMLFormElement: false;
      HTMLFrameElement: false;
      HTMLFrameSetElement: false;
      HTMLHeadElement: false;
      HTMLHeadingElement: false;
      HTMLHRElement: false;
      HTMLHtmlElement: false;
      HTMLIFrameElement: false;
      HTMLImageElement: false;
      HTMLInputElement: false;
      HTMLLabelElement: false;
      HTMLLegendElement: false;
      HTMLLIElement: false;
      HTMLLinkElement: false;
      HTMLMapElement: false;
      HTMLMarqueeElement: false;
      HTMLMediaElement: false;
      HTMLMenuElement: false;
      HTMLMetaElement: false;
      HTMLMeterElement: false;
      HTMLModElement: false;
      HTMLObjectElement: false;
      HTMLOListElement: false;
      HTMLOptGroupElement: false;
      HTMLOptionElement: false;
      HTMLOptionsCollection: false;
      HTMLOutputElement: false;
      HTMLParagraphElement: false;
      HTMLParamElement: false;
      HTMLPictureElement: false;
      HTMLPreElement: false;
      HTMLProgressElement: false;
      HTMLQuoteElement: false;
      HTMLScriptElement: false;
      HTMLSelectedContentElement: false;
      HTMLSelectElement: false;
      HTMLSlotElement: false;
      HTMLSourceElement: false;
      HTMLSpanElement: false;
      HTMLStyleElement: false;
      HTMLTableCaptionElement: false;
      HTMLTableCellElement: false;
      HTMLTableColElement: false;
      HTMLTableElement: false;
      HTMLTableRowElement: false;
      HTMLTableSectionElement: false;
      HTMLTemplateElement: false;
      HTMLTextAreaElement: false;
      HTMLTimeElement: false;
      HTMLTitleElement: false;
      HTMLTrackElement: false;
      HTMLUListElement: false;
      HTMLUnknownElement: false;
      HTMLVideoElement: false;
      IDBCursor: false;
      IDBCursorWithValue: false;
      IDBDatabase: false;
      IDBFactory: false;
      IDBIndex: false;
      IDBKeyRange: false;
      IDBObjectStore: false;
      IDBOpenDBRequest: false;
      IDBRequest: false;
      IDBTransaction: false;
      IDBVersionChangeEvent: false;
      IdentityCredential: false;
      IdentityCredentialError: false;
      IdentityProvider: false;
      IdleDeadline: false;
      IdleDetector: false;
      IIRFilterNode: false;
      Image: false;
      ImageBitmap: false;
      ImageBitmapRenderingContext: false;
      ImageCapture: false;
      ImageData: false;
      ImageDecoder: false;
      ImageTrack: false;
      ImageTrackList: false;
      indexedDB: false;
      Ink: false;
      innerHeight: false;
      innerWidth: false;
      InputDeviceCapabilities: false;
      InputDeviceInfo: false;
      InputEvent: false;
      IntersectionObserver: false;
      IntersectionObserverEntry: false;
      isSecureContext: false;
      Keyboard: false;
      KeyboardEvent: false;
      KeyboardLayoutMap: false;
      KeyframeEffect: false;
      LanguageDetector: false;
      LargestContentfulPaint: false;
      LaunchParams: false;
      launchQueue: false;
      LaunchQueue: false;
      LayoutShift: false;
      LayoutShiftAttribution: false;
      length: false;
      LinearAccelerationSensor: false;
      localStorage: false;
      location: true;
      Location: false;
      locationbar: false;
      Lock: false;
      LockManager: false;
      matchMedia: false;
      MathMLElement: false;
      MediaCapabilities: false;
      MediaCapabilitiesInfo: false;
      MediaDeviceInfo: false;
      MediaDevices: false;
      MediaElementAudioSourceNode: false;
      MediaEncryptedEvent: false;
      MediaError: false;
      MediaKeyError: false;
      MediaKeyMessageEvent: false;
      MediaKeys: false;
      MediaKeySession: false;
      MediaKeyStatusMap: false;
      MediaKeySystemAccess: false;
      MediaList: false;
      MediaMetadata: false;
      MediaQueryList: false;
      MediaQueryListEvent: false;
      MediaRecorder: false;
      MediaRecorderErrorEvent: false;
      MediaSession: false;
      MediaSource: false;
      MediaSourceHandle: false;
      MediaStream: false;
      MediaStreamAudioDestinationNode: false;
      MediaStreamAudioSourceNode: false;
      MediaStreamEvent: false;
      MediaStreamTrack: false;
      MediaStreamTrackAudioSourceNode: false;
      MediaStreamTrackAudioStats: false;
      MediaStreamTrackEvent: false;
      MediaStreamTrackGenerator: false;
      MediaStreamTrackProcessor: false;
      MediaStreamTrackVideoStats: false;
      menubar: false;
      MessageChannel: false;
      MessageEvent: false;
      MessagePort: false;
      MIDIAccess: false;
      MIDIConnectionEvent: false;
      MIDIInput: false;
      MIDIInputMap: false;
      MIDIMessageEvent: false;
      MIDIOutput: false;
      MIDIOutputMap: false;
      MIDIPort: false;
      MimeType: false;
      MimeTypeArray: false;
      model: false;
      ModelGenericSession: false;
      ModelManager: false;
      MouseEvent: false;
      moveBy: false;
      moveTo: false;
      MutationEvent: false;
      MutationObserver: false;
      MutationRecord: false;
      name: false;
      NamedNodeMap: false;
      NavigateEvent: false;
      navigation: false;
      Navigation: false;
      NavigationActivation: false;
      NavigationCurrentEntryChangeEvent: false;
      NavigationDestination: false;
      NavigationHistoryEntry: false;
      NavigationPreloadManager: false;
      NavigationTransition: false;
      navigator: false;
      Navigator: false;
      NavigatorLogin: false;
      NavigatorManagedData: false;
      NavigatorUAData: false;
      NetworkInformation: false;
      Node: false;
      NodeFilter: false;
      NodeIterator: false;
      NodeList: false;
      Notification: false;
      NotifyPaintEvent: false;
      NotRestoredReasonDetails: false;
      NotRestoredReasons: false;
      Observable: false;
      OfflineAudioCompletionEvent: false;
      OfflineAudioContext: false;
      offscreenBuffering: false;
      OffscreenCanvas: false;
      OffscreenCanvasRenderingContext2D: false;
      onabort: true;
      onafterprint: true;
      onanimationcancel: true;
      onanimationend: true;
      onanimationiteration: true;
      onanimationstart: true;
      onappinstalled: true;
      onauxclick: true;
      onbeforeinput: true;
      onbeforeinstallprompt: true;
      onbeforematch: true;
      onbeforeprint: true;
      onbeforetoggle: true;
      onbeforeunload: true;
      onbeforexrselect: true;
      onblur: true;
      oncancel: true;
      oncanplay: true;
      oncanplaythrough: true;
      onchange: true;
      onclick: true;
      onclose: true;
      oncommand: true;
      oncontentvisibilityautostatechange: true;
      oncontextlost: true;
      oncontextmenu: true;
      oncontextrestored: true;
      oncopy: true;
      oncuechange: true;
      oncut: true;
      ondblclick: true;
      ondevicemotion: true;
      ondeviceorientation: true;
      ondeviceorientationabsolute: true;
      ondrag: true;
      ondragend: true;
      ondragenter: true;
      ondragleave: true;
      ondragover: true;
      ondragstart: true;
      ondrop: true;
      ondurationchange: true;
      onemptied: true;
      onended: true;
      onerror: true;
      onfocus: true;
      onformdata: true;
      ongamepadconnected: true;
      ongamepaddisconnected: true;
      ongotpointercapture: true;
      onhashchange: true;
      oninput: true;
      oninvalid: true;
      onkeydown: true;
      onkeypress: true;
      onkeyup: true;
      onlanguagechange: true;
      onload: true;
      onloadeddata: true;
      onloadedmetadata: true;
      onloadstart: true;
      onlostpointercapture: true;
      onmessage: true;
      onmessageerror: true;
      onmousedown: true;
      onmouseenter: true;
      onmouseleave: true;
      onmousemove: true;
      onmouseout: true;
      onmouseover: true;
      onmouseup: true;
      onmousewheel: true;
      onoffline: true;
      ononline: true;
      onpagehide: true;
      onpagereveal: true;
      onpageshow: true;
      onpageswap: true;
      onpaste: true;
      onpause: true;
      onplay: true;
      onplaying: true;
      onpointercancel: true;
      onpointerdown: true;
      onpointerenter: true;
      onpointerleave: true;
      onpointermove: true;
      onpointerout: true;
      onpointerover: true;
      onpointerrawupdate: true;
      onpointerup: true;
      onpopstate: true;
      onprogress: true;
      onratechange: true;
      onrejectionhandled: true;
      onreset: true;
      onresize: true;
      onscroll: true;
      onscrollend: true;
      onscrollsnapchange: true;
      onscrollsnapchanging: true;
      onsearch: true;
      onsecuritypolicyviolation: true;
      onseeked: true;
      onseeking: true;
      onselect: true;
      onselectionchange: true;
      onselectstart: true;
      onslotchange: true;
      onstalled: true;
      onstorage: true;
      onsubmit: true;
      onsuspend: true;
      ontimeupdate: true;
      ontoggle: true;
      ontransitioncancel: true;
      ontransitionend: true;
      ontransitionrun: true;
      ontransitionstart: true;
      onunhandledrejection: true;
      onunload: true;
      onvolumechange: true;
      onwaiting: true;
      onwheel: true;
      open: false;
      opener: false;
      Option: false;
      OrientationSensor: false;
      origin: false;
      originAgentCluster: false;
      OscillatorNode: false;
      OTPCredential: false;
      outerHeight: false;
      outerWidth: false;
      OverconstrainedError: false;
      PageRevealEvent: false;
      PageSwapEvent: false;
      PageTransitionEvent: false;
      pageXOffset: false;
      pageYOffset: false;
      PannerNode: false;
      parent: false;
      PasswordCredential: false;
      Path2D: false;
      PaymentAddress: false;
      PaymentManager: false;
      PaymentMethodChangeEvent: false;
      PaymentRequest: false;
      PaymentRequestUpdateEvent: false;
      PaymentResponse: false;
      performance: false;
      Performance: false;
      PerformanceElementTiming: false;
      PerformanceEntry: false;
      PerformanceEventTiming: false;
      PerformanceLongAnimationFrameTiming: false;
      PerformanceLongTaskTiming: false;
      PerformanceMark: false;
      PerformanceMeasure: false;
      PerformanceNavigation: false;
      PerformanceNavigationTiming: false;
      PerformanceObserver: false;
      PerformanceObserverEntryList: false;
      PerformancePaintTiming: false;
      PerformanceResourceTiming: false;
      PerformanceScriptTiming: false;
      PerformanceServerTiming: false;
      PerformanceTiming: false;
      PeriodicSyncManager: false;
      PeriodicWave: false;
      Permissions: false;
      PermissionStatus: false;
      PERSISTENT: false;
      personalbar: false;
      PictureInPictureEvent: false;
      PictureInPictureWindow: false;
      Plugin: false;
      PluginArray: false;
      PointerEvent: false;
      PopStateEvent: false;
      postMessage: false;
      Presentation: false;
      PresentationAvailability: false;
      PresentationConnection: false;
      PresentationConnectionAvailableEvent: false;
      PresentationConnectionCloseEvent: false;
      PresentationConnectionList: false;
      PresentationReceiver: false;
      PresentationRequest: false;
      PressureObserver: false;
      PressureRecord: false;
      print: false;
      ProcessingInstruction: false;
      Profiler: false;
      ProgressEvent: false;
      PromiseRejectionEvent: false;
      prompt: false;
      ProtectedAudience: false;
      PublicKeyCredential: false;
      PushManager: false;
      PushSubscription: false;
      PushSubscriptionOptions: false;
      queryLocalFonts: false;
      queueMicrotask: false;
      RadioNodeList: false;
      Range: false;
      ReadableByteStreamController: false;
      ReadableStream: false;
      ReadableStreamBYOBReader: false;
      ReadableStreamBYOBRequest: false;
      ReadableStreamDefaultController: false;
      ReadableStreamDefaultReader: false;
      registerProcessor: false;
      RelativeOrientationSensor: false;
      RemotePlayback: false;
      removeEventListener: false;
      ReportBody: false;
      reportError: false;
      ReportingObserver: false;
      Request: false;
      requestAnimationFrame: false;
      requestIdleCallback: false;
      resizeBy: false;
      ResizeObserver: false;
      ResizeObserverEntry: false;
      ResizeObserverSize: false;
      resizeTo: false;
      Response: false;
      RestrictionTarget: false;
      RTCCertificate: false;
      RTCDataChannel: false;
      RTCDataChannelEvent: false;
      RTCDtlsTransport: false;
      RTCDTMFSender: false;
      RTCDTMFToneChangeEvent: false;
      RTCEncodedAudioFrame: false;
      RTCEncodedVideoFrame: false;
      RTCError: false;
      RTCErrorEvent: false;
      RTCIceCandidate: false;
      RTCIceTransport: false;
      RTCPeerConnection: false;
      RTCPeerConnectionIceErrorEvent: false;
      RTCPeerConnectionIceEvent: false;
      RTCRtpReceiver: false;
      RTCRtpScriptTransform: false;
      RTCRtpSender: false;
      RTCRtpTransceiver: false;
      RTCSctpTransport: false;
      RTCSessionDescription: false;
      RTCStatsReport: false;
      RTCTrackEvent: false;
      sampleRate: false;
      scheduler: false;
      Scheduler: false;
      Scheduling: false;
      screen: false;
      Screen: false;
      ScreenDetailed: false;
      ScreenDetails: false;
      screenLeft: false;
      ScreenOrientation: false;
      screenTop: false;
      screenX: false;
      screenY: false;
      ScriptProcessorNode: false;
      scroll: false;
      scrollbars: false;
      scrollBy: false;
      ScrollTimeline: false;
      scrollTo: false;
      scrollX: false;
      scrollY: false;
      SecurityPolicyViolationEvent: false;
      Selection: false;
      self: false;
      Sensor: false;
      SensorErrorEvent: false;
      Serial: false;
      SerialPort: false;
      ServiceWorker: false;
      ServiceWorkerContainer: false;
      ServiceWorkerRegistration: false;
      sessionStorage: false;
      setInterval: false;
      setTimeout: false;
      ShadowRoot: false;
      sharedStorage: false;
      SharedStorage: false;
      SharedStorageAppendMethod: false;
      SharedStorageClearMethod: false;
      SharedStorageDeleteMethod: false;
      SharedStorageModifierMethod: false;
      SharedStorageSetMethod: false;
      SharedStorageWorklet: false;
      SharedWorker: false;
      showDirectoryPicker: false;
      showOpenFilePicker: false;
      showSaveFilePicker: false;
      SnapEvent: false;
      SourceBuffer: false;
      SourceBufferList: false;
      speechSynthesis: false;
      SpeechSynthesis: false;
      SpeechSynthesisErrorEvent: false;
      SpeechSynthesisEvent: false;
      SpeechSynthesisUtterance: false;
      SpeechSynthesisVoice: false;
      StaticRange: false;
      status: false;
      statusbar: false;
      StereoPannerNode: false;
      stop: false;
      Storage: false;
      StorageBucket: false;
      StorageBucketManager: false;
      StorageEvent: false;
      StorageManager: false;
      structuredClone: false;
      styleMedia: false;
      StylePropertyMap: false;
      StylePropertyMapReadOnly: false;
      StyleSheet: false;
      StyleSheetList: false;
      SubmitEvent: false;
      Subscriber: false;
      SubtleCrypto: false;
      SuppressedError: false;
      SVGAElement: false;
      SVGAngle: false;
      SVGAnimatedAngle: false;
      SVGAnimatedBoolean: false;
      SVGAnimatedEnumeration: false;
      SVGAnimatedInteger: false;
      SVGAnimatedLength: false;
      SVGAnimatedLengthList: false;
      SVGAnimatedNumber: false;
      SVGAnimatedNumberList: false;
      SVGAnimatedPreserveAspectRatio: false;
      SVGAnimatedRect: false;
      SVGAnimatedString: false;
      SVGAnimatedTransformList: false;
      SVGAnimateElement: false;
      SVGAnimateMotionElement: false;
      SVGAnimateTransformElement: false;
      SVGAnimationElement: false;
      SVGCircleElement: false;
      SVGClipPathElement: false;
      SVGComponentTransferFunctionElement: false;
      SVGDefsElement: false;
      SVGDescElement: false;
      SVGElement: false;
      SVGEllipseElement: false;
      SVGFEBlendElement: false;
      SVGFEColorMatrixElement: false;
      SVGFEComponentTransferElement: false;
      SVGFECompositeElement: false;
      SVGFEConvolveMatrixElement: false;
      SVGFEDiffuseLightingElement: false;
      SVGFEDisplacementMapElement: false;
      SVGFEDistantLightElement: false;
      SVGFEDropShadowElement: false;
      SVGFEFloodElement: false;
      SVGFEFuncAElement: false;
      SVGFEFuncBElement: false;
      SVGFEFuncGElement: false;
      SVGFEFuncRElement: false;
      SVGFEGaussianBlurElement: false;
      SVGFEImageElement: false;
      SVGFEMergeElement: false;
      SVGFEMergeNodeElement: false;
      SVGFEMorphologyElement: false;
      SVGFEOffsetElement: false;
      SVGFEPointLightElement: false;
      SVGFESpecularLightingElement: false;
      SVGFESpotLightElement: false;
      SVGFETileElement: false;
      SVGFETurbulenceElement: false;
      SVGFilterElement: false;
      SVGForeignObjectElement: false;
      SVGGElement: false;
      SVGGeometryElement: false;
      SVGGradientElement: false;
      SVGGraphicsElement: false;
      SVGImageElement: false;
      SVGLength: false;
      SVGLengthList: false;
      SVGLinearGradientElement: false;
      SVGLineElement: false;
      SVGMarkerElement: false;
      SVGMaskElement: false;
      SVGMatrix: false;
      SVGMetadataElement: false;
      SVGMPathElement: false;
      SVGNumber: false;
      SVGNumberList: false;
      SVGPathElement: false;
      SVGPatternElement: false;
      SVGPoint: false;
      SVGPointList: false;
      SVGPolygonElement: false;
      SVGPolylineElement: false;
      SVGPreserveAspectRatio: false;
      SVGRadialGradientElement: false;
      SVGRect: false;
      SVGRectElement: false;
      SVGScriptElement: false;
      SVGSetElement: false;
      SVGStopElement: false;
      SVGStringList: false;
      SVGStyleElement: false;
      SVGSVGElement: false;
      SVGSwitchElement: false;
      SVGSymbolElement: false;
      SVGTextContentElement: false;
      SVGTextElement: false;
      SVGTextPathElement: false;
      SVGTextPositioningElement: false;
      SVGTitleElement: false;
      SVGTransform: false;
      SVGTransformList: false;
      SVGTSpanElement: false;
      SVGUnitTypes: false;
      SVGUseElement: false;
      SVGViewElement: false;
      SyncManager: false;
      TaskAttributionTiming: false;
      TaskController: false;
      TaskPriorityChangeEvent: false;
      TaskSignal: false;
      TEMPORARY: false;
      Text: false;
      TextDecoder: false;
      TextDecoderStream: false;
      TextEncoder: false;
      TextEncoderStream: false;
      TextEvent: false;
      TextFormat: false;
      TextFormatUpdateEvent: false;
      TextMetrics: false;
      TextTrack: false;
      TextTrackCue: false;
      TextTrackCueList: false;
      TextTrackList: false;
      TextUpdateEvent: false;
      TimeEvent: false;
      TimeRanges: false;
      ToggleEvent: false;
      toolbar: false;
      top: false;
      Touch: false;
      TouchEvent: false;
      TouchList: false;
      TrackEvent: false;
      TransformStream: false;
      TransformStreamDefaultController: false;
      TransitionEvent: false;
      TreeWalker: false;
      TrustedHTML: false;
      TrustedScript: false;
      TrustedScriptURL: false;
      TrustedTypePolicy: false;
      TrustedTypePolicyFactory: false;
      trustedTypes: false;
      UIEvent: false;
      URL: false;
      URLPattern: false;
      URLSearchParams: false;
      USB: false;
      USBAlternateInterface: false;
      USBConfiguration: false;
      USBConnectionEvent: false;
      USBDevice: false;
      USBEndpoint: false;
      USBInterface: false;
      USBInTransferResult: false;
      USBIsochronousInTransferPacket: false;
      USBIsochronousInTransferResult: false;
      USBIsochronousOutTransferPacket: false;
      USBIsochronousOutTransferResult: false;
      USBOutTransferResult: false;
      UserActivation: false;
      ValidityState: false;
      VideoColorSpace: false;
      VideoDecoder: false;
      VideoEncoder: false;
      VideoFrame: false;
      VideoPlaybackQuality: false;
      ViewTimeline: false;
      ViewTransition: false;
      ViewTransitionTypeSet: false;
      VirtualKeyboard: false;
      VirtualKeyboardGeometryChangeEvent: false;
      VisibilityStateEntry: false;
      visualViewport: false;
      VisualViewport: false;
      VTTCue: false;
      VTTRegion: false;
      WakeLock: false;
      WakeLockSentinel: false;
      WaveShaperNode: false;
      WebAssembly: false;
      WebGL2RenderingContext: false;
      WebGLActiveInfo: false;
      WebGLBuffer: false;
      WebGLContextEvent: false;
      WebGLFramebuffer: false;
      WebGLObject: false;
      WebGLProgram: false;
      WebGLQuery: false;
      WebGLRenderbuffer: false;
      WebGLRenderingContext: false;
      WebGLSampler: false;
      WebGLShader: false;
      WebGLShaderPrecisionFormat: false;
      WebGLSync: false;
      WebGLTexture: false;
      WebGLTransformFeedback: false;
      WebGLUniformLocation: false;
      WebGLVertexArrayObject: false;
      WebSocket: false;
      WebSocketError: false;
      WebSocketStream: false;
      WebTransport: false;
      WebTransportBidirectionalStream: false;
      WebTransportDatagramDuplexStream: false;
      WebTransportError: false;
      WebTransportReceiveStream: false;
      WebTransportSendStream: false;
      WGSLLanguageFeatures: false;
      WheelEvent: false;
      when: false;
      window: false;
      Window: false;
      WindowControlsOverlay: false;
      WindowControlsOverlayGeometryChangeEvent: false;
      Worker: false;
      Worklet: false;
      WorkletGlobalScope: false;
      WritableStream: false;
      WritableStreamDefaultController: false;
      WritableStreamDefaultWriter: false;
      XMLDocument: false;
      XMLHttpRequest: false;
      XMLHttpRequestEventTarget: false;
      XMLHttpRequestUpload: false;
      XMLSerializer: false;
      XPathEvaluator: false;
      XPathExpression: false;
      XPathResult: false;
      XRAnchor: false;
      XRAnchorSet: false;
      XRBoundedReferenceSpace: false;
      XRCamera: false;
      XRCPUDepthInformation: false;
      XRDepthInformation: false;
      XRDOMOverlayState: false;
      XRFrame: false;
      XRHand: false;
      XRHitTestResult: false;
      XRHitTestSource: false;
      XRInputSource: false;
      XRInputSourceArray: false;
      XRInputSourceEvent: false;
      XRInputSourcesChangeEvent: false;
      XRJointPose: false;
      XRJointSpace: false;
      XRLayer: false;
      XRLightEstimate: false;
      XRLightProbe: false;
      XRPose: false;
      XRRay: false;
      XRReferenceSpace: false;
      XRReferenceSpaceEvent: false;
      XRRenderState: false;
      XRRigidTransform: false;
      XRSession: false;
      XRSessionEvent: false;
      XRSpace: false;
      XRSystem: false;
      XRTransientInputHitTestResult: false;
      XRTransientInputHitTestSource: false;
      XRView: false;
      XRViewerPose: false;
      XRViewport: false;
      XRWebGLBinding: false;
      XRWebGLDepthInformation: false;
      XRWebGLLayer: false;
      XSLTProcessor: false;
    };
  };
  settings: {
    react: {
      version: string;
    };
  };
  plugins: {
    react: {
      deprecatedRules: Partial<{
        'boolean-prop-naming': eslint897.Rule.RuleModule;
        'button-has-type': eslint897.Rule.RuleModule;
        'checked-requires-onchange-or-readonly': eslint897.Rule.RuleModule;
        'default-props-match-prop-types': eslint897.Rule.RuleModule;
        'destructuring-assignment': eslint897.Rule.RuleModule;
        'display-name': eslint897.Rule.RuleModule;
        'forbid-component-props': eslint897.Rule.RuleModule;
        'forbid-dom-props': eslint897.Rule.RuleModule;
        'forbid-elements': eslint897.Rule.RuleModule;
        'forbid-foreign-prop-types': eslint897.Rule.RuleModule;
        'forbid-prop-types': eslint897.Rule.RuleModule;
        'forward-ref-uses-ref': eslint897.Rule.RuleModule;
        'function-component-definition': eslint897.Rule.RuleModule;
        'hook-use-state': eslint897.Rule.RuleModule;
        'iframe-missing-sandbox': eslint897.Rule.RuleModule;
        'jsx-boolean-value': eslint897.Rule.RuleModule;
        'jsx-child-element-spacing': eslint897.Rule.RuleModule;
        'jsx-closing-bracket-location': eslint897.Rule.RuleModule;
        'jsx-closing-tag-location': eslint897.Rule.RuleModule;
        'jsx-curly-spacing': eslint897.Rule.RuleModule;
        'jsx-curly-newline': eslint897.Rule.RuleModule;
        'jsx-equals-spacing': eslint897.Rule.RuleModule;
        'jsx-filename-extension': eslint897.Rule.RuleModule;
        'jsx-first-prop-new-line': eslint897.Rule.RuleModule;
        'jsx-handler-names': eslint897.Rule.RuleModule;
        'jsx-indent': eslint897.Rule.RuleModule;
        'jsx-indent-props': eslint897.Rule.RuleModule;
        'jsx-key': eslint897.Rule.RuleModule;
        'jsx-max-depth': eslint897.Rule.RuleModule;
        'jsx-max-props-per-line': eslint897.Rule.RuleModule;
        'jsx-newline': eslint897.Rule.RuleModule;
        'jsx-no-bind': eslint897.Rule.RuleModule;
        'jsx-no-comment-textnodes': eslint897.Rule.RuleModule;
        'jsx-no-constructed-context-values': eslint897.Rule.RuleModule;
        'jsx-no-duplicate-props': eslint897.Rule.RuleModule;
        'jsx-no-leaked-render': eslint897.Rule.RuleModule;
        'jsx-no-literals': eslint897.Rule.RuleModule;
        'jsx-no-script-url': eslint897.Rule.RuleModule;
        'jsx-no-target-blank': eslint897.Rule.RuleModule;
        'jsx-no-useless-fragment': eslint897.Rule.RuleModule;
        'jsx-one-expression-per-line': eslint897.Rule.RuleModule;
        'jsx-no-undef': eslint897.Rule.RuleModule;
        'jsx-curly-brace-presence': eslint897.Rule.RuleModule;
        'jsx-pascal-case': eslint897.Rule.RuleModule;
        'jsx-fragments': eslint897.Rule.RuleModule;
        'jsx-props-no-multi-spaces': eslint897.Rule.RuleModule;
        'jsx-props-no-spreading': eslint897.Rule.RuleModule;
        'jsx-props-no-spread-multi': eslint897.Rule.RuleModule;
        'jsx-sort-default-props': eslint897.Rule.RuleModule;
        'jsx-sort-props': eslint897.Rule.RuleModule;
        'jsx-space-before-closing': eslint897.Rule.RuleModule;
        'jsx-tag-spacing': eslint897.Rule.RuleModule;
        'jsx-uses-react': eslint897.Rule.RuleModule;
        'jsx-uses-vars': eslint897.Rule.RuleModule;
        'jsx-wrap-multilines': eslint897.Rule.RuleModule;
        'no-invalid-html-attribute': eslint897.Rule.RuleModule;
        'no-access-state-in-setstate': eslint897.Rule.RuleModule;
        'no-adjacent-inline-elements': eslint897.Rule.RuleModule;
        'no-array-index-key': eslint897.Rule.RuleModule;
        'no-arrow-function-lifecycle': eslint897.Rule.RuleModule;
        'no-children-prop': eslint897.Rule.RuleModule;
        'no-danger': eslint897.Rule.RuleModule;
        'no-danger-with-children': eslint897.Rule.RuleModule;
        'no-deprecated': eslint897.Rule.RuleModule;
        'no-did-mount-set-state': eslint897.Rule.RuleModule;
        'no-did-update-set-state': eslint897.Rule.RuleModule;
        'no-direct-mutation-state': eslint897.Rule.RuleModule;
        'no-find-dom-node': eslint897.Rule.RuleModule;
        'no-is-mounted': eslint897.Rule.RuleModule;
        'no-multi-comp': eslint897.Rule.RuleModule;
        'no-namespace': eslint897.Rule.RuleModule;
        'no-set-state': eslint897.Rule.RuleModule;
        'no-string-refs': eslint897.Rule.RuleModule;
        'no-redundant-should-component-update': eslint897.Rule.RuleModule;
        'no-render-return-value': eslint897.Rule.RuleModule;
        'no-this-in-sfc': eslint897.Rule.RuleModule;
        'no-typos': eslint897.Rule.RuleModule;
        'no-unescaped-entities': eslint897.Rule.RuleModule;
        'no-unknown-property': eslint897.Rule.RuleModule;
        'no-unsafe': eslint897.Rule.RuleModule;
        'no-unstable-nested-components': eslint897.Rule.RuleModule;
        'no-unused-class-component-methods': eslint897.Rule.RuleModule;
        'no-unused-prop-types': eslint897.Rule.RuleModule;
        'no-unused-state': eslint897.Rule.RuleModule;
        'no-object-type-as-default-prop': eslint897.Rule.RuleModule;
        'no-will-update-set-state': eslint897.Rule.RuleModule;
        'prefer-es6-class': eslint897.Rule.RuleModule;
        'prefer-exact-props': eslint897.Rule.RuleModule;
        'prefer-read-only-props': eslint897.Rule.RuleModule;
        'prefer-stateless-function': eslint897.Rule.RuleModule;
        'prop-types': eslint897.Rule.RuleModule;
        'react-in-jsx-scope': eslint897.Rule.RuleModule;
        'require-default-props': eslint897.Rule.RuleModule;
        'require-optimization': eslint897.Rule.RuleModule;
        'require-render-return': eslint897.Rule.RuleModule;
        'self-closing-comp': eslint897.Rule.RuleModule;
        'sort-comp': eslint897.Rule.RuleModule;
        'sort-default-props': eslint897.Rule.RuleModule;
        'sort-prop-types': eslint897.Rule.RuleModule;
        'state-in-constructor': eslint897.Rule.RuleModule;
        'static-property-placement': eslint897.Rule.RuleModule;
        'style-prop-object': eslint897.Rule.RuleModule;
        'void-dom-elements-no-children': eslint897.Rule.RuleModule;
      }>;
      rules: {
        'boolean-prop-naming': eslint897.Rule.RuleModule;
        'button-has-type': eslint897.Rule.RuleModule;
        'checked-requires-onchange-or-readonly': eslint897.Rule.RuleModule;
        'default-props-match-prop-types': eslint897.Rule.RuleModule;
        'destructuring-assignment': eslint897.Rule.RuleModule;
        'display-name': eslint897.Rule.RuleModule;
        'forbid-component-props': eslint897.Rule.RuleModule;
        'forbid-dom-props': eslint897.Rule.RuleModule;
        'forbid-elements': eslint897.Rule.RuleModule;
        'forbid-foreign-prop-types': eslint897.Rule.RuleModule;
        'forbid-prop-types': eslint897.Rule.RuleModule;
        'forward-ref-uses-ref': eslint897.Rule.RuleModule;
        'function-component-definition': eslint897.Rule.RuleModule;
        'hook-use-state': eslint897.Rule.RuleModule;
        'iframe-missing-sandbox': eslint897.Rule.RuleModule;
        'jsx-boolean-value': eslint897.Rule.RuleModule;
        'jsx-child-element-spacing': eslint897.Rule.RuleModule;
        'jsx-closing-bracket-location': eslint897.Rule.RuleModule;
        'jsx-closing-tag-location': eslint897.Rule.RuleModule;
        'jsx-curly-spacing': eslint897.Rule.RuleModule;
        'jsx-curly-newline': eslint897.Rule.RuleModule;
        'jsx-equals-spacing': eslint897.Rule.RuleModule;
        'jsx-filename-extension': eslint897.Rule.RuleModule;
        'jsx-first-prop-new-line': eslint897.Rule.RuleModule;
        'jsx-handler-names': eslint897.Rule.RuleModule;
        'jsx-indent': eslint897.Rule.RuleModule;
        'jsx-indent-props': eslint897.Rule.RuleModule;
        'jsx-key': eslint897.Rule.RuleModule;
        'jsx-max-depth': eslint897.Rule.RuleModule;
        'jsx-max-props-per-line': eslint897.Rule.RuleModule;
        'jsx-newline': eslint897.Rule.RuleModule;
        'jsx-no-bind': eslint897.Rule.RuleModule;
        'jsx-no-comment-textnodes': eslint897.Rule.RuleModule;
        'jsx-no-constructed-context-values': eslint897.Rule.RuleModule;
        'jsx-no-duplicate-props': eslint897.Rule.RuleModule;
        'jsx-no-leaked-render': eslint897.Rule.RuleModule;
        'jsx-no-literals': eslint897.Rule.RuleModule;
        'jsx-no-script-url': eslint897.Rule.RuleModule;
        'jsx-no-target-blank': eslint897.Rule.RuleModule;
        'jsx-no-useless-fragment': eslint897.Rule.RuleModule;
        'jsx-one-expression-per-line': eslint897.Rule.RuleModule;
        'jsx-no-undef': eslint897.Rule.RuleModule;
        'jsx-curly-brace-presence': eslint897.Rule.RuleModule;
        'jsx-pascal-case': eslint897.Rule.RuleModule;
        'jsx-fragments': eslint897.Rule.RuleModule;
        'jsx-props-no-multi-spaces': eslint897.Rule.RuleModule;
        'jsx-props-no-spreading': eslint897.Rule.RuleModule;
        'jsx-props-no-spread-multi': eslint897.Rule.RuleModule;
        'jsx-sort-default-props': eslint897.Rule.RuleModule;
        'jsx-sort-props': eslint897.Rule.RuleModule;
        'jsx-space-before-closing': eslint897.Rule.RuleModule;
        'jsx-tag-spacing': eslint897.Rule.RuleModule;
        'jsx-uses-react': eslint897.Rule.RuleModule;
        'jsx-uses-vars': eslint897.Rule.RuleModule;
        'jsx-wrap-multilines': eslint897.Rule.RuleModule;
        'no-invalid-html-attribute': eslint897.Rule.RuleModule;
        'no-access-state-in-setstate': eslint897.Rule.RuleModule;
        'no-adjacent-inline-elements': eslint897.Rule.RuleModule;
        'no-array-index-key': eslint897.Rule.RuleModule;
        'no-arrow-function-lifecycle': eslint897.Rule.RuleModule;
        'no-children-prop': eslint897.Rule.RuleModule;
        'no-danger': eslint897.Rule.RuleModule;
        'no-danger-with-children': eslint897.Rule.RuleModule;
        'no-deprecated': eslint897.Rule.RuleModule;
        'no-did-mount-set-state': eslint897.Rule.RuleModule;
        'no-did-update-set-state': eslint897.Rule.RuleModule;
        'no-direct-mutation-state': eslint897.Rule.RuleModule;
        'no-find-dom-node': eslint897.Rule.RuleModule;
        'no-is-mounted': eslint897.Rule.RuleModule;
        'no-multi-comp': eslint897.Rule.RuleModule;
        'no-namespace': eslint897.Rule.RuleModule;
        'no-set-state': eslint897.Rule.RuleModule;
        'no-string-refs': eslint897.Rule.RuleModule;
        'no-redundant-should-component-update': eslint897.Rule.RuleModule;
        'no-render-return-value': eslint897.Rule.RuleModule;
        'no-this-in-sfc': eslint897.Rule.RuleModule;
        'no-typos': eslint897.Rule.RuleModule;
        'no-unescaped-entities': eslint897.Rule.RuleModule;
        'no-unknown-property': eslint897.Rule.RuleModule;
        'no-unsafe': eslint897.Rule.RuleModule;
        'no-unstable-nested-components': eslint897.Rule.RuleModule;
        'no-unused-class-component-methods': eslint897.Rule.RuleModule;
        'no-unused-prop-types': eslint897.Rule.RuleModule;
        'no-unused-state': eslint897.Rule.RuleModule;
        'no-object-type-as-default-prop': eslint897.Rule.RuleModule;
        'no-will-update-set-state': eslint897.Rule.RuleModule;
        'prefer-es6-class': eslint897.Rule.RuleModule;
        'prefer-exact-props': eslint897.Rule.RuleModule;
        'prefer-read-only-props': eslint897.Rule.RuleModule;
        'prefer-stateless-function': eslint897.Rule.RuleModule;
        'prop-types': eslint897.Rule.RuleModule;
        'react-in-jsx-scope': eslint897.Rule.RuleModule;
        'require-default-props': eslint897.Rule.RuleModule;
        'require-optimization': eslint897.Rule.RuleModule;
        'require-render-return': eslint897.Rule.RuleModule;
        'self-closing-comp': eslint897.Rule.RuleModule;
        'sort-comp': eslint897.Rule.RuleModule;
        'sort-default-props': eslint897.Rule.RuleModule;
        'sort-prop-types': eslint897.Rule.RuleModule;
        'state-in-constructor': eslint897.Rule.RuleModule;
        'static-property-placement': eslint897.Rule.RuleModule;
        'style-prop-object': eslint897.Rule.RuleModule;
        'void-dom-elements-no-children': eslint897.Rule.RuleModule;
      };
      configs: {
        recommended: {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
          };
          rules: {
            "react/display-name": 2;
            "react/jsx-key": 2;
            "react/jsx-no-comment-textnodes": 2;
            "react/jsx-no-duplicate-props": 2;
            "react/jsx-no-target-blank": 2;
            "react/jsx-no-undef": 2;
            "react/jsx-uses-react": 2;
            "react/jsx-uses-vars": 2;
            "react/no-children-prop": 2;
            "react/no-danger-with-children": 2;
            "react/no-deprecated": 2;
            "react/no-direct-mutation-state": 2;
            "react/no-find-dom-node": 2;
            "react/no-is-mounted": 2;
            "react/no-render-return-value": 2;
            "react/no-string-refs": 2;
            "react/no-unescaped-entities": 2;
            "react/no-unknown-property": 2;
            "react/no-unsafe": 0;
            "react/prop-types": 2;
            "react/react-in-jsx-scope": 2;
            "react/require-render-return": 2;
          };
        };
        all: {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
          };
          rules: Record<"boolean-prop-naming" | "button-has-type" | "checked-requires-onchange-or-readonly" | "default-props-match-prop-types" | "destructuring-assignment" | "display-name" | "forbid-component-props" | "forbid-dom-props" | "forbid-elements" | "forbid-foreign-prop-types" | "forbid-prop-types" | "prop-types" | "forward-ref-uses-ref" | "function-component-definition" | "hook-use-state" | "iframe-missing-sandbox" | "jsx-boolean-value" | "jsx-child-element-spacing" | "jsx-closing-bracket-location" | "jsx-closing-tag-location" | "jsx-curly-spacing" | "jsx-curly-newline" | "jsx-equals-spacing" | "jsx-filename-extension" | "jsx-first-prop-new-line" | "jsx-handler-names" | "jsx-indent" | "jsx-indent-props" | "jsx-key" | "jsx-max-depth" | "jsx-max-props-per-line" | "jsx-newline" | "jsx-no-bind" | "jsx-no-comment-textnodes" | "jsx-no-constructed-context-values" | "jsx-no-duplicate-props" | "jsx-no-leaked-render" | "jsx-no-literals" | "jsx-no-script-url" | "jsx-no-target-blank" | "jsx-no-useless-fragment" | "jsx-one-expression-per-line" | "jsx-no-undef" | "jsx-curly-brace-presence" | "jsx-pascal-case" | "jsx-fragments" | "jsx-props-no-multi-spaces" | "jsx-props-no-spreading" | "jsx-props-no-spread-multi" | "sort-default-props" | "jsx-sort-default-props" | "jsx-sort-props" | "jsx-tag-spacing" | "jsx-space-before-closing" | "jsx-uses-react" | "jsx-uses-vars" | "jsx-wrap-multilines" | "no-invalid-html-attribute" | "no-access-state-in-setstate" | "no-adjacent-inline-elements" | "no-array-index-key" | "no-arrow-function-lifecycle" | "no-children-prop" | "no-danger" | "no-danger-with-children" | "no-deprecated" | "no-direct-mutation-state" | "no-find-dom-node" | "no-is-mounted" | "no-multi-comp" | "no-namespace" | "no-set-state" | "no-string-refs" | "no-redundant-should-component-update" | "no-render-return-value" | "no-this-in-sfc" | "no-typos" | "no-unescaped-entities" | "no-unknown-property" | "no-unsafe" | "no-unstable-nested-components" | "no-unused-class-component-methods" | "no-unused-prop-types" | "no-unused-state" | "no-object-type-as-default-prop" | "prefer-es6-class" | "prefer-exact-props" | "prefer-read-only-props" | "prefer-stateless-function" | "react-in-jsx-scope" | "require-default-props" | "require-optimization" | "require-render-return" | "self-closing-comp" | "sort-comp" | "sort-prop-types" | "state-in-constructor" | "static-property-placement" | "style-prop-object" | "void-dom-elements-no-children" | "no-did-mount-set-state" | "no-did-update-set-state" | "no-will-update-set-state", 2 | "error">;
        };
        'jsx-runtime': {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
            jsxPragma: any;
          };
          rules: {
            "react/react-in-jsx-scope": 0;
            "react/jsx-uses-react": 0;
          };
        };
        flat: Record<string, pluginReact.ReactFlatConfig>;
      } & {
        flat: Record<string, pluginReact.ReactFlatConfig>;
      };
    };
  };
  rules: {
    "react/boolean-prop-naming": ["error", {
      validateNested: boolean;
    }];
    "react/button-has-type": "warn";
    "react/default-props-match-prop-types": "error";
    "react/destructuring-assignment": ["warn", string, {
      ignoreClassFields: boolean;
    }];
    "react/display-name": "warn";
    "react/forbid-component-props": "off";
    "react/forbid-dom-props": "off";
    "react/forbid-elements": "off";
    "react/forbid-foreign-prop-types": "off";
    "react/forbid-prop-types": "off";
    "react/function-component-definition": ["error", {
      namedComponents: string;
      unnamedComponents: string;
    }];
    "react/hook-use-state": "error";
    "react/iframe-missing-sandbox": "warn";
    "react/jsx-boolean-value": "warn";
    "react/jsx-child-element-spacing": "warn";
    "react/jsx-closing-bracket-location": "off";
    "react/jsx-closing-tag-location": "off";
    "react/jsx-curly-brace-presence": "off";
    "react/jsx-curly-newline": "off";
    "react/jsx-curly-spacing": "off";
    "react/jsx-equals-spacing": "off";
    "react/jsx-filename-extension": ["warn", {
      extensions: string[];
    }];
    "react/jsx-first-prop-new-line": "off";
    "react/jsx-fragments": ["warn", string];
    "react/jsx-handler-names": "warn";
    "react/jsx-indent": "off";
    "react/jsx-indent-props": "off";
    "react/jsx-key": "warn";
    "react/jsx-max-depth": "off";
    "react/jsx-max-props-per-line": "off";
    "react/jsx-newline": "off";
    "react/jsx-no-bind": ["warn", {
      ignoreDOMComponents: boolean;
      allowArrowFunctions: boolean;
    }];
    "react/jsx-no-comment-textnodes": "off";
    "react/jsx-no-constructed-context-values": "off";
    "react/jsx-no-duplicate-props": "error";
    "react/jsx-no-leaked-render": "error";
    "react/jsx-no-literals": "off";
    "react/jsx-no-script-url": "error";
    "react/jsx-no-target-blank": "error";
    "react/jsx-no-undef": "off";
    "react/jsx-no-useless-fragment": "off";
    "react/jsx-one-expression-per-line": "off";
    "react/jsx-pascal-case": "error";
    "react/jsx-props-no-multi-spaces": "off";
    "react/jsx-props-no-spreading": "off";
    "react/jsx-sort-default-props": "off";
    "react/jsx-sort-props": "off";
    "react/jsx-space-before-closing": "off";
    "react/jsx-tag-spacing": "off";
    "react/jsx-uses-react": "error";
    "react/jsx-uses-vars": "error";
    "react/jsx-wrap-multilines": "off";
    "react/no-access-state-in-setstate": "error";
    "react/no-adjacent-inline-elements": "off";
    "react/no-array-index-key": "error";
    "react/no-children-prop": "error";
    "react/no-danger": "off";
    "react/no-danger-with-children": "error";
    "react/no-deprecated": "error";
    "react/no-did-mount-set-state": "error";
    "react/no-did-update-set-state": "error";
    "react/no-direct-mutation-state": "error";
    "react/no-find-dom-node": "error";
    "react/no-invalid-html-attribute": "error";
    "react/no-is-mounted": "error";
    "react/no-multi-comp": "off";
    "react/no-namespace": "off";
    "react/no-object-type-as-default-prop": "error";
    "react/no-redundant-should-component-update": "error";
    "react/no-render-return-value": "error";
    "react/no-set-state": "off";
    "react/no-string-refs": "error";
    "react/no-this-in-sfc": "error";
    "react/no-typos": "warn";
    "react/no-unescaped-entities": "off";
    "react/no-unknown-property": "warn";
    "react/no-unsafe": "error";
    "react/no-unstable-nested-components": ["error", {
      allowAsProps: boolean;
    }];
    "react/no-unused-class-component-methods": "warn";
    "react/no-unused-prop-types": "warn";
    "react/no-unused-state": "warn";
    "react/no-will-update-set-state": "error";
    "react/prefer-es6-class": ["error", string];
    "react/prefer-exact-props": "off";
    "react/prefer-read-only-props": "error";
    "react/prefer-stateless-function": "error";
    "react/prop-types": "off";
    "react/react-in-jsx-scope": "off";
    "react/require-default-props": ["warn", {
      forbidDefaultForRequired: boolean;
      functions: string;
    }];
    "react/require-optimization": "off";
    "react/require-render-return": "error";
    "react/self-closing-comp": "error";
    "react/sort-comp": "off";
    "react/sort-default-props": "off";
    "react/sort-prop-types": "off";
    "react/state-in-constructor": "off";
    "react/static-property-placement": "off";
    "react/style-prop-object": "error";
    "react/void-dom-elements-no-children": "error";
  };
} | {
  name: string;
  plugins: {
    "react-hooks": typeof pluginReactHooks;
  };
  rules: {
    "react-hooks/rules-of-hooks": "error";
    "react-hooks/exhaustive-deps": "warn";
  };
} | {
  name: string;
  plugins: {
    "jsx-a11y": any;
  };
  rules: {
    "jsx-a11y/alt-text": "error";
    "jsx-a11y/anchor-ambiguous-text": "off";
    "jsx-a11y/anchor-has-content": "error";
    "jsx-a11y/anchor-is-valid": "error";
    "jsx-a11y/aria-activedescendant-has-tabindex": "error";
    "jsx-a11y/aria-props": "error";
    "jsx-a11y/aria-proptypes": "error";
    "jsx-a11y/aria-role": "error";
    "jsx-a11y/aria-unsupported-elements": "error";
    "jsx-a11y/autocomplete-valid": "error";
    "jsx-a11y/click-events-have-key-events": "error";
    "jsx-a11y/heading-has-content": "error";
    "jsx-a11y/html-has-lang": "error";
    "jsx-a11y/iframe-has-title": "error";
    "jsx-a11y/img-redundant-alt": "error";
    "jsx-a11y/interactive-supports-focus": "error";
    "jsx-a11y/label-has-associated-control": "error";
    "jsx-a11y/lang": "error";
    "jsx-a11y/media-has-caption": "error";
    "jsx-a11y/mouse-events-have-key-events": "error";
    "jsx-a11y/no-access-key": "error";
    "jsx-a11y/no-aria-hidden-on-focusable": "warn";
    "jsx-a11y/no-autofocus": "error";
    "jsx-a11y/no-distracting-elements": "error";
    "jsx-a11y/no-interactive-element-to-noninteractive-role": "error";
    "jsx-a11y/no-noninteractive-element-interactions": "error";
    "jsx-a11y/no-noninteractive-element-to-interactive-role": "error";
    "jsx-a11y/no-noninteractive-tabindex": "error";
    "jsx-a11y/no-redundant-roles": "error";
    "jsx-a11y/no-static-element-interactions": "error";
    "jsx-a11y/prefer-tag-over-role": "warn";
    "jsx-a11y/role-has-required-aria-props": "error";
    "jsx-a11y/role-supports-aria-props": "error";
    "jsx-a11y/scope": "error";
    "jsx-a11y/tabindex-no-positive": "error";
  };
})[];
//#endregion
//#region src/stylistic.d.ts
declare const _default$5: {
  name: string;
  plugins: {
    "@stylistic": {
      rules: _stylistic_eslint_plugin1104.Rules;
      configs: eslint1105.ESLint.Plugin["configs"] & _stylistic_eslint_plugin1104.Configs;
    };
  };
  rules: {
    "@stylistic/array-bracket-newline": ["warn", {
      multiline: true;
    }];
    "@stylistic/array-bracket-spacing": "warn";
    "@stylistic/array-element-newline": ["warn", {
      consistent: true;
      multiline: true;
    }];
    "@stylistic/arrow-parens": ["warn", "always"];
    "@stylistic/arrow-spacing": ["warn", {
      before: true;
      after: true;
    }];
    "@stylistic/block-spacing": ["warn", "always"];
    "@stylistic/brace-style": ["warn", "1tbs", {
      allowSingleLine: true;
    }];
    "@stylistic/comma-dangle": ["warn", "never"];
    "@stylistic/comma-spacing": ["warn", {
      before: false;
      after: true;
    }];
    "@stylistic/comma-style": ["warn", "last"];
    "@stylistic/computed-property-spacing": "warn";
    "@stylistic/curly-newline": "warn";
    "@stylistic/dot-location": ["warn", "property"];
    "@stylistic/eol-last": "warn";
    "@stylistic/function-call-argument-newline": ["warn", "consistent"];
    "@stylistic/function-call-spacing": "warn";
    "@stylistic/function-paren-newline": ["off", "consistent"];
    "@stylistic/generator-star-spacing": ["warn", {
      before: false;
      after: true;
      method: {
        before: true;
        after: false;
      };
    }];
    "@stylistic/implicit-arrow-linebreak": "off";
    "@stylistic/indent": ["warn", number];
    "@stylistic/indent-binary-ops": ["warn", number];
    "@stylistic/jsx-child-element-spacing": "warn";
    "@stylistic/jsx-closing-bracket-location": ["warn", "tag-aligned"];
    "@stylistic/jsx-closing-tag-location": ["warn", "tag-aligned"];
    "@stylistic/jsx-curly-brace-presence": "off";
    "@stylistic/jsx-curly-newline": "off";
    "@stylistic/jsx-curly-spacing": ["warn", "never", {
      allowMultiline: false;
      spacing: {
        objectLiterals: "always";
      };
    }];
    "@stylistic/jsx-equals-spacing": ["warn", "never"];
    "@stylistic/jsx-first-prop-new-line": ["warn", "multiline"];
    "@stylistic/jsx-function-call-newline": "off";
    "@stylistic/jsx-indent-props": ["warn", number];
    "@stylistic/jsx-max-props-per-line": "off";
    "@stylistic/jsx-newline": ["warn", {
      prevent: true;
      allowMultilines: true;
    }];
    "@stylistic/jsx-one-expression-per-line": ["warn", {
      allow: "single-child";
    }];
    "@stylistic/jsx-pascal-case": "off";
    "@stylistic/jsx-props-no-multi-spaces": "off";
    "@stylistic/jsx-quotes": ["warn", "prefer-double"];
    "@stylistic/jsx-self-closing-comp": ["warn", {
      component: true;
      html: true;
    }];
    "@stylistic/jsx-sort-props": "off";
    "@stylistic/jsx-tag-spacing": "warn";
    "@stylistic/jsx-wrap-multilines": "warn";
    "@stylistic/key-spacing": "off";
    "@stylistic/keyword-spacing": ["warn", {
      before: true;
      after: true;
    }];
    "@stylistic/line-comment-position": "off";
    "@stylistic/linebreak-style": "off";
    "@stylistic/lines-around-comment": "off";
    "@stylistic/lines-between-class-members": ["warn", "always", {
      exceptAfterSingleLine: true;
    }];
    "@stylistic/max-len": ["warn", {
      code: number;
    }];
    "@stylistic/max-statements-per-line": "off";
    "@stylistic/multiline-ternary": ["warn", "always-multiline"];
    "@stylistic/new-parens": "warn";
    "@stylistic/newline-per-chained-call": "off";
    "@stylistic/no-confusing-arrow": "off";
    "@stylistic/no-extra-parens": "off";
    "@stylistic/no-extra-semi": "warn";
    "@stylistic/no-floating-decimal": "warn";
    "@stylistic/no-mixed-operators": "warn";
    "@stylistic/no-mixed-spaces-and-tabs": ["warn", "smart-tabs"];
    "@stylistic/no-multi-spaces": ["warn", {
      exceptions: {
        Property: true;
        VariableDeclarator: true;
        ImportDeclaration: true;
      };
    }];
    "@stylistic/no-multiple-empty-lines": ["warn", {
      max: number;
    }];
    "@stylistic/no-tabs": "off";
    "@stylistic/no-trailing-spaces": "warn";
    "@stylistic/no-whitespace-before-property": "warn";
    "@stylistic/nonblock-statement-body-position": "off";
    "@stylistic/object-curly-newline": ["warn", {
      ObjectExpression: {
        multiline: true;
      };
      ObjectPattern: {
        multiline: true;
      };
    }];
    "@stylistic/object-curly-spacing": ["warn", "always"];
    "@stylistic/object-property-newline": ["warn", {
      allowAllPropertiesOnSameLine: false;
    }];
    "@stylistic/one-var-declaration-per-line": ["warn", "initializations"];
    "@stylistic/operator-linebreak": ["warn", "before"];
    "@stylistic/padded-blocks": ["warn", "never"];
    "@stylistic/padding-line-between-statements": "off";
    "@stylistic/quote-props": ["warn", "as-needed"];
    "@stylistic/quotes": ["warn", "backtick", {
      avoidEscape: true;
    }];
    "@stylistic/rest-spread-spacing": ["warn", "never"];
    "@stylistic/semi": ["warn", "always"];
    "@stylistic/semi-spacing": ["warn", {
      before: false;
      after: true;
    }];
    "@stylistic/semi-style": ["warn", "last"];
    "@stylistic/space-before-blocks": "warn";
    "@stylistic/space-before-function-paren": ["warn", {
      anonymous: "never";
      named: "never";
      asyncArrow: "always";
    }];
    "@stylistic/space-in-parens": ["warn", "never"];
    "@stylistic/space-infix-ops": ["warn", {
      int32Hint: false;
    }];
    "@stylistic/space-unary-ops": ["warn", {
      words: true;
      nonwords: false;
    }];
    "@stylistic/spaced-comment": ["warn", "always", {
      exceptions: string[];
    }];
    "@stylistic/switch-colon-spacing": ["warn", {
      before: false;
      after: true;
    }];
    "@stylistic/template-curly-spacing": ["warn", "never"];
    "@stylistic/template-tag-spacing": ["warn", "never"];
    "@stylistic/type-annotation-spacing": "warn";
    "@stylistic/type-generic-spacing": "warn";
    "@stylistic/type-named-tuple-spacing": "warn";
    "@stylistic/wrap-iife": ["warn", "any"];
    "@stylistic/wrap-regex": "off";
    "@stylistic/yield-star-spacing": ["warn", {
      before: false;
      after: true;
    }];
  };
}[];
//#endregion
//#region src/type-aware.d.ts
declare const _default$6: ({
  name: string;
  files: string[];
  plugins: {
    "@typescript-eslint": _typescript_eslint_utils_ts_eslint1107.FlatConfig.Plugin;
  };
  rules: {
    "class-methods-use-this": "off";
    "@typescript-eslint/class-methods-use-this": ["warn", {
      ignoreOverrideMethods: boolean;
      ignoreClassesThatImplementAnInterface: string;
    }];
    "default-param-last": "off";
    "@typescript-eslint/default-param-last": "error";
    "init-declarations": "off";
    "@typescript-eslint/init-declarations": "off";
    "max-params": "off";
    "@typescript-eslint/max-params": "error";
    "no-array-constructor": "off";
    "@typescript-eslint/no-array-constructor": "off";
    "no-dupe-class-members": "off";
    "@typescript-eslint/no-dupe-class-members": "error";
    "no-invalid-this": "off";
    "@typescript-eslint/no-invalid-this": "off";
    "no-loop-func": "off";
    "@typescript-eslint/no-loop-func": "error";
    "no-magic-numbers": "off";
    "@typescript-eslint/no-magic-numbers": "off";
    "no-redeclare": "off";
    "@typescript-eslint/no-redeclare": "error";
    "no-restricted-imports": "off";
    "@typescript-eslint/no-restricted-imports": "off";
    "no-shadow": "off";
    "@typescript-eslint/no-shadow": "error";
    "no-unused-expressions": "off";
    "@typescript-eslint/no-unused-expressions": "off";
    "no-unused-vars": "off";
    "@typescript-eslint/no-unused-vars": ["error", {
      vars: string;
      args: string;
      ignoreRestSiblings: boolean;
    }];
    "no-use-before-define": "off";
    "@typescript-eslint/no-use-before-define": ["error", {
      functions: boolean;
      classes: boolean;
    }];
    "no-useless-constructor": "off";
    "@typescript-eslint/no-useless-constructor": "error";
    "@typescript-eslint/ban-ts-comment": "off";
    "@typescript-eslint/consistent-type-imports": "error";
    "@typescript-eslint/explicit-function-return-type": "warn";
    "@typescript-eslint/explicit-member-accessibility": "off";
    "@typescript-eslint/explicit-module-boundary-types": ["warn"];
    "@typescript-eslint/member-ordering": "off";
    "@typescript-eslint/method-signature-style": ["off", string];
    "@typescript-eslint/no-duplicate-enum-values": "error";
    "@typescript-eslint/no-dynamic-delete": "warn";
    "@typescript-eslint/no-empty-object-type": ["warn", {
      allowInterfaces: string;
    }];
    "@typescript-eslint/no-explicit-any": ["warn", {
      ignoreRestArgs: boolean;
    }];
    "@typescript-eslint/no-extra-non-null-assertion": "error";
    "@typescript-eslint/no-extraneous-class": "off";
    "@typescript-eslint/no-import-type-side-effects": "error";
    "@typescript-eslint/no-invalid-void-type": "warn";
    "@typescript-eslint/no-misused-new": "error";
    "@typescript-eslint/no-namespace": ["error", {
      allowDeclarations: boolean;
      allowDefinitionFiles: boolean;
    }];
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error";
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error";
    "@typescript-eslint/no-non-null-assertion": "off";
    "@typescript-eslint/no-require-imports": "warn";
    "@typescript-eslint/no-restricted-types": "off";
    "@typescript-eslint/no-this-alias": "error";
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": "warn";
    "@typescript-eslint/no-unnecessary-type-constraint": "warn";
    "@typescript-eslint/no-unsafe-declaration-merging": "error";
    "@typescript-eslint/no-unsafe-function-type": "error";
    "@typescript-eslint/no-useless-empty-export": "error";
    "@typescript-eslint/no-wrapper-object-types": "warn";
    "@typescript-eslint/parameter-properties": "off";
    "@typescript-eslint/prefer-as-const": "warn";
    "@typescript-eslint/prefer-enum-initializers": "error";
    "@typescript-eslint/prefer-literal-enum-member": "error";
    "@typescript-eslint/prefer-namespace-keyword": "off";
    "@typescript-eslint/triple-slash-reference": ["error", {
      types: string;
    }];
    "@typescript-eslint/unified-signatures": "off";
    "@typescript-eslint/adjacent-overload-signatures": "error";
    "@typescript-eslint/array-type": ["error", {
      default: string;
    }];
    "@typescript-eslint/ban-tslint-comment": "error";
    "@typescript-eslint/class-literal-property-style": "off";
    "@typescript-eslint/consistent-generic-constructors": "error";
    "@typescript-eslint/consistent-indexed-object-style": "off";
    "@typescript-eslint/consistent-type-assertions": ["error", {
      assertionStyle: string;
    }];
    "@typescript-eslint/consistent-type-definitions": ["error", string];
    "@typescript-eslint/no-confusing-non-null-assertion": "error";
    "@typescript-eslint/no-inferrable-types": ["warn", {
      ignoreParameters: boolean;
      ignoreProperties: boolean;
    }];
    "@typescript-eslint/prefer-for-of": "warn";
    "@typescript-eslint/prefer-function-type": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "brace-style": "off";
    "comma-dangle": "off";
    "comma-spacing": "off";
    "default-param-last": "off";
    "dot-notation": "off";
    "func-call-spacing": "off";
    indent: "off";
    "init-declarations": "off";
    "keyword-spacing": "off";
    "lines-between-class-members": "off";
    "no-array-constructor": "off";
    "no-dupe-class-members": "off";
    "no-duplicate-imports": "off";
    "no-empty-function": "off";
    "no-extra-parens": "off";
    "no-extra-semi": "off";
    "no-implied-eval": "off";
    "no-invalid-this": "off";
    "no-loop-func": "off";
    "no-loss-of-precision": "off";
    "no-magic-numbers": "off";
    "no-redeclare": "off";
    "no-shadow": "off";
    "no-throw-literal": "off";
    "no-unused-expressions": "off";
    "no-unused-vars": "off";
    "no-use-before-define": "off";
    "no-useless-constructor": "off";
    quotes: "off";
    "require-await": "off";
    semi: "off";
    "space-before-function-paren": "off";
    "space-infix-ops": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "@typescript-eslint/explicit-function-return-type": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "consistent-return": "off";
    "@typescript-eslint/consistent-return": "off";
    "no-implied-eval": "off";
    "@typescript-eslint/no-implied-eval": "error";
    "no-throw-literal": "off";
    "@typescript-eslint/only-throw-error": "error";
    "prefer-destructuring": "off";
    "@typescript-eslint/prefer-destructuring": "error";
    "prefer-promise-reject-errors": "off";
    "@typescript-eslint/prefer-promise-reject-errors": "error";
    "require-await": "off";
    "@typescript-eslint/require-await": "error";
    "dot-notation": "off";
    "@typescript-eslint/dot-notation": "error";
    "@typescript-eslint/await-thenable": "error";
    "@typescript-eslint/consistent-type-exports": "off";
    "@typescript-eslint/naming-convention": "off";
    "@typescript-eslint/no-array-delete": "error";
    "@typescript-eslint/no-base-to-string": "error";
    "@typescript-eslint/no-confusing-void-expression": ["error", {
      ignoreArrowShorthand: boolean;
    }];
    "@typescript-eslint/no-deprecated": "warn";
    "@typescript-eslint/no-duplicate-type-constituents": "error";
    "@typescript-eslint/no-floating-promises": ["error", {
      ignoreIIFE: boolean;
    }];
    "@typescript-eslint/no-for-in-array": "error";
    "@typescript-eslint/no-meaningless-void-operator": "error";
    "@typescript-eslint/no-misused-promises": "error";
    "@typescript-eslint/no-misused-spread": "error";
    "@typescript-eslint/no-mixed-enums": "error";
    "@typescript-eslint/no-redundant-type-constituents": "error";
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn";
    "@typescript-eslint/no-unnecessary-condition": "warn";
    "@typescript-eslint/no-unnecessary-qualifier": "warn";
    "@typescript-eslint/no-unnecessary-template-expression": "warn";
    "@typescript-eslint/no-unnecessary-type-arguments": "warn";
    "@typescript-eslint/no-unnecessary-type-assertion": "warn";
    "@typescript-eslint/no-unnecessary-type-conversion": "warn";
    "@typescript-eslint/no-unnecessary-type-parameters": "warn";
    "@typescript-eslint/no-unsafe-argument": "off";
    "@typescript-eslint/no-unsafe-assignment": "off";
    "@typescript-eslint/no-unsafe-call": "off";
    "@typescript-eslint/no-unsafe-enum-comparison": "warn";
    "@typescript-eslint/no-unsafe-member-access": "off";
    "@typescript-eslint/no-unsafe-return": "off";
    "@typescript-eslint/no-unsafe-type-assertion": "warn";
    "@typescript-eslint/no-unsafe-unary-minus": "error";
    "@typescript-eslint/prefer-readonly": "off";
    "@typescript-eslint/prefer-readonly-parameter-types": "off";
    "@typescript-eslint/prefer-reduce-type-parameter": "warn";
    "@typescript-eslint/prefer-return-this-type": "error";
    "@typescript-eslint/promise-function-async": ["error", {
      allowedPromiseNames: string[];
      checkArrowFunctions: boolean;
      checkFunctionDeclarations: boolean;
      checkFunctionExpressions: boolean;
      checkMethodDeclarations: boolean;
    }];
    "@typescript-eslint/related-getter-setter-pairs": "warn";
    "@typescript-eslint/require-array-sort-compare": "warn";
    "@typescript-eslint/restrict-plus-operands": "error";
    "@typescript-eslint/restrict-template-expressions": "warn";
    "@typescript-eslint/return-await": "error";
    "@typescript-eslint/strict-boolean-expressions": "off";
    "@typescript-eslint/switch-exhaustiveness-check": "warn";
    "@typescript-eslint/unbound-method": ["warn", {
      ignoreStatic: boolean;
    }];
    "@typescript-eslint/use-unknown-in-catch-callback-variable": "warn";
    "@typescript-eslint/non-nullable-type-assertion-style": "warn";
    "@typescript-eslint/prefer-find": "error";
    "@typescript-eslint/prefer-includes": "error";
    "@typescript-eslint/prefer-nullish-coalescing": ["error", {
      ignoreConditionalTests: boolean;
      ignoreMixedLogicalExpressions: boolean;
    }];
    "@typescript-eslint/prefer-optional-chain": "error";
    "@typescript-eslint/prefer-regexp-exec": "error";
    "@typescript-eslint/prefer-string-starts-ends-with": "warn";
  };
})[];
//#endregion
//#region src/typescript.d.ts
declare const _default$7: ({
  name: string;
  files: string[];
  plugins: {
    "@typescript-eslint": _typescript_eslint_utils_ts_eslint1103.FlatConfig.Plugin;
  };
  rules: {
    "class-methods-use-this": "off";
    "@typescript-eslint/class-methods-use-this": ["warn", {
      ignoreOverrideMethods: boolean;
      ignoreClassesThatImplementAnInterface: string;
    }];
    "default-param-last": "off";
    "@typescript-eslint/default-param-last": "error";
    "init-declarations": "off";
    "@typescript-eslint/init-declarations": "off";
    "max-params": "off";
    "@typescript-eslint/max-params": "error";
    "no-array-constructor": "off";
    "@typescript-eslint/no-array-constructor": "off";
    "no-dupe-class-members": "off";
    "@typescript-eslint/no-dupe-class-members": "error";
    "no-invalid-this": "off";
    "@typescript-eslint/no-invalid-this": "off";
    "no-loop-func": "off";
    "@typescript-eslint/no-loop-func": "error";
    "no-magic-numbers": "off";
    "@typescript-eslint/no-magic-numbers": "off";
    "no-redeclare": "off";
    "@typescript-eslint/no-redeclare": "error";
    "no-restricted-imports": "off";
    "@typescript-eslint/no-restricted-imports": "off";
    "no-shadow": "off";
    "@typescript-eslint/no-shadow": "error";
    "no-unused-expressions": "off";
    "@typescript-eslint/no-unused-expressions": "off";
    "no-unused-vars": "off";
    "@typescript-eslint/no-unused-vars": ["error", {
      vars: string;
      args: string;
      ignoreRestSiblings: boolean;
    }];
    "no-use-before-define": "off";
    "@typescript-eslint/no-use-before-define": ["error", {
      functions: boolean;
      classes: boolean;
    }];
    "no-useless-constructor": "off";
    "@typescript-eslint/no-useless-constructor": "error";
    "@typescript-eslint/ban-ts-comment": "off";
    "@typescript-eslint/consistent-type-imports": "error";
    "@typescript-eslint/explicit-function-return-type": "warn";
    "@typescript-eslint/explicit-member-accessibility": "off";
    "@typescript-eslint/explicit-module-boundary-types": ["warn"];
    "@typescript-eslint/member-ordering": "off";
    "@typescript-eslint/method-signature-style": ["off", string];
    "@typescript-eslint/no-duplicate-enum-values": "error";
    "@typescript-eslint/no-dynamic-delete": "warn";
    "@typescript-eslint/no-empty-object-type": ["warn", {
      allowInterfaces: string;
    }];
    "@typescript-eslint/no-explicit-any": ["warn", {
      ignoreRestArgs: boolean;
    }];
    "@typescript-eslint/no-extra-non-null-assertion": "error";
    "@typescript-eslint/no-extraneous-class": "off";
    "@typescript-eslint/no-import-type-side-effects": "error";
    "@typescript-eslint/no-invalid-void-type": "warn";
    "@typescript-eslint/no-misused-new": "error";
    "@typescript-eslint/no-namespace": ["error", {
      allowDeclarations: boolean;
      allowDefinitionFiles: boolean;
    }];
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error";
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error";
    "@typescript-eslint/no-non-null-assertion": "off";
    "@typescript-eslint/no-require-imports": "warn";
    "@typescript-eslint/no-restricted-types": "off";
    "@typescript-eslint/no-this-alias": "error";
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": "warn";
    "@typescript-eslint/no-unnecessary-type-constraint": "warn";
    "@typescript-eslint/no-unsafe-declaration-merging": "error";
    "@typescript-eslint/no-unsafe-function-type": "error";
    "@typescript-eslint/no-useless-empty-export": "error";
    "@typescript-eslint/no-wrapper-object-types": "warn";
    "@typescript-eslint/parameter-properties": "off";
    "@typescript-eslint/prefer-as-const": "warn";
    "@typescript-eslint/prefer-enum-initializers": "error";
    "@typescript-eslint/prefer-literal-enum-member": "error";
    "@typescript-eslint/prefer-namespace-keyword": "off";
    "@typescript-eslint/triple-slash-reference": ["error", {
      types: string;
    }];
    "@typescript-eslint/unified-signatures": "off";
    "@typescript-eslint/adjacent-overload-signatures": "error";
    "@typescript-eslint/array-type": ["error", {
      default: string;
    }];
    "@typescript-eslint/ban-tslint-comment": "error";
    "@typescript-eslint/class-literal-property-style": "off";
    "@typescript-eslint/consistent-generic-constructors": "error";
    "@typescript-eslint/consistent-indexed-object-style": "off";
    "@typescript-eslint/consistent-type-assertions": ["error", {
      assertionStyle: string;
    }];
    "@typescript-eslint/consistent-type-definitions": ["error", string];
    "@typescript-eslint/no-confusing-non-null-assertion": "error";
    "@typescript-eslint/no-inferrable-types": ["warn", {
      ignoreParameters: boolean;
      ignoreProperties: boolean;
    }];
    "@typescript-eslint/prefer-for-of": "warn";
    "@typescript-eslint/prefer-function-type": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "brace-style": "off";
    "comma-dangle": "off";
    "comma-spacing": "off";
    "default-param-last": "off";
    "dot-notation": "off";
    "func-call-spacing": "off";
    indent: "off";
    "init-declarations": "off";
    "keyword-spacing": "off";
    "lines-between-class-members": "off";
    "no-array-constructor": "off";
    "no-dupe-class-members": "off";
    "no-duplicate-imports": "off";
    "no-empty-function": "off";
    "no-extra-parens": "off";
    "no-extra-semi": "off";
    "no-implied-eval": "off";
    "no-invalid-this": "off";
    "no-loop-func": "off";
    "no-loss-of-precision": "off";
    "no-magic-numbers": "off";
    "no-redeclare": "off";
    "no-shadow": "off";
    "no-throw-literal": "off";
    "no-unused-expressions": "off";
    "no-unused-vars": "off";
    "no-use-before-define": "off";
    "no-useless-constructor": "off";
    quotes: "off";
    "require-await": "off";
    semi: "off";
    "space-before-function-paren": "off";
    "space-infix-ops": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "@typescript-eslint/explicit-function-return-type": "off";
  };
})[];
//#endregion
//#region src/vitest.d.ts
declare const _default$8: {
  name: string;
  files: string[];
  plugins: {
    vitest: {
      meta: {
        name: string;
        version: string;
      };
      rules: {
        "prefer-lowercase-title": eslint1108.Rule.RuleModule;
        "max-nested-describe": eslint1108.Rule.RuleModule;
        "no-identical-title": eslint1108.Rule.RuleModule;
        "no-focused-tests": eslint1108.Rule.RuleModule;
        "no-conditional-tests": eslint1108.Rule.RuleModule;
        "expect-expect": eslint1108.Rule.RuleModule;
        "consistent-test-it": eslint1108.Rule.RuleModule;
        "prefer-to-be": eslint1108.Rule.RuleModule;
        "no-hooks": eslint1108.Rule.RuleModule;
        "no-restricted-vi-methods": eslint1108.Rule.RuleModule;
        "consistent-test-filename": eslint1108.Rule.RuleModule;
        "max-expects": eslint1108.Rule.RuleModule;
        "no-alias-methods": eslint1108.Rule.RuleModule;
        "no-commented-out-tests": eslint1108.Rule.RuleModule;
        "no-conditional-expect": eslint1108.Rule.RuleModule;
        "no-conditional-in-test": eslint1108.Rule.RuleModule;
        "no-disabled-tests": eslint1108.Rule.RuleModule;
        "no-done-callback": eslint1108.Rule.RuleModule;
        "no-duplicate-hooks": eslint1108.Rule.RuleModule;
        "no-large-snapshots": eslint1108.Rule.RuleModule;
        "no-interpolation-in-snapshots": eslint1108.Rule.RuleModule;
        "no-mocks-import": eslint1108.Rule.RuleModule;
        "no-restricted-matchers": eslint1108.Rule.RuleModule;
        "no-standalone-expect": eslint1108.Rule.RuleModule;
        "no-test-prefixes": eslint1108.Rule.RuleModule;
        "no-test-return-statement": eslint1108.Rule.RuleModule;
        "no-import-node-test": eslint1108.Rule.RuleModule;
        "prefer-called-with": eslint1108.Rule.RuleModule;
        "valid-title": eslint1108.Rule.RuleModule;
        "valid-expect": eslint1108.Rule.RuleModule;
        "prefer-to-be-falsy": eslint1108.Rule.RuleModule;
        "prefer-to-be-object": eslint1108.Rule.RuleModule;
        "prefer-to-be-truthy": eslint1108.Rule.RuleModule;
        "prefer-to-have-length": eslint1108.Rule.RuleModule;
        "prefer-equality-matcher": eslint1108.Rule.RuleModule;
        "prefer-strict-equal": eslint1108.Rule.RuleModule;
        "prefer-expect-resolves": eslint1108.Rule.RuleModule;
        "prefer-each": eslint1108.Rule.RuleModule;
        "prefer-hooks-on-top": eslint1108.Rule.RuleModule;
        "prefer-hooks-in-order": eslint1108.Rule.RuleModule;
        "require-local-test-context-for-concurrent-snapshots": eslint1108.Rule.RuleModule;
        "prefer-mock-promise-shorthand": eslint1108.Rule.RuleModule;
        "prefer-vi-mocked": eslint1108.Rule.RuleModule;
        "prefer-snapshot-hint": eslint1108.Rule.RuleModule;
        "valid-describe-callback": eslint1108.Rule.RuleModule;
        "require-top-level-describe": eslint1108.Rule.RuleModule;
        "require-to-throw-message": eslint1108.Rule.RuleModule;
        "require-hook": eslint1108.Rule.RuleModule;
        "prefer-todo": eslint1108.Rule.RuleModule;
        "prefer-spy-on": eslint1108.Rule.RuleModule;
        "prefer-comparison-matcher": eslint1108.Rule.RuleModule;
        "prefer-describe-function-title": eslint1108.Rule.RuleModule;
        "prefer-to-contain": eslint1108.Rule.RuleModule;
        "prefer-expect-assertions": eslint1108.Rule.RuleModule;
        "padding-around-after-all-blocks": eslint1108.Rule.RuleModule;
        "padding-around-after-each-blocks": eslint1108.Rule.RuleModule;
        "padding-around-all": eslint1108.Rule.RuleModule;
        "padding-around-before-all-blocks": eslint1108.Rule.RuleModule;
        "padding-around-before-each-blocks": eslint1108.Rule.RuleModule;
        "padding-around-describe-blocks": eslint1108.Rule.RuleModule;
        "padding-around-expect-groups": eslint1108.Rule.RuleModule;
        "padding-around-test-blocks": eslint1108.Rule.RuleModule;
        "valid-expect-in-promise": eslint1108.Rule.RuleModule;
        "prefer-strict-boolean-matchers": eslint1108.Rule.RuleModule;
        "require-mock-type-parameters": eslint1108.Rule.RuleModule;
      };
      environments: {
        env: {
          globals: {
            suite: true;
            test: true;
            describe: true;
            it: true;
            expectTypeOf: true;
            assertType: true;
            expect: true;
            assert: true;
            chai: true;
            vitest: true;
            vi: true;
            beforeAll: true;
            afterAll: true;
            beforeEach: true;
            afterEach: true;
            onTestFailed: true;
            onTestFinished: true;
          };
        };
      };
      configs: {
        "legacy-recommended": {
          plugins: string[];
          rules: {};
        };
        "legacy-all": {
          plugins: string[];
          rules: {};
        };
        recommended: {
          name: string;
          plugins: {
            readonly vitest: eslint1108.ESLint.Plugin;
          };
          rules: {
            readonly "vitest/expect-expect": "error";
            readonly "vitest/no-identical-title": "error";
            readonly "vitest/no-commented-out-tests": "error";
            readonly "vitest/valid-title": "error";
            readonly "vitest/valid-expect": "error";
            readonly "vitest/valid-describe-callback": "error";
            readonly "vitest/require-local-test-context-for-concurrent-snapshots": "error";
            readonly "vitest/no-import-node-test": "error";
          };
        };
        all: {
          name: string;
          plugins: {
            readonly vitest: eslint1108.ESLint.Plugin;
          };
          rules: {
            readonly "vitest/prefer-lowercase-title": "warn";
            readonly "vitest/max-nested-describe": "warn";
            readonly "vitest/no-focused-tests": "warn";
            readonly "vitest/no-conditional-tests": "warn";
            readonly "vitest/consistent-test-it": "warn";
            readonly "vitest/no-hooks": "warn";
            readonly "vitest/no-restricted-vi-methods": "warn";
            readonly "vitest/consistent-test-filename": "warn";
            readonly "vitest/max-expects": "warn";
            readonly "vitest/no-alias-methods": "warn";
            readonly "vitest/no-conditional-expect": "warn";
            readonly "vitest/no-conditional-in-test": "warn";
            readonly "vitest/no-disabled-tests": "warn";
            readonly "vitest/no-done-callback": "warn";
            readonly "vitest/no-duplicate-hooks": "warn";
            readonly "vitest/no-large-snapshots": "warn";
            readonly "vitest/no-interpolation-in-snapshots": "warn";
            readonly "vitest/no-mocks-import": "warn";
            readonly "vitest/no-restricted-matchers": "warn";
            readonly "vitest/no-standalone-expect": "warn";
            readonly "vitest/no-test-prefixes": "warn";
            readonly "vitest/no-test-return-statement": "warn";
            readonly "vitest/prefer-called-with": "warn";
            readonly "vitest/prefer-to-be-falsy": "off";
            readonly "vitest/prefer-to-be-object": "warn";
            readonly "vitest/prefer-to-be-truthy": "off";
            readonly "vitest/prefer-to-have-length": "warn";
            readonly "vitest/prefer-equality-matcher": "warn";
            readonly "vitest/prefer-strict-equal": "warn";
            readonly "vitest/prefer-expect-resolves": "warn";
            readonly "vitest/prefer-each": "warn";
            readonly "vitest/prefer-hooks-on-top": "warn";
            readonly "vitest/prefer-hooks-in-order": "warn";
            readonly "vitest/prefer-mock-promise-shorthand": "warn";
            readonly "vitest/prefer-vi-mocked": "warn";
            readonly "vitest/prefer-snapshot-hint": "warn";
            readonly "vitest/require-top-level-describe": "warn";
            readonly "vitest/require-to-throw-message": "warn";
            readonly "vitest/require-hook": "warn";
            readonly "vitest/prefer-todo": "warn";
            readonly "vitest/prefer-spy-on": "warn";
            readonly "vitest/prefer-comparison-matcher": "warn";
            readonly "vitest/prefer-describe-function-title": "warn";
            readonly "vitest/prefer-to-contain": "warn";
            readonly "vitest/prefer-expect-assertions": "warn";
            readonly "vitest/prefer-to-be": "warn";
            readonly "vitest/padding-around-after-all-blocks": "warn";
            readonly "vitest/padding-around-after-each-blocks": "warn";
            readonly "vitest/padding-around-all": "warn";
            readonly "vitest/padding-around-before-all-blocks": "warn";
            readonly "vitest/padding-around-before-each-blocks": "warn";
            readonly "vitest/padding-around-describe-blocks": "warn";
            readonly "vitest/padding-around-expect-groups": "warn";
            readonly "vitest/padding-around-test-blocks": "warn";
            readonly "vitest/valid-expect-in-promise": "warn";
            readonly "vitest/expect-expect": "warn";
            readonly "vitest/no-identical-title": "warn";
            readonly "vitest/no-commented-out-tests": "warn";
            readonly "vitest/valid-title": "warn";
            readonly "vitest/valid-expect": "warn";
            readonly "vitest/valid-describe-callback": "warn";
            readonly "vitest/require-local-test-context-for-concurrent-snapshots": "warn";
            readonly "vitest/no-import-node-test": "warn";
            readonly "vitest/prefer-strict-boolean-matchers": "warn";
            readonly "vitest/require-mock-type-parameters": "warn";
          };
        };
        env: {
          name: string;
          languageOptions: {
            globals: {
              suite: "writable";
              test: "writable";
              describe: "writable";
              it: "writable";
              expectTypeOf: "writable";
              assertType: "writable";
              expect: "writable";
              assert: "writable";
              chai: "writable";
              vitest: "writable";
              vi: "writable";
              beforeAll: "writable";
              afterAll: "writable";
              beforeEach: "writable";
              afterEach: "writable";
              onTestFailed: "writable";
              onTestFinished: "writable";
            };
          };
        };
      };
    };
  };
  rules: {
    "vitest/consistent-test-filename": "off";
    "vitest/consistent-test-it": "error";
    "vitest/expect-expect": ["error", {
      assertFunctionNames: string[];
    }];
    "vitest/max-expects": "off";
    "vitest/max-nested-describe": "off";
    "vitest/no-alias-methods": "warn";
    "vitest/no-commented-out-tests": "warn";
    "vitest/no-conditional-expect": "warn";
    "vitest/no-conditional-in-test": "warn";
    "vitest/no-conditional-tests": "warn";
    "vitest/no-disabled-tests": "warn";
    "vitest/no-duplicate-hooks": "error";
    "vitest/no-focused-tests": "error";
    "vitest/no-hooks": "off";
    "vitest/no-identical-title": "error";
    "vitest/no-import-node-test": "error";
    "vitest/no-interpolation-in-snapshots": "error";
    "vitest/no-large-snapshots": ["warn", {
      maxSize: number;
    }];
    "vitest/no-mocks-import": "error";
    "vitest/no-restricted-matchers": "off";
    "vitest/no-restricted-vi-methods": "warn";
    "vitest/no-standalone-expect": "error";
    "vitest/no-test-prefixes": "error";
    "vitest/no-test-return-statement": "error";
    "vitest/prefer-called-with": "warn";
    "vitest/prefer-comparison-matcher": "warn";
    "vitest/prefer-describe-function-title": "off";
    "vitest/prefer-each": "warn";
    "vitest/prefer-equality-matcher": "warn";
    "vitest/prefer-expect-assertions": "off";
    "vitest/prefer-expect-resolves": "warn";
    "vitest/prefer-hooks-in-order": "warn";
    "vitest/prefer-hooks-on-top": "warn";
    "vitest/prefer-lowercase-title": "warn";
    "vitest/prefer-mock-promise-shorthand": "warn";
    "vitest/prefer-snapshot-hint": "warn";
    "vitest/prefer-spy-on": "warn";
    "vitest/prefer-strict-boolean-matchers": "warn";
    "vitest/prefer-strict-equal": "warn";
    "vitest/prefer-to-be": "warn";
    "vitest/prefer-to-be-falsy": "warn";
    "vitest/prefer-to-be-object": "warn";
    "vitest/prefer-to-be-truthy": "warn";
    "vitest/prefer-to-contain": "warn";
    "vitest/prefer-to-have-length": "warn";
    "vitest/prefer-todo": "warn";
    "vitest/prefer-vi-mocked": "warn";
    "vitest/require-local-test-context-for-concurrent-snapshots": "warn";
    "vitest/require-mock-type-parameters": "warn";
    "vitest/require-to-throw-message": "error";
    "vitest/require-top-level-describe": "error";
    "vitest/valid-describe-callback": "error";
    "vitest/valid-expect": "error";
    "vitest/valid-expect-in-promise": "error";
    "vitest/valid-title": "error";
  };
}[];
//#endregion
//#region src/index.d.ts
declare const _default$1: ({
  name: string;
  languageOptions: {
    parser: _typescript_eslint_utils_ts_eslint0.Parser.LooseParserModule;
    parserOptions: {
      projectService: {
        allowDefaultProject: string[];
      };
      tsconfigRootDir: string;
    };
  };
  files?: undefined;
  rules?: undefined;
} | {
  name: string;
  files: string[];
  rules: {
    "unicode-bom": "off";
    "accessor-pairs": "error";
    "arrow-body-style": ["error", "as-needed"];
    "block-scoped-var": "error";
    camelcase: ["error", {
      properties: "never";
    }];
    "capitalized-comments": "off";
    "class-methods-use-this": "off";
    complexity: "off";
    "consistent-return": "off";
    "consistent-this": "off";
    curly: ["error", "multi-line"];
    "default-case": "error";
    "default-case-last": "error";
    "default-param-last": "error";
    "dot-notation": ["error", {
      allowKeywords: true;
    }];
    eqeqeq: ["error", "smart"];
    "func-name-matching": "off";
    "func-names": "off";
    "func-style": ["error", "declaration", {
      allowArrowFunctions: true;
    }];
    "grouped-accessor-pairs": "error";
    "guard-for-in": "error";
    "id-denylist": "off";
    "id-length": "off";
    "id-match": "off";
    "init-declarations": "off";
    "logical-assignment-operators": ["error", "always", {
      enforceForIfStatements: true;
    }];
    "max-classes-per-file": "off";
    "max-depth": "off";
    "max-lines": "off";
    "max-lines-per-function": "off";
    "max-nested-callbacks": "off";
    "max-params": "off";
    "max-statements": "off";
    "new-cap": ["error", {
      newIsCap: true;
    }];
    "no-alert": "error";
    "no-array-constructor": "off";
    "no-bitwise": ["error", {
      allow: string[];
    }];
    "no-caller": "error";
    "no-case-declarations": "error";
    "no-confusing-arrow": "off";
    "no-console": "warn";
    "no-continue": "error";
    "no-delete-var": "error";
    "no-div-regex": "error";
    "no-else-return": "error";
    "no-empty": "error";
    "no-empty-function": ["error", {
      allow: ("arrowFunctions" | "constructors")[];
    }];
    "no-empty-static-block": "error";
    "no-eq-null": "error";
    "no-eval": "error";
    "no-extend-native": "error";
    "no-extra-bind": "error";
    "no-extra-boolean-cast": "error";
    "no-extra-label": "error";
    "no-global-assign": "error";
    "no-implicit-coercion": "off";
    "no-implicit-globals": "off";
    "no-implied-eval": "error";
    "no-inline-comments": "off";
    "no-invalid-this": "off";
    "no-iterator": "error";
    "no-label-var": "error";
    "no-labels": "error";
    "no-lone-blocks": "error";
    "no-lonely-if": "error";
    "no-loop-func": "error";
    "no-magic-numbers": "off";
    "no-multi-assign": "error";
    "no-multi-str": "error";
    "no-negated-condition": "error";
    "no-nested-ternary": "off";
    "no-new": "error";
    "no-new-func": "error";
    "no-new-wrappers": "error";
    "no-nonoctal-decimal-escape": "error";
    "no-object-constructor": "error";
    "no-octal": "error";
    "no-octal-escape": "error";
    "no-param-reassign": "error";
    "no-plusplus": "off";
    "no-proto": "error";
    "no-redeclare": "error";
    "no-regex-spaces": "error";
    "no-restricted-exports": "off";
    "no-restricted-globals": "off";
    "no-restricted-imports": "off";
    "no-restricted-properties": "off";
    "no-restricted-syntax": "off";
    "no-return-assign": ["error", "always"];
    "no-script-url": "error";
    "no-sequences": "error";
    "no-shadow": "error";
    "no-shadow-restricted-names": "error";
    "no-ternary": "off";
    "no-throw-literal": "error";
    "no-undef-init": "error";
    "no-undefined": "error";
    "no-underscore-dangle": "off";
    "no-unneeded-ternary": "error";
    "no-unused-expressions": "off";
    "no-unused-labels": "error";
    "no-useless-call": "error";
    "no-useless-catch": "error";
    "no-useless-computed-key": "error";
    "no-useless-concat": "error";
    "no-useless-constructor": "error";
    "no-useless-escape": "error";
    "no-useless-rename": "error";
    "no-useless-return": "error";
    "no-var": "error";
    "no-void": ["error", {
      allowAsStatement: true;
    }];
    "no-warning-comments": "off";
    "no-with": "error";
    "object-shorthand": ["error", "properties"];
    "one-var": ["error", "never"];
    "operator-assignment": ["error", "always"];
    "prefer-arrow-callback": "error";
    "prefer-const": "off";
    "prefer-destructuring": "off";
    "prefer-exponentiation-operator": "error";
    "prefer-named-capture-group": "warn";
    "prefer-numeric-literals": "error";
    "prefer-object-has-own": "error";
    "prefer-object-spread": "error";
    "prefer-promise-reject-errors": "error";
    "prefer-regex-literals": "error";
    "prefer-rest-params": "error";
    "prefer-spread": "error";
    "prefer-template": "error";
    radix: "error";
    "require-await": "error";
    "require-unicode-regexp": "off";
    "require-yield": "error";
    "sort-imports": "off";
    "sort-keys": "off";
    "sort-vars": "off";
    strict: ["error", "never"];
    "symbol-description": "error";
    "vars-on-top": "error";
    yoda: "error";
    "array-callback-return": ["warn", {
      allowImplicit: true;
      checkForEach: true;
    }];
    "constructor-super": "error";
    "for-direction": "error";
    "getter-return": "error";
    "no-async-promise-executor": "error";
    "no-await-in-loop": "error";
    "no-class-assign": "error";
    "no-compare-neg-zero": "error";
    "no-cond-assign": ["error", "always"];
    "no-const-assign": "error";
    "no-constant-binary-expression": "error";
    "no-constant-condition": "warn";
    "no-constructor-return": "error";
    "no-control-regex": "error";
    "no-debugger": "warn";
    "no-dupe-args": "error";
    "no-dupe-class-members": "error";
    "no-dupe-else-if": "error";
    "no-dupe-keys": "error";
    "no-duplicate-case": "error";
    "no-duplicate-imports": ["error", {
      includeExports: true;
    }];
    "no-empty-character-class": "error";
    "no-empty-pattern": "error";
    "no-ex-assign": "error";
    "no-fallthrough": "error";
    "no-func-assign": "error";
    "no-import-assign": "error";
    "no-inner-declarations": "error";
    "no-invalid-regexp": "error";
    "no-irregular-whitespace": "error";
    "no-loss-of-precision": "error";
    "no-misleading-character-class": "error";
    "no-new-native-nonconstructor": "warn";
    "no-obj-calls": "error";
    "no-promise-executor-return": "error";
    "no-prototype-builtins": "error";
    "no-self-assign": "error";
    "no-self-compare": "error";
    "no-setter-return": "error";
    "no-sparse-arrays": "error";
    "no-template-curly-in-string": "error";
    "no-this-before-super": "error";
    "no-unassigned-vars": "error";
    "no-undef": "error";
    "no-unexpected-multiline": "off";
    "no-unmodified-loop-condition": "warn";
    "no-unreachable": "error";
    "no-unreachable-loop": "error";
    "no-unsafe-finally": "error";
    "no-unsafe-negation": "error";
    "no-unsafe-optional-chaining": "error";
    "no-unused-private-class-members": "warn";
    "no-unused-vars": "warn";
    "no-use-before-define": ["error", {
      functions: false;
    }];
    "no-useless-assignment": "error";
    "no-useless-backreference": "error";
    "require-atomic-updates": "error";
    "use-isnan": "error";
    "valid-typeof": "error";
  };
  languageOptions?: undefined;
} | {
  name: string;
  files: string[];
  rules: {
    "no-console": "off";
    "no-undefined": "off";
  };
  languageOptions?: undefined;
} | ({
  name: string;
  plugins: {
    "import-x": {
      meta: {
        name: string;
        version: string;
      };
      rules: {
        "no-unresolved": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_no_unresolved1.MessageId, [(eslint_plugin_import_x_rules_no_unresolved1.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        named: _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_named6.MessageId, [(eslint_plugin_import_x_utils3.ModuleOptions | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        default: _typescript_eslint_utils_ts_eslint0.RuleModule<"noDefaultExport", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        namespace: _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_namespace14.MessageId, [eslint_plugin_import_x_rules_namespace14.Options], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-namespace": _typescript_eslint_utils_ts_eslint0.RuleModule<"noNamespace", [(eslint_plugin_import_x_rules_no_namespace19.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        export: _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_export23.MessageId, [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-mutable-exports": _typescript_eslint_utils_ts_eslint0.RuleModule<"noMutable", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        extensions: _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_extensions30.MessageId, eslint_plugin_import_x_rules_extensions30.Options, eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-restricted-paths": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_no_restricted_paths35.MessageId, [(eslint_plugin_import_x_rules_no_restricted_paths35.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-internal-modules": _typescript_eslint_utils_ts_eslint0.RuleModule<"noAllowed", [(eslint_plugin_import_x_rules_no_internal_modules40.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "group-exports": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_group_exports44.MessageId, [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-relative-packages": _typescript_eslint_utils_ts_eslint0.RuleModule<"noAllowed", [(eslint_plugin_import_x_utils3.ModuleOptions | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-relative-parent-imports": _typescript_eslint_utils_ts_eslint0.RuleModule<"noAllowed", [(eslint_plugin_import_x_utils3.ModuleOptions | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "consistent-type-specifier-style": _typescript_eslint_utils_ts_eslint0.RuleModule<"inline" | "topLevel", [(eslint_plugin_import_x_rules_consistent_type_specifier_style56.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-self-import": _typescript_eslint_utils_ts_eslint0.RuleModule<"self", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-cycle": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_no_cycle63.MessageId, [(eslint_plugin_import_x_rules_no_cycle63.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-named-default": _typescript_eslint_utils_ts_eslint0.RuleModule<"default", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-named-as-default": _typescript_eslint_utils_ts_eslint0.RuleModule<"default", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-named-as-default-member": _typescript_eslint_utils_ts_eslint0.RuleModule<"member", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-anonymous-default-export": _typescript_eslint_utils_ts_eslint0.RuleModule<"assign" | "anonymous", [(eslint_plugin_import_x_rules_no_anonymous_default_export77.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-rename-default": _typescript_eslint_utils_ts_eslint0.RuleModule<"renameDefault", [(eslint_plugin_import_x_rules_no_rename_default81.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-unused-modules": _typescript_eslint_utils_ts_eslint0.RuleModule<"notFound" | "unused", eslint_plugin_import_x_rules_no_unused_modules85.Options[], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-commonjs": _typescript_eslint_utils_ts_eslint0.RuleModule<"import" | "export", [(eslint_plugin_import_x_rules_no_commonjs89.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-amd": _typescript_eslint_utils_ts_eslint0.RuleModule<"amd", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-duplicates": _typescript_eslint_utils_ts_eslint0.RuleModule<"duplicate", [(eslint_plugin_import_x_rules_no_duplicates96.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        first: _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_first100.MessageId, [(eslint_plugin_import_x_rules_first100.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "max-dependencies": _typescript_eslint_utils_ts_eslint0.RuleModule<"max", [(eslint_plugin_import_x_rules_max_dependencies105.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-extraneous-dependencies": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_no_extraneous_dependencies109.MessageId, [(eslint_plugin_import_x_rules_no_extraneous_dependencies109.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-absolute-path": _typescript_eslint_utils_ts_eslint0.RuleModule<"absolute", [(eslint_plugin_import_x_utils3.ModuleOptions | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-nodejs-modules": _typescript_eslint_utils_ts_eslint0.RuleModule<"builtin", [(eslint_plugin_import_x_rules_no_nodejs_modules118.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-webpack-loader-syntax": _typescript_eslint_utils_ts_eslint0.RuleModule<"unexpected", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        order: _typescript_eslint_utils_ts_eslint0.RuleModule<"error" | "order" | "noLineWithinGroup" | "noLineBetweenGroups" | "oneLineBetweenGroups" | "oneLineBetweenTheMultiLineImport" | "oneLineBetweenThisMultiLineImport" | "noLineBetweenSingleLineImport", [(eslint_plugin_import_x_rules_order125.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "newline-after-import": _typescript_eslint_utils_ts_eslint0.RuleModule<"newline", [(eslint_plugin_import_x_rules_newline_after_import129.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "prefer-default-export": _typescript_eslint_utils_ts_eslint0.RuleModule<"any" | "single", [(eslint_plugin_import_x_rules_prefer_default_export133.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-default-export": _typescript_eslint_utils_ts_eslint0.RuleModule<"preferNamed" | "noAliasDefault", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-named-export": _typescript_eslint_utils_ts_eslint0.RuleModule<"noAllowed", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-dynamic-require": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_no_dynamic_require143.MessageId, [(eslint_plugin_import_x_rules_no_dynamic_require143.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        unambiguous: _typescript_eslint_utils_ts_eslint0.RuleModule<"module", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-unassigned-import": _typescript_eslint_utils_ts_eslint0.RuleModule<"unassigned", [(eslint_plugin_import_x_rules_no_unassigned_import151.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-useless-path-segments": _typescript_eslint_utils_ts_eslint0.RuleModule<"useless", [(eslint_plugin_import_x_rules_no_useless_path_segments155.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "dynamic-import-chunkname": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_dynamic_import_chunkname159.MessageId, [(eslint_plugin_import_x_rules_dynamic_import_chunkname159.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-import-module-exports": _typescript_eslint_utils_ts_eslint0.RuleModule<"notAllowed", [(eslint_plugin_import_x_rules_no_import_module_exports164.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-empty-named-blocks": _typescript_eslint_utils_ts_eslint0.RuleModule<"emptyNamed" | "unused" | "emptyImport", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "exports-last": _typescript_eslint_utils_ts_eslint0.RuleModule<"end", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "no-deprecated": _typescript_eslint_utils_ts_eslint0.RuleModule<"deprecated" | "deprecatedDesc", [], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
        "imports-first": _typescript_eslint_utils_ts_eslint0.RuleModule<eslint_plugin_import_x_rules_first100.MessageId, [(eslint_plugin_import_x_rules_first100.Options | undefined)?], eslint_plugin_import_x_utils3.ImportXPluginDocs, _typescript_eslint_utils_ts_eslint0.RuleListener>;
      };
      cjsRequire: eslint_plugin_import_x182.CjsRequire;
      importXResolverCompat: typeof eslint_plugin_import_x182.importXResolverCompat;
      createNodeResolver: typeof eslint_plugin_import_x182.createNodeResolver;
    } & {
      flatConfigs: {
        recommended: eslint_plugin_import_x182.PluginFlatConfig;
        errors: eslint_plugin_import_x182.PluginFlatConfig;
        warnings: eslint_plugin_import_x182.PluginFlatConfig;
        'stage-0': eslint_plugin_import_x182.PluginFlatConfig;
        react: eslint_plugin_import_x182.PluginFlatConfig;
        'react-native': eslint_plugin_import_x182.PluginFlatConfig;
        electron: eslint_plugin_import_x182.PluginFlatConfig;
        typescript: eslint_plugin_import_x182.PluginFlatConfig;
      };
      configs: {
        recommended: {
          plugins: ["import-x"];
          rules: {
            "import-x/no-unresolved": "error";
            "import-x/named": "error";
            "import-x/namespace": "error";
            "import-x/default": "error";
            "import-x/export": "error";
            "import-x/no-named-as-default": "warn";
            "import-x/no-named-as-default-member": "warn";
            "import-x/no-duplicates": "warn";
          };
          parserOptions: {
            sourceType: "module";
            ecmaVersion: 2018;
          };
        };
        errors: {
          plugins: ["import-x"];
          rules: {
            "import-x/no-unresolved": 2;
            "import-x/named": 2;
            "import-x/namespace": 2;
            "import-x/default": 2;
            "import-x/export": 2;
          };
        };
        warnings: {
          plugins: ["import-x"];
          rules: {
            "import-x/no-named-as-default": 1;
            "import-x/no-named-as-default-member": 1;
            "import-x/no-rename-default": 1;
            "import-x/no-duplicates": 1;
          };
        };
        'stage-0': eslint_plugin_import_x182.PluginConfig;
        react: {
          settings: {
            "import-x/extensions": (".js" | ".jsx")[];
          };
          parserOptions: {
            ecmaFeatures: {
              jsx: true;
            };
          };
        };
        'react-native': {
          settings: {
            "import-x/resolver": {
              node: {
                extensions: string[];
              };
            };
          };
        };
        electron: {
          settings: {
            "import-x/core-modules": string[];
          };
        };
        typescript: {
          settings: {
            "import-x/extensions": readonly [".ts", ".tsx", ".cts", ".mts", ".js", ".jsx", ".cjs", ".mjs"];
            "import-x/external-module-folders": string[];
            "import-x/parsers": {
              "@typescript-eslint/parser": (".ts" | ".tsx" | ".cts" | ".mts")[];
            };
            "import-x/resolver": {
              typescript: true;
            };
          };
          rules: {
            "import-x/named": "off";
          };
        };
        'flat/recommended': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/errors': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/warnings': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/stage-0': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/react': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/react-native': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/electron': eslint_plugin_import_x182.PluginFlatConfig;
        'flat/typescript': eslint_plugin_import_x182.PluginFlatConfig;
      };
    };
  };
  settings: {
    "import-x/extensions": string[];
    "import-x/resolver-next": ({
      interfaceVersion: number;
      name: string;
      resolve(source: string, file: string): eslint_import_context202.ResolvedResult;
    } | eslint_import_context202.NewResolver)[];
  };
  rules: {
    "import-x/export": "error";
    "import-x/no-deprecated": "error";
    "import-x/no-empty-named-blocks": "warn";
    "import-x/no-extraneous-dependencies": "off";
    "import-x/no-mutable-exports": "error";
    "import-x/no-named-as-default": "warn";
    "import-x/no-named-as-default-member": "warn";
    "import-x/no-unused-modules": "error";
    "import-x/no-amd": "off";
    "import-x/no-commonjs": "off";
    "import-x/no-nodejs-modules": "off";
    "import-x/no-import-module-exports": "warn";
    "import-x/unambiguous": "off";
    "import-x/default": "error";
    "import-x/named": "error";
    "import-x/namespace": "error";
    "import-x/no-absolute-path": "error";
    "import-x/no-cycle": "warn";
    "import-x/no-dynamic-require": "error";
    "import-x/no-internal-modules": "off";
    "import-x/no-relative-packages": "warn";
    "import-x/no-relative-parent-imports": "off";
    "import-x/no-restricted-paths": "off";
    "import-x/no-self-import": "error";
    "import-x/no-unresolved": ["error", {
      commonjs: boolean;
      ignore: string[];
    }];
    "import-x/no-useless-path-segments": ["error", {
      noUselessIndex: boolean;
    }];
    "import-x/no-webpack-loader-syntax": "error";
    "import-x/consistent-type-specifier-style": "off";
    "import-x/dynamic-import-chunkname": "off";
    "import-x/exports-last": "off";
    "import-x/extensions": "off";
    "import-x/first": ["error", string];
    "import-x/group-exports": "off";
    "import-x/max-dependencies": "off";
    "import-x/newline-after-import": "error";
    "import-x/no-anonymous-default-export": "warn";
    "import-x/no-default-export": "warn";
    "import-x/no-duplicates": "error";
    "import-x/no-named-default": "off";
    "import-x/no-named-export": "off";
    "import-x/no-namespace": "off";
    "import-x/no-unassigned-import": "off";
    "import-x/order": ["error", {
      "newlines-between": string;
      pathGroups: {
        pattern: string;
        group: string;
      }[];
      groups: (string | string[])[];
    }];
    "import-x/prefer-default-export": "off";
  };
  files?: undefined;
} | {
  name: string;
  files: string[];
  rules: {
    "import-x/no-default-export": "off";
    "import-x/no-anonymous-default-export": "off";
    "import-x/export"?: undefined;
    "import-x/no-deprecated"?: undefined;
    "import-x/no-empty-named-blocks"?: undefined;
    "import-x/no-extraneous-dependencies"?: undefined;
    "import-x/no-mutable-exports"?: undefined;
    "import-x/no-named-as-default"?: undefined;
    "import-x/no-named-as-default-member"?: undefined;
    "import-x/no-unused-modules"?: undefined;
    "import-x/no-amd"?: undefined;
    "import-x/no-commonjs"?: undefined;
    "import-x/no-nodejs-modules"?: undefined;
    "import-x/no-import-module-exports"?: undefined;
    "import-x/unambiguous"?: undefined;
    "import-x/default"?: undefined;
    "import-x/named"?: undefined;
    "import-x/namespace"?: undefined;
    "import-x/no-absolute-path"?: undefined;
    "import-x/no-cycle"?: undefined;
    "import-x/no-dynamic-require"?: undefined;
    "import-x/no-internal-modules"?: undefined;
    "import-x/no-relative-packages"?: undefined;
    "import-x/no-relative-parent-imports"?: undefined;
    "import-x/no-restricted-paths"?: undefined;
    "import-x/no-self-import"?: undefined;
    "import-x/no-unresolved"?: undefined;
    "import-x/no-useless-path-segments"?: undefined;
    "import-x/no-webpack-loader-syntax"?: undefined;
    "import-x/consistent-type-specifier-style"?: undefined;
    "import-x/dynamic-import-chunkname"?: undefined;
    "import-x/exports-last"?: undefined;
    "import-x/extensions"?: undefined;
    "import-x/first"?: undefined;
    "import-x/group-exports"?: undefined;
    "import-x/max-dependencies"?: undefined;
    "import-x/newline-after-import"?: undefined;
    "import-x/no-duplicates"?: undefined;
    "import-x/no-named-default"?: undefined;
    "import-x/no-named-export"?: undefined;
    "import-x/no-namespace"?: undefined;
    "import-x/no-unassigned-import"?: undefined;
    "import-x/order"?: undefined;
    "import-x/prefer-default-export"?: undefined;
  };
  plugins?: undefined;
  settings?: undefined;
})[] | {
  name: string;
  plugins: {
    promise: any;
  };
  rules: {
    "promise/always-return": "error";
    "promise/avoid-new": "off";
    "promise/catch-or-return": ["error", {
      terminationMethod: string[];
    }];
    "promise/no-callback-in-promise": "warn";
    "promise/no-multiple-resolved": "error";
    "promise/no-native": "off";
    "promise/no-nesting": "warn";
    "promise/no-new-statics": "error";
    "promise/no-promise-in-callback": "warn";
    "promise/no-return-in-finally": "error";
    "promise/no-return-wrap": "error";
    "promise/param-names": "error";
    "promise/prefer-await-to-callbacks": "error";
    "promise/prefer-await-to-then": "error";
    "promise/valid-params": "error";
  };
} | ({
  name: string;
  files: string[];
  languageOptions: {
    parserOptions: {
      ecmaFeatures: {
        jsx: true;
        modules: boolean;
      };
      sourceType: "module";
    };
    globals: {
      AbortController: false;
      AbortSignal: false;
      AbsoluteOrientationSensor: false;
      AbstractRange: false;
      Accelerometer: false;
      addEventListener: false;
      ai: false;
      AI: false;
      AICreateMonitor: false;
      AITextSession: false;
      alert: false;
      AnalyserNode: false;
      Animation: false;
      AnimationEffect: false;
      AnimationEvent: false;
      AnimationPlaybackEvent: false;
      AnimationTimeline: false;
      AsyncDisposableStack: false;
      atob: false;
      Attr: false;
      Audio: false;
      AudioBuffer: false;
      AudioBufferSourceNode: false;
      AudioContext: false;
      AudioData: false;
      AudioDecoder: false;
      AudioDestinationNode: false;
      AudioEncoder: false;
      AudioListener: false;
      AudioNode: false;
      AudioParam: false;
      AudioParamMap: false;
      AudioProcessingEvent: false;
      AudioScheduledSourceNode: false;
      AudioSinkInfo: false;
      AudioWorklet: false;
      AudioWorkletGlobalScope: false;
      AudioWorkletNode: false;
      AudioWorkletProcessor: false;
      AuthenticatorAssertionResponse: false;
      AuthenticatorAttestationResponse: false;
      AuthenticatorResponse: false;
      BackgroundFetchManager: false;
      BackgroundFetchRecord: false;
      BackgroundFetchRegistration: false;
      BarcodeDetector: false;
      BarProp: false;
      BaseAudioContext: false;
      BatteryManager: false;
      BeforeUnloadEvent: false;
      BiquadFilterNode: false;
      Blob: false;
      BlobEvent: false;
      Bluetooth: false;
      BluetoothCharacteristicProperties: false;
      BluetoothDevice: false;
      BluetoothRemoteGATTCharacteristic: false;
      BluetoothRemoteGATTDescriptor: false;
      BluetoothRemoteGATTServer: false;
      BluetoothRemoteGATTService: false;
      BluetoothUUID: false;
      blur: false;
      BroadcastChannel: false;
      BrowserCaptureMediaStreamTrack: false;
      btoa: false;
      ByteLengthQueuingStrategy: false;
      Cache: false;
      caches: false;
      CacheStorage: false;
      cancelAnimationFrame: false;
      cancelIdleCallback: false;
      CanvasCaptureMediaStream: false;
      CanvasCaptureMediaStreamTrack: false;
      CanvasGradient: false;
      CanvasPattern: false;
      CanvasRenderingContext2D: false;
      CaptureController: false;
      CaretPosition: false;
      CDATASection: false;
      ChannelMergerNode: false;
      ChannelSplitterNode: false;
      ChapterInformation: false;
      CharacterBoundsUpdateEvent: false;
      CharacterData: false;
      clearInterval: false;
      clearTimeout: false;
      clientInformation: false;
      Clipboard: false;
      ClipboardEvent: false;
      ClipboardItem: false;
      close: false;
      closed: false;
      CloseEvent: false;
      CloseWatcher: false;
      CommandEvent: false;
      Comment: false;
      CompositionEvent: false;
      CompressionStream: false;
      confirm: false;
      console: false;
      ConstantSourceNode: false;
      ContentVisibilityAutoStateChangeEvent: false;
      ConvolverNode: false;
      CookieChangeEvent: false;
      CookieDeprecationLabel: false;
      cookieStore: false;
      CookieStore: false;
      CookieStoreManager: false;
      CountQueuingStrategy: false;
      createImageBitmap: false;
      Credential: false;
      credentialless: false;
      CredentialsContainer: false;
      CropTarget: false;
      crossOriginIsolated: false;
      crypto: false;
      Crypto: false;
      CryptoKey: false;
      CSPViolationReportBody: false;
      CSS: false;
      CSSAnimation: false;
      CSSConditionRule: false;
      CSSContainerRule: false;
      CSSCounterStyleRule: false;
      CSSFontFaceRule: false;
      CSSFontFeatureValuesRule: false;
      CSSFontPaletteValuesRule: false;
      CSSGroupingRule: false;
      CSSImageValue: false;
      CSSImportRule: false;
      CSSKeyframeRule: false;
      CSSKeyframesRule: false;
      CSSKeywordValue: false;
      CSSLayerBlockRule: false;
      CSSLayerStatementRule: false;
      CSSMarginRule: false;
      CSSMathClamp: false;
      CSSMathInvert: false;
      CSSMathMax: false;
      CSSMathMin: false;
      CSSMathNegate: false;
      CSSMathProduct: false;
      CSSMathSum: false;
      CSSMathValue: false;
      CSSMatrixComponent: false;
      CSSMediaRule: false;
      CSSNamespaceRule: false;
      CSSNestedDeclarations: false;
      CSSNumericArray: false;
      CSSNumericValue: false;
      CSSPageDescriptors: false;
      CSSPageRule: false;
      CSSPerspective: false;
      CSSPositionTryDescriptors: false;
      CSSPositionTryRule: false;
      CSSPositionValue: false;
      CSSPropertyRule: false;
      CSSRotate: false;
      CSSRule: false;
      CSSRuleList: false;
      CSSScale: false;
      CSSScopeRule: false;
      CSSSkew: false;
      CSSSkewX: false;
      CSSSkewY: false;
      CSSStartingStyleRule: false;
      CSSStyleDeclaration: false;
      CSSStyleRule: false;
      CSSStyleSheet: false;
      CSSStyleValue: false;
      CSSSupportsRule: false;
      CSSTransformComponent: false;
      CSSTransformValue: false;
      CSSTransition: false;
      CSSTranslate: false;
      CSSUnitValue: false;
      CSSUnparsedValue: false;
      CSSVariableReferenceValue: false;
      CSSViewTransitionRule: false;
      currentFrame: false;
      currentTime: false;
      CustomElementRegistry: false;
      customElements: false;
      CustomEvent: false;
      CustomStateSet: false;
      DataTransfer: false;
      DataTransferItem: false;
      DataTransferItemList: false;
      DecompressionStream: false;
      DelayNode: false;
      DelegatedInkTrailPresenter: false;
      DeviceMotionEvent: false;
      DeviceMotionEventAcceleration: false;
      DeviceMotionEventRotationRate: false;
      DeviceOrientationEvent: false;
      devicePixelRatio: false;
      DevicePosture: false;
      dispatchEvent: false;
      DisposableStack: false;
      document: false;
      Document: false;
      DocumentFragment: false;
      documentPictureInPicture: false;
      DocumentPictureInPicture: false;
      DocumentPictureInPictureEvent: false;
      DocumentTimeline: false;
      DocumentType: false;
      DOMError: false;
      DOMException: false;
      DOMImplementation: false;
      DOMMatrix: false;
      DOMMatrixReadOnly: false;
      DOMParser: false;
      DOMPoint: false;
      DOMPointReadOnly: false;
      DOMQuad: false;
      DOMRect: false;
      DOMRectList: false;
      DOMRectReadOnly: false;
      DOMStringList: false;
      DOMStringMap: false;
      DOMTokenList: false;
      DragEvent: false;
      DynamicsCompressorNode: false;
      EditContext: false;
      Element: false;
      ElementInternals: false;
      EncodedAudioChunk: false;
      EncodedVideoChunk: false;
      ErrorEvent: false;
      event: false;
      Event: false;
      EventCounts: false;
      EventSource: false;
      EventTarget: false;
      external: false;
      External: false;
      EyeDropper: false;
      FeaturePolicy: false;
      FederatedCredential: false;
      fence: false;
      Fence: false;
      FencedFrameConfig: false;
      fetch: false;
      fetchLater: false;
      FetchLaterResult: false;
      File: false;
      FileList: false;
      FileReader: false;
      FileSystem: false;
      FileSystemDirectoryEntry: false;
      FileSystemDirectoryHandle: false;
      FileSystemDirectoryReader: false;
      FileSystemEntry: false;
      FileSystemFileEntry: false;
      FileSystemFileHandle: false;
      FileSystemHandle: false;
      FileSystemObserver: false;
      FileSystemWritableFileStream: false;
      find: false;
      focus: false;
      FocusEvent: false;
      FontData: false;
      FontFace: false;
      FontFaceSet: false;
      FontFaceSetLoadEvent: false;
      FormData: false;
      FormDataEvent: false;
      FragmentDirective: false;
      frameElement: false;
      frames: false;
      GainNode: false;
      Gamepad: false;
      GamepadAxisMoveEvent: false;
      GamepadButton: false;
      GamepadButtonEvent: false;
      GamepadEvent: false;
      GamepadHapticActuator: false;
      GamepadPose: false;
      Geolocation: false;
      GeolocationCoordinates: false;
      GeolocationPosition: false;
      GeolocationPositionError: false;
      getComputedStyle: false;
      getScreenDetails: false;
      getSelection: false;
      GPU: false;
      GPUAdapter: false;
      GPUAdapterInfo: false;
      GPUBindGroup: false;
      GPUBindGroupLayout: false;
      GPUBuffer: false;
      GPUBufferUsage: false;
      GPUCanvasContext: false;
      GPUColorWrite: false;
      GPUCommandBuffer: false;
      GPUCommandEncoder: false;
      GPUCompilationInfo: false;
      GPUCompilationMessage: false;
      GPUComputePassEncoder: false;
      GPUComputePipeline: false;
      GPUDevice: false;
      GPUDeviceLostInfo: false;
      GPUError: false;
      GPUExternalTexture: false;
      GPUInternalError: false;
      GPUMapMode: false;
      GPUOutOfMemoryError: false;
      GPUPipelineError: false;
      GPUPipelineLayout: false;
      GPUQuerySet: false;
      GPUQueue: false;
      GPURenderBundle: false;
      GPURenderBundleEncoder: false;
      GPURenderPassEncoder: false;
      GPURenderPipeline: false;
      GPUSampler: false;
      GPUShaderModule: false;
      GPUShaderStage: false;
      GPUSupportedFeatures: false;
      GPUSupportedLimits: false;
      GPUTexture: false;
      GPUTextureUsage: false;
      GPUTextureView: false;
      GPUUncapturedErrorEvent: false;
      GPUValidationError: false;
      GravitySensor: false;
      Gyroscope: false;
      HashChangeEvent: false;
      Headers: false;
      HID: false;
      HIDConnectionEvent: false;
      HIDDevice: false;
      HIDInputReportEvent: false;
      Highlight: false;
      HighlightRegistry: false;
      history: false;
      History: false;
      HTMLAllCollection: false;
      HTMLAnchorElement: false;
      HTMLAreaElement: false;
      HTMLAudioElement: false;
      HTMLBaseElement: false;
      HTMLBodyElement: false;
      HTMLBRElement: false;
      HTMLButtonElement: false;
      HTMLCanvasElement: false;
      HTMLCollection: false;
      HTMLDataElement: false;
      HTMLDataListElement: false;
      HTMLDetailsElement: false;
      HTMLDialogElement: false;
      HTMLDirectoryElement: false;
      HTMLDivElement: false;
      HTMLDListElement: false;
      HTMLDocument: false;
      HTMLElement: false;
      HTMLEmbedElement: false;
      HTMLFencedFrameElement: false;
      HTMLFieldSetElement: false;
      HTMLFontElement: false;
      HTMLFormControlsCollection: false;
      HTMLFormElement: false;
      HTMLFrameElement: false;
      HTMLFrameSetElement: false;
      HTMLHeadElement: false;
      HTMLHeadingElement: false;
      HTMLHRElement: false;
      HTMLHtmlElement: false;
      HTMLIFrameElement: false;
      HTMLImageElement: false;
      HTMLInputElement: false;
      HTMLLabelElement: false;
      HTMLLegendElement: false;
      HTMLLIElement: false;
      HTMLLinkElement: false;
      HTMLMapElement: false;
      HTMLMarqueeElement: false;
      HTMLMediaElement: false;
      HTMLMenuElement: false;
      HTMLMetaElement: false;
      HTMLMeterElement: false;
      HTMLModElement: false;
      HTMLObjectElement: false;
      HTMLOListElement: false;
      HTMLOptGroupElement: false;
      HTMLOptionElement: false;
      HTMLOptionsCollection: false;
      HTMLOutputElement: false;
      HTMLParagraphElement: false;
      HTMLParamElement: false;
      HTMLPictureElement: false;
      HTMLPreElement: false;
      HTMLProgressElement: false;
      HTMLQuoteElement: false;
      HTMLScriptElement: false;
      HTMLSelectedContentElement: false;
      HTMLSelectElement: false;
      HTMLSlotElement: false;
      HTMLSourceElement: false;
      HTMLSpanElement: false;
      HTMLStyleElement: false;
      HTMLTableCaptionElement: false;
      HTMLTableCellElement: false;
      HTMLTableColElement: false;
      HTMLTableElement: false;
      HTMLTableRowElement: false;
      HTMLTableSectionElement: false;
      HTMLTemplateElement: false;
      HTMLTextAreaElement: false;
      HTMLTimeElement: false;
      HTMLTitleElement: false;
      HTMLTrackElement: false;
      HTMLUListElement: false;
      HTMLUnknownElement: false;
      HTMLVideoElement: false;
      IDBCursor: false;
      IDBCursorWithValue: false;
      IDBDatabase: false;
      IDBFactory: false;
      IDBIndex: false;
      IDBKeyRange: false;
      IDBObjectStore: false;
      IDBOpenDBRequest: false;
      IDBRequest: false;
      IDBTransaction: false;
      IDBVersionChangeEvent: false;
      IdentityCredential: false;
      IdentityCredentialError: false;
      IdentityProvider: false;
      IdleDeadline: false;
      IdleDetector: false;
      IIRFilterNode: false;
      Image: false;
      ImageBitmap: false;
      ImageBitmapRenderingContext: false;
      ImageCapture: false;
      ImageData: false;
      ImageDecoder: false;
      ImageTrack: false;
      ImageTrackList: false;
      indexedDB: false;
      Ink: false;
      innerHeight: false;
      innerWidth: false;
      InputDeviceCapabilities: false;
      InputDeviceInfo: false;
      InputEvent: false;
      IntersectionObserver: false;
      IntersectionObserverEntry: false;
      isSecureContext: false;
      Keyboard: false;
      KeyboardEvent: false;
      KeyboardLayoutMap: false;
      KeyframeEffect: false;
      LanguageDetector: false;
      LargestContentfulPaint: false;
      LaunchParams: false;
      launchQueue: false;
      LaunchQueue: false;
      LayoutShift: false;
      LayoutShiftAttribution: false;
      length: false;
      LinearAccelerationSensor: false;
      localStorage: false;
      location: true;
      Location: false;
      locationbar: false;
      Lock: false;
      LockManager: false;
      matchMedia: false;
      MathMLElement: false;
      MediaCapabilities: false;
      MediaCapabilitiesInfo: false;
      MediaDeviceInfo: false;
      MediaDevices: false;
      MediaElementAudioSourceNode: false;
      MediaEncryptedEvent: false;
      MediaError: false;
      MediaKeyError: false;
      MediaKeyMessageEvent: false;
      MediaKeys: false;
      MediaKeySession: false;
      MediaKeyStatusMap: false;
      MediaKeySystemAccess: false;
      MediaList: false;
      MediaMetadata: false;
      MediaQueryList: false;
      MediaQueryListEvent: false;
      MediaRecorder: false;
      MediaRecorderErrorEvent: false;
      MediaSession: false;
      MediaSource: false;
      MediaSourceHandle: false;
      MediaStream: false;
      MediaStreamAudioDestinationNode: false;
      MediaStreamAudioSourceNode: false;
      MediaStreamEvent: false;
      MediaStreamTrack: false;
      MediaStreamTrackAudioSourceNode: false;
      MediaStreamTrackAudioStats: false;
      MediaStreamTrackEvent: false;
      MediaStreamTrackGenerator: false;
      MediaStreamTrackProcessor: false;
      MediaStreamTrackVideoStats: false;
      menubar: false;
      MessageChannel: false;
      MessageEvent: false;
      MessagePort: false;
      MIDIAccess: false;
      MIDIConnectionEvent: false;
      MIDIInput: false;
      MIDIInputMap: false;
      MIDIMessageEvent: false;
      MIDIOutput: false;
      MIDIOutputMap: false;
      MIDIPort: false;
      MimeType: false;
      MimeTypeArray: false;
      model: false;
      ModelGenericSession: false;
      ModelManager: false;
      MouseEvent: false;
      moveBy: false;
      moveTo: false;
      MutationEvent: false;
      MutationObserver: false;
      MutationRecord: false;
      name: false;
      NamedNodeMap: false;
      NavigateEvent: false;
      navigation: false;
      Navigation: false;
      NavigationActivation: false;
      NavigationCurrentEntryChangeEvent: false;
      NavigationDestination: false;
      NavigationHistoryEntry: false;
      NavigationPreloadManager: false;
      NavigationTransition: false;
      navigator: false;
      Navigator: false;
      NavigatorLogin: false;
      NavigatorManagedData: false;
      NavigatorUAData: false;
      NetworkInformation: false;
      Node: false;
      NodeFilter: false;
      NodeIterator: false;
      NodeList: false;
      Notification: false;
      NotifyPaintEvent: false;
      NotRestoredReasonDetails: false;
      NotRestoredReasons: false;
      Observable: false;
      OfflineAudioCompletionEvent: false;
      OfflineAudioContext: false;
      offscreenBuffering: false;
      OffscreenCanvas: false;
      OffscreenCanvasRenderingContext2D: false;
      onabort: true;
      onafterprint: true;
      onanimationcancel: true;
      onanimationend: true;
      onanimationiteration: true;
      onanimationstart: true;
      onappinstalled: true;
      onauxclick: true;
      onbeforeinput: true;
      onbeforeinstallprompt: true;
      onbeforematch: true;
      onbeforeprint: true;
      onbeforetoggle: true;
      onbeforeunload: true;
      onbeforexrselect: true;
      onblur: true;
      oncancel: true;
      oncanplay: true;
      oncanplaythrough: true;
      onchange: true;
      onclick: true;
      onclose: true;
      oncommand: true;
      oncontentvisibilityautostatechange: true;
      oncontextlost: true;
      oncontextmenu: true;
      oncontextrestored: true;
      oncopy: true;
      oncuechange: true;
      oncut: true;
      ondblclick: true;
      ondevicemotion: true;
      ondeviceorientation: true;
      ondeviceorientationabsolute: true;
      ondrag: true;
      ondragend: true;
      ondragenter: true;
      ondragleave: true;
      ondragover: true;
      ondragstart: true;
      ondrop: true;
      ondurationchange: true;
      onemptied: true;
      onended: true;
      onerror: true;
      onfocus: true;
      onformdata: true;
      ongamepadconnected: true;
      ongamepaddisconnected: true;
      ongotpointercapture: true;
      onhashchange: true;
      oninput: true;
      oninvalid: true;
      onkeydown: true;
      onkeypress: true;
      onkeyup: true;
      onlanguagechange: true;
      onload: true;
      onloadeddata: true;
      onloadedmetadata: true;
      onloadstart: true;
      onlostpointercapture: true;
      onmessage: true;
      onmessageerror: true;
      onmousedown: true;
      onmouseenter: true;
      onmouseleave: true;
      onmousemove: true;
      onmouseout: true;
      onmouseover: true;
      onmouseup: true;
      onmousewheel: true;
      onoffline: true;
      ononline: true;
      onpagehide: true;
      onpagereveal: true;
      onpageshow: true;
      onpageswap: true;
      onpaste: true;
      onpause: true;
      onplay: true;
      onplaying: true;
      onpointercancel: true;
      onpointerdown: true;
      onpointerenter: true;
      onpointerleave: true;
      onpointermove: true;
      onpointerout: true;
      onpointerover: true;
      onpointerrawupdate: true;
      onpointerup: true;
      onpopstate: true;
      onprogress: true;
      onratechange: true;
      onrejectionhandled: true;
      onreset: true;
      onresize: true;
      onscroll: true;
      onscrollend: true;
      onscrollsnapchange: true;
      onscrollsnapchanging: true;
      onsearch: true;
      onsecuritypolicyviolation: true;
      onseeked: true;
      onseeking: true;
      onselect: true;
      onselectionchange: true;
      onselectstart: true;
      onslotchange: true;
      onstalled: true;
      onstorage: true;
      onsubmit: true;
      onsuspend: true;
      ontimeupdate: true;
      ontoggle: true;
      ontransitioncancel: true;
      ontransitionend: true;
      ontransitionrun: true;
      ontransitionstart: true;
      onunhandledrejection: true;
      onunload: true;
      onvolumechange: true;
      onwaiting: true;
      onwheel: true;
      open: false;
      opener: false;
      Option: false;
      OrientationSensor: false;
      origin: false;
      originAgentCluster: false;
      OscillatorNode: false;
      OTPCredential: false;
      outerHeight: false;
      outerWidth: false;
      OverconstrainedError: false;
      PageRevealEvent: false;
      PageSwapEvent: false;
      PageTransitionEvent: false;
      pageXOffset: false;
      pageYOffset: false;
      PannerNode: false;
      parent: false;
      PasswordCredential: false;
      Path2D: false;
      PaymentAddress: false;
      PaymentManager: false;
      PaymentMethodChangeEvent: false;
      PaymentRequest: false;
      PaymentRequestUpdateEvent: false;
      PaymentResponse: false;
      performance: false;
      Performance: false;
      PerformanceElementTiming: false;
      PerformanceEntry: false;
      PerformanceEventTiming: false;
      PerformanceLongAnimationFrameTiming: false;
      PerformanceLongTaskTiming: false;
      PerformanceMark: false;
      PerformanceMeasure: false;
      PerformanceNavigation: false;
      PerformanceNavigationTiming: false;
      PerformanceObserver: false;
      PerformanceObserverEntryList: false;
      PerformancePaintTiming: false;
      PerformanceResourceTiming: false;
      PerformanceScriptTiming: false;
      PerformanceServerTiming: false;
      PerformanceTiming: false;
      PeriodicSyncManager: false;
      PeriodicWave: false;
      Permissions: false;
      PermissionStatus: false;
      PERSISTENT: false;
      personalbar: false;
      PictureInPictureEvent: false;
      PictureInPictureWindow: false;
      Plugin: false;
      PluginArray: false;
      PointerEvent: false;
      PopStateEvent: false;
      postMessage: false;
      Presentation: false;
      PresentationAvailability: false;
      PresentationConnection: false;
      PresentationConnectionAvailableEvent: false;
      PresentationConnectionCloseEvent: false;
      PresentationConnectionList: false;
      PresentationReceiver: false;
      PresentationRequest: false;
      PressureObserver: false;
      PressureRecord: false;
      print: false;
      ProcessingInstruction: false;
      Profiler: false;
      ProgressEvent: false;
      PromiseRejectionEvent: false;
      prompt: false;
      ProtectedAudience: false;
      PublicKeyCredential: false;
      PushManager: false;
      PushSubscription: false;
      PushSubscriptionOptions: false;
      queryLocalFonts: false;
      queueMicrotask: false;
      RadioNodeList: false;
      Range: false;
      ReadableByteStreamController: false;
      ReadableStream: false;
      ReadableStreamBYOBReader: false;
      ReadableStreamBYOBRequest: false;
      ReadableStreamDefaultController: false;
      ReadableStreamDefaultReader: false;
      registerProcessor: false;
      RelativeOrientationSensor: false;
      RemotePlayback: false;
      removeEventListener: false;
      ReportBody: false;
      reportError: false;
      ReportingObserver: false;
      Request: false;
      requestAnimationFrame: false;
      requestIdleCallback: false;
      resizeBy: false;
      ResizeObserver: false;
      ResizeObserverEntry: false;
      ResizeObserverSize: false;
      resizeTo: false;
      Response: false;
      RestrictionTarget: false;
      RTCCertificate: false;
      RTCDataChannel: false;
      RTCDataChannelEvent: false;
      RTCDtlsTransport: false;
      RTCDTMFSender: false;
      RTCDTMFToneChangeEvent: false;
      RTCEncodedAudioFrame: false;
      RTCEncodedVideoFrame: false;
      RTCError: false;
      RTCErrorEvent: false;
      RTCIceCandidate: false;
      RTCIceTransport: false;
      RTCPeerConnection: false;
      RTCPeerConnectionIceErrorEvent: false;
      RTCPeerConnectionIceEvent: false;
      RTCRtpReceiver: false;
      RTCRtpScriptTransform: false;
      RTCRtpSender: false;
      RTCRtpTransceiver: false;
      RTCSctpTransport: false;
      RTCSessionDescription: false;
      RTCStatsReport: false;
      RTCTrackEvent: false;
      sampleRate: false;
      scheduler: false;
      Scheduler: false;
      Scheduling: false;
      screen: false;
      Screen: false;
      ScreenDetailed: false;
      ScreenDetails: false;
      screenLeft: false;
      ScreenOrientation: false;
      screenTop: false;
      screenX: false;
      screenY: false;
      ScriptProcessorNode: false;
      scroll: false;
      scrollbars: false;
      scrollBy: false;
      ScrollTimeline: false;
      scrollTo: false;
      scrollX: false;
      scrollY: false;
      SecurityPolicyViolationEvent: false;
      Selection: false;
      self: false;
      Sensor: false;
      SensorErrorEvent: false;
      Serial: false;
      SerialPort: false;
      ServiceWorker: false;
      ServiceWorkerContainer: false;
      ServiceWorkerRegistration: false;
      sessionStorage: false;
      setInterval: false;
      setTimeout: false;
      ShadowRoot: false;
      sharedStorage: false;
      SharedStorage: false;
      SharedStorageAppendMethod: false;
      SharedStorageClearMethod: false;
      SharedStorageDeleteMethod: false;
      SharedStorageModifierMethod: false;
      SharedStorageSetMethod: false;
      SharedStorageWorklet: false;
      SharedWorker: false;
      showDirectoryPicker: false;
      showOpenFilePicker: false;
      showSaveFilePicker: false;
      SnapEvent: false;
      SourceBuffer: false;
      SourceBufferList: false;
      speechSynthesis: false;
      SpeechSynthesis: false;
      SpeechSynthesisErrorEvent: false;
      SpeechSynthesisEvent: false;
      SpeechSynthesisUtterance: false;
      SpeechSynthesisVoice: false;
      StaticRange: false;
      status: false;
      statusbar: false;
      StereoPannerNode: false;
      stop: false;
      Storage: false;
      StorageBucket: false;
      StorageBucketManager: false;
      StorageEvent: false;
      StorageManager: false;
      structuredClone: false;
      styleMedia: false;
      StylePropertyMap: false;
      StylePropertyMapReadOnly: false;
      StyleSheet: false;
      StyleSheetList: false;
      SubmitEvent: false;
      Subscriber: false;
      SubtleCrypto: false;
      SuppressedError: false;
      SVGAElement: false;
      SVGAngle: false;
      SVGAnimatedAngle: false;
      SVGAnimatedBoolean: false;
      SVGAnimatedEnumeration: false;
      SVGAnimatedInteger: false;
      SVGAnimatedLength: false;
      SVGAnimatedLengthList: false;
      SVGAnimatedNumber: false;
      SVGAnimatedNumberList: false;
      SVGAnimatedPreserveAspectRatio: false;
      SVGAnimatedRect: false;
      SVGAnimatedString: false;
      SVGAnimatedTransformList: false;
      SVGAnimateElement: false;
      SVGAnimateMotionElement: false;
      SVGAnimateTransformElement: false;
      SVGAnimationElement: false;
      SVGCircleElement: false;
      SVGClipPathElement: false;
      SVGComponentTransferFunctionElement: false;
      SVGDefsElement: false;
      SVGDescElement: false;
      SVGElement: false;
      SVGEllipseElement: false;
      SVGFEBlendElement: false;
      SVGFEColorMatrixElement: false;
      SVGFEComponentTransferElement: false;
      SVGFECompositeElement: false;
      SVGFEConvolveMatrixElement: false;
      SVGFEDiffuseLightingElement: false;
      SVGFEDisplacementMapElement: false;
      SVGFEDistantLightElement: false;
      SVGFEDropShadowElement: false;
      SVGFEFloodElement: false;
      SVGFEFuncAElement: false;
      SVGFEFuncBElement: false;
      SVGFEFuncGElement: false;
      SVGFEFuncRElement: false;
      SVGFEGaussianBlurElement: false;
      SVGFEImageElement: false;
      SVGFEMergeElement: false;
      SVGFEMergeNodeElement: false;
      SVGFEMorphologyElement: false;
      SVGFEOffsetElement: false;
      SVGFEPointLightElement: false;
      SVGFESpecularLightingElement: false;
      SVGFESpotLightElement: false;
      SVGFETileElement: false;
      SVGFETurbulenceElement: false;
      SVGFilterElement: false;
      SVGForeignObjectElement: false;
      SVGGElement: false;
      SVGGeometryElement: false;
      SVGGradientElement: false;
      SVGGraphicsElement: false;
      SVGImageElement: false;
      SVGLength: false;
      SVGLengthList: false;
      SVGLinearGradientElement: false;
      SVGLineElement: false;
      SVGMarkerElement: false;
      SVGMaskElement: false;
      SVGMatrix: false;
      SVGMetadataElement: false;
      SVGMPathElement: false;
      SVGNumber: false;
      SVGNumberList: false;
      SVGPathElement: false;
      SVGPatternElement: false;
      SVGPoint: false;
      SVGPointList: false;
      SVGPolygonElement: false;
      SVGPolylineElement: false;
      SVGPreserveAspectRatio: false;
      SVGRadialGradientElement: false;
      SVGRect: false;
      SVGRectElement: false;
      SVGScriptElement: false;
      SVGSetElement: false;
      SVGStopElement: false;
      SVGStringList: false;
      SVGStyleElement: false;
      SVGSVGElement: false;
      SVGSwitchElement: false;
      SVGSymbolElement: false;
      SVGTextContentElement: false;
      SVGTextElement: false;
      SVGTextPathElement: false;
      SVGTextPositioningElement: false;
      SVGTitleElement: false;
      SVGTransform: false;
      SVGTransformList: false;
      SVGTSpanElement: false;
      SVGUnitTypes: false;
      SVGUseElement: false;
      SVGViewElement: false;
      SyncManager: false;
      TaskAttributionTiming: false;
      TaskController: false;
      TaskPriorityChangeEvent: false;
      TaskSignal: false;
      TEMPORARY: false;
      Text: false;
      TextDecoder: false;
      TextDecoderStream: false;
      TextEncoder: false;
      TextEncoderStream: false;
      TextEvent: false;
      TextFormat: false;
      TextFormatUpdateEvent: false;
      TextMetrics: false;
      TextTrack: false;
      TextTrackCue: false;
      TextTrackCueList: false;
      TextTrackList: false;
      TextUpdateEvent: false;
      TimeEvent: false;
      TimeRanges: false;
      ToggleEvent: false;
      toolbar: false;
      top: false;
      Touch: false;
      TouchEvent: false;
      TouchList: false;
      TrackEvent: false;
      TransformStream: false;
      TransformStreamDefaultController: false;
      TransitionEvent: false;
      TreeWalker: false;
      TrustedHTML: false;
      TrustedScript: false;
      TrustedScriptURL: false;
      TrustedTypePolicy: false;
      TrustedTypePolicyFactory: false;
      trustedTypes: false;
      UIEvent: false;
      URL: false;
      URLPattern: false;
      URLSearchParams: false;
      USB: false;
      USBAlternateInterface: false;
      USBConfiguration: false;
      USBConnectionEvent: false;
      USBDevice: false;
      USBEndpoint: false;
      USBInterface: false;
      USBInTransferResult: false;
      USBIsochronousInTransferPacket: false;
      USBIsochronousInTransferResult: false;
      USBIsochronousOutTransferPacket: false;
      USBIsochronousOutTransferResult: false;
      USBOutTransferResult: false;
      UserActivation: false;
      ValidityState: false;
      VideoColorSpace: false;
      VideoDecoder: false;
      VideoEncoder: false;
      VideoFrame: false;
      VideoPlaybackQuality: false;
      ViewTimeline: false;
      ViewTransition: false;
      ViewTransitionTypeSet: false;
      VirtualKeyboard: false;
      VirtualKeyboardGeometryChangeEvent: false;
      VisibilityStateEntry: false;
      visualViewport: false;
      VisualViewport: false;
      VTTCue: false;
      VTTRegion: false;
      WakeLock: false;
      WakeLockSentinel: false;
      WaveShaperNode: false;
      WebAssembly: false;
      WebGL2RenderingContext: false;
      WebGLActiveInfo: false;
      WebGLBuffer: false;
      WebGLContextEvent: false;
      WebGLFramebuffer: false;
      WebGLObject: false;
      WebGLProgram: false;
      WebGLQuery: false;
      WebGLRenderbuffer: false;
      WebGLRenderingContext: false;
      WebGLSampler: false;
      WebGLShader: false;
      WebGLShaderPrecisionFormat: false;
      WebGLSync: false;
      WebGLTexture: false;
      WebGLTransformFeedback: false;
      WebGLUniformLocation: false;
      WebGLVertexArrayObject: false;
      WebSocket: false;
      WebSocketError: false;
      WebSocketStream: false;
      WebTransport: false;
      WebTransportBidirectionalStream: false;
      WebTransportDatagramDuplexStream: false;
      WebTransportError: false;
      WebTransportReceiveStream: false;
      WebTransportSendStream: false;
      WGSLLanguageFeatures: false;
      WheelEvent: false;
      when: false;
      window: false;
      Window: false;
      WindowControlsOverlay: false;
      WindowControlsOverlayGeometryChangeEvent: false;
      Worker: false;
      Worklet: false;
      WorkletGlobalScope: false;
      WritableStream: false;
      WritableStreamDefaultController: false;
      WritableStreamDefaultWriter: false;
      XMLDocument: false;
      XMLHttpRequest: false;
      XMLHttpRequestEventTarget: false;
      XMLHttpRequestUpload: false;
      XMLSerializer: false;
      XPathEvaluator: false;
      XPathExpression: false;
      XPathResult: false;
      XRAnchor: false;
      XRAnchorSet: false;
      XRBoundedReferenceSpace: false;
      XRCamera: false;
      XRCPUDepthInformation: false;
      XRDepthInformation: false;
      XRDOMOverlayState: false;
      XRFrame: false;
      XRHand: false;
      XRHitTestResult: false;
      XRHitTestSource: false;
      XRInputSource: false;
      XRInputSourceArray: false;
      XRInputSourceEvent: false;
      XRInputSourcesChangeEvent: false;
      XRJointPose: false;
      XRJointSpace: false;
      XRLayer: false;
      XRLightEstimate: false;
      XRLightProbe: false;
      XRPose: false;
      XRRay: false;
      XRReferenceSpace: false;
      XRReferenceSpaceEvent: false;
      XRRenderState: false;
      XRRigidTransform: false;
      XRSession: false;
      XRSessionEvent: false;
      XRSpace: false;
      XRSystem: false;
      XRTransientInputHitTestResult: false;
      XRTransientInputHitTestSource: false;
      XRView: false;
      XRViewerPose: false;
      XRViewport: false;
      XRWebGLBinding: false;
      XRWebGLDepthInformation: false;
      XRWebGLLayer: false;
      XSLTProcessor: false;
    };
  };
  settings: {
    react: {
      version: string;
    };
  };
  plugins: {
    react: {
      deprecatedRules: Partial<{
        'boolean-prop-naming': eslint204.Rule.RuleModule;
        'button-has-type': eslint204.Rule.RuleModule;
        'checked-requires-onchange-or-readonly': eslint204.Rule.RuleModule;
        'default-props-match-prop-types': eslint204.Rule.RuleModule;
        'destructuring-assignment': eslint204.Rule.RuleModule;
        'display-name': eslint204.Rule.RuleModule;
        'forbid-component-props': eslint204.Rule.RuleModule;
        'forbid-dom-props': eslint204.Rule.RuleModule;
        'forbid-elements': eslint204.Rule.RuleModule;
        'forbid-foreign-prop-types': eslint204.Rule.RuleModule;
        'forbid-prop-types': eslint204.Rule.RuleModule;
        'forward-ref-uses-ref': eslint204.Rule.RuleModule;
        'function-component-definition': eslint204.Rule.RuleModule;
        'hook-use-state': eslint204.Rule.RuleModule;
        'iframe-missing-sandbox': eslint204.Rule.RuleModule;
        'jsx-boolean-value': eslint204.Rule.RuleModule;
        'jsx-child-element-spacing': eslint204.Rule.RuleModule;
        'jsx-closing-bracket-location': eslint204.Rule.RuleModule;
        'jsx-closing-tag-location': eslint204.Rule.RuleModule;
        'jsx-curly-spacing': eslint204.Rule.RuleModule;
        'jsx-curly-newline': eslint204.Rule.RuleModule;
        'jsx-equals-spacing': eslint204.Rule.RuleModule;
        'jsx-filename-extension': eslint204.Rule.RuleModule;
        'jsx-first-prop-new-line': eslint204.Rule.RuleModule;
        'jsx-handler-names': eslint204.Rule.RuleModule;
        'jsx-indent': eslint204.Rule.RuleModule;
        'jsx-indent-props': eslint204.Rule.RuleModule;
        'jsx-key': eslint204.Rule.RuleModule;
        'jsx-max-depth': eslint204.Rule.RuleModule;
        'jsx-max-props-per-line': eslint204.Rule.RuleModule;
        'jsx-newline': eslint204.Rule.RuleModule;
        'jsx-no-bind': eslint204.Rule.RuleModule;
        'jsx-no-comment-textnodes': eslint204.Rule.RuleModule;
        'jsx-no-constructed-context-values': eslint204.Rule.RuleModule;
        'jsx-no-duplicate-props': eslint204.Rule.RuleModule;
        'jsx-no-leaked-render': eslint204.Rule.RuleModule;
        'jsx-no-literals': eslint204.Rule.RuleModule;
        'jsx-no-script-url': eslint204.Rule.RuleModule;
        'jsx-no-target-blank': eslint204.Rule.RuleModule;
        'jsx-no-useless-fragment': eslint204.Rule.RuleModule;
        'jsx-one-expression-per-line': eslint204.Rule.RuleModule;
        'jsx-no-undef': eslint204.Rule.RuleModule;
        'jsx-curly-brace-presence': eslint204.Rule.RuleModule;
        'jsx-pascal-case': eslint204.Rule.RuleModule;
        'jsx-fragments': eslint204.Rule.RuleModule;
        'jsx-props-no-multi-spaces': eslint204.Rule.RuleModule;
        'jsx-props-no-spreading': eslint204.Rule.RuleModule;
        'jsx-props-no-spread-multi': eslint204.Rule.RuleModule;
        'jsx-sort-default-props': eslint204.Rule.RuleModule;
        'jsx-sort-props': eslint204.Rule.RuleModule;
        'jsx-space-before-closing': eslint204.Rule.RuleModule;
        'jsx-tag-spacing': eslint204.Rule.RuleModule;
        'jsx-uses-react': eslint204.Rule.RuleModule;
        'jsx-uses-vars': eslint204.Rule.RuleModule;
        'jsx-wrap-multilines': eslint204.Rule.RuleModule;
        'no-invalid-html-attribute': eslint204.Rule.RuleModule;
        'no-access-state-in-setstate': eslint204.Rule.RuleModule;
        'no-adjacent-inline-elements': eslint204.Rule.RuleModule;
        'no-array-index-key': eslint204.Rule.RuleModule;
        'no-arrow-function-lifecycle': eslint204.Rule.RuleModule;
        'no-children-prop': eslint204.Rule.RuleModule;
        'no-danger': eslint204.Rule.RuleModule;
        'no-danger-with-children': eslint204.Rule.RuleModule;
        'no-deprecated': eslint204.Rule.RuleModule;
        'no-did-mount-set-state': eslint204.Rule.RuleModule;
        'no-did-update-set-state': eslint204.Rule.RuleModule;
        'no-direct-mutation-state': eslint204.Rule.RuleModule;
        'no-find-dom-node': eslint204.Rule.RuleModule;
        'no-is-mounted': eslint204.Rule.RuleModule;
        'no-multi-comp': eslint204.Rule.RuleModule;
        'no-namespace': eslint204.Rule.RuleModule;
        'no-set-state': eslint204.Rule.RuleModule;
        'no-string-refs': eslint204.Rule.RuleModule;
        'no-redundant-should-component-update': eslint204.Rule.RuleModule;
        'no-render-return-value': eslint204.Rule.RuleModule;
        'no-this-in-sfc': eslint204.Rule.RuleModule;
        'no-typos': eslint204.Rule.RuleModule;
        'no-unescaped-entities': eslint204.Rule.RuleModule;
        'no-unknown-property': eslint204.Rule.RuleModule;
        'no-unsafe': eslint204.Rule.RuleModule;
        'no-unstable-nested-components': eslint204.Rule.RuleModule;
        'no-unused-class-component-methods': eslint204.Rule.RuleModule;
        'no-unused-prop-types': eslint204.Rule.RuleModule;
        'no-unused-state': eslint204.Rule.RuleModule;
        'no-object-type-as-default-prop': eslint204.Rule.RuleModule;
        'no-will-update-set-state': eslint204.Rule.RuleModule;
        'prefer-es6-class': eslint204.Rule.RuleModule;
        'prefer-exact-props': eslint204.Rule.RuleModule;
        'prefer-read-only-props': eslint204.Rule.RuleModule;
        'prefer-stateless-function': eslint204.Rule.RuleModule;
        'prop-types': eslint204.Rule.RuleModule;
        'react-in-jsx-scope': eslint204.Rule.RuleModule;
        'require-default-props': eslint204.Rule.RuleModule;
        'require-optimization': eslint204.Rule.RuleModule;
        'require-render-return': eslint204.Rule.RuleModule;
        'self-closing-comp': eslint204.Rule.RuleModule;
        'sort-comp': eslint204.Rule.RuleModule;
        'sort-default-props': eslint204.Rule.RuleModule;
        'sort-prop-types': eslint204.Rule.RuleModule;
        'state-in-constructor': eslint204.Rule.RuleModule;
        'static-property-placement': eslint204.Rule.RuleModule;
        'style-prop-object': eslint204.Rule.RuleModule;
        'void-dom-elements-no-children': eslint204.Rule.RuleModule;
      }>;
      rules: {
        'boolean-prop-naming': eslint204.Rule.RuleModule;
        'button-has-type': eslint204.Rule.RuleModule;
        'checked-requires-onchange-or-readonly': eslint204.Rule.RuleModule;
        'default-props-match-prop-types': eslint204.Rule.RuleModule;
        'destructuring-assignment': eslint204.Rule.RuleModule;
        'display-name': eslint204.Rule.RuleModule;
        'forbid-component-props': eslint204.Rule.RuleModule;
        'forbid-dom-props': eslint204.Rule.RuleModule;
        'forbid-elements': eslint204.Rule.RuleModule;
        'forbid-foreign-prop-types': eslint204.Rule.RuleModule;
        'forbid-prop-types': eslint204.Rule.RuleModule;
        'forward-ref-uses-ref': eslint204.Rule.RuleModule;
        'function-component-definition': eslint204.Rule.RuleModule;
        'hook-use-state': eslint204.Rule.RuleModule;
        'iframe-missing-sandbox': eslint204.Rule.RuleModule;
        'jsx-boolean-value': eslint204.Rule.RuleModule;
        'jsx-child-element-spacing': eslint204.Rule.RuleModule;
        'jsx-closing-bracket-location': eslint204.Rule.RuleModule;
        'jsx-closing-tag-location': eslint204.Rule.RuleModule;
        'jsx-curly-spacing': eslint204.Rule.RuleModule;
        'jsx-curly-newline': eslint204.Rule.RuleModule;
        'jsx-equals-spacing': eslint204.Rule.RuleModule;
        'jsx-filename-extension': eslint204.Rule.RuleModule;
        'jsx-first-prop-new-line': eslint204.Rule.RuleModule;
        'jsx-handler-names': eslint204.Rule.RuleModule;
        'jsx-indent': eslint204.Rule.RuleModule;
        'jsx-indent-props': eslint204.Rule.RuleModule;
        'jsx-key': eslint204.Rule.RuleModule;
        'jsx-max-depth': eslint204.Rule.RuleModule;
        'jsx-max-props-per-line': eslint204.Rule.RuleModule;
        'jsx-newline': eslint204.Rule.RuleModule;
        'jsx-no-bind': eslint204.Rule.RuleModule;
        'jsx-no-comment-textnodes': eslint204.Rule.RuleModule;
        'jsx-no-constructed-context-values': eslint204.Rule.RuleModule;
        'jsx-no-duplicate-props': eslint204.Rule.RuleModule;
        'jsx-no-leaked-render': eslint204.Rule.RuleModule;
        'jsx-no-literals': eslint204.Rule.RuleModule;
        'jsx-no-script-url': eslint204.Rule.RuleModule;
        'jsx-no-target-blank': eslint204.Rule.RuleModule;
        'jsx-no-useless-fragment': eslint204.Rule.RuleModule;
        'jsx-one-expression-per-line': eslint204.Rule.RuleModule;
        'jsx-no-undef': eslint204.Rule.RuleModule;
        'jsx-curly-brace-presence': eslint204.Rule.RuleModule;
        'jsx-pascal-case': eslint204.Rule.RuleModule;
        'jsx-fragments': eslint204.Rule.RuleModule;
        'jsx-props-no-multi-spaces': eslint204.Rule.RuleModule;
        'jsx-props-no-spreading': eslint204.Rule.RuleModule;
        'jsx-props-no-spread-multi': eslint204.Rule.RuleModule;
        'jsx-sort-default-props': eslint204.Rule.RuleModule;
        'jsx-sort-props': eslint204.Rule.RuleModule;
        'jsx-space-before-closing': eslint204.Rule.RuleModule;
        'jsx-tag-spacing': eslint204.Rule.RuleModule;
        'jsx-uses-react': eslint204.Rule.RuleModule;
        'jsx-uses-vars': eslint204.Rule.RuleModule;
        'jsx-wrap-multilines': eslint204.Rule.RuleModule;
        'no-invalid-html-attribute': eslint204.Rule.RuleModule;
        'no-access-state-in-setstate': eslint204.Rule.RuleModule;
        'no-adjacent-inline-elements': eslint204.Rule.RuleModule;
        'no-array-index-key': eslint204.Rule.RuleModule;
        'no-arrow-function-lifecycle': eslint204.Rule.RuleModule;
        'no-children-prop': eslint204.Rule.RuleModule;
        'no-danger': eslint204.Rule.RuleModule;
        'no-danger-with-children': eslint204.Rule.RuleModule;
        'no-deprecated': eslint204.Rule.RuleModule;
        'no-did-mount-set-state': eslint204.Rule.RuleModule;
        'no-did-update-set-state': eslint204.Rule.RuleModule;
        'no-direct-mutation-state': eslint204.Rule.RuleModule;
        'no-find-dom-node': eslint204.Rule.RuleModule;
        'no-is-mounted': eslint204.Rule.RuleModule;
        'no-multi-comp': eslint204.Rule.RuleModule;
        'no-namespace': eslint204.Rule.RuleModule;
        'no-set-state': eslint204.Rule.RuleModule;
        'no-string-refs': eslint204.Rule.RuleModule;
        'no-redundant-should-component-update': eslint204.Rule.RuleModule;
        'no-render-return-value': eslint204.Rule.RuleModule;
        'no-this-in-sfc': eslint204.Rule.RuleModule;
        'no-typos': eslint204.Rule.RuleModule;
        'no-unescaped-entities': eslint204.Rule.RuleModule;
        'no-unknown-property': eslint204.Rule.RuleModule;
        'no-unsafe': eslint204.Rule.RuleModule;
        'no-unstable-nested-components': eslint204.Rule.RuleModule;
        'no-unused-class-component-methods': eslint204.Rule.RuleModule;
        'no-unused-prop-types': eslint204.Rule.RuleModule;
        'no-unused-state': eslint204.Rule.RuleModule;
        'no-object-type-as-default-prop': eslint204.Rule.RuleModule;
        'no-will-update-set-state': eslint204.Rule.RuleModule;
        'prefer-es6-class': eslint204.Rule.RuleModule;
        'prefer-exact-props': eslint204.Rule.RuleModule;
        'prefer-read-only-props': eslint204.Rule.RuleModule;
        'prefer-stateless-function': eslint204.Rule.RuleModule;
        'prop-types': eslint204.Rule.RuleModule;
        'react-in-jsx-scope': eslint204.Rule.RuleModule;
        'require-default-props': eslint204.Rule.RuleModule;
        'require-optimization': eslint204.Rule.RuleModule;
        'require-render-return': eslint204.Rule.RuleModule;
        'self-closing-comp': eslint204.Rule.RuleModule;
        'sort-comp': eslint204.Rule.RuleModule;
        'sort-default-props': eslint204.Rule.RuleModule;
        'sort-prop-types': eslint204.Rule.RuleModule;
        'state-in-constructor': eslint204.Rule.RuleModule;
        'static-property-placement': eslint204.Rule.RuleModule;
        'style-prop-object': eslint204.Rule.RuleModule;
        'void-dom-elements-no-children': eslint204.Rule.RuleModule;
      };
      configs: {
        recommended: {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
          };
          rules: {
            "react/display-name": 2;
            "react/jsx-key": 2;
            "react/jsx-no-comment-textnodes": 2;
            "react/jsx-no-duplicate-props": 2;
            "react/jsx-no-target-blank": 2;
            "react/jsx-no-undef": 2;
            "react/jsx-uses-react": 2;
            "react/jsx-uses-vars": 2;
            "react/no-children-prop": 2;
            "react/no-danger-with-children": 2;
            "react/no-deprecated": 2;
            "react/no-direct-mutation-state": 2;
            "react/no-find-dom-node": 2;
            "react/no-is-mounted": 2;
            "react/no-render-return-value": 2;
            "react/no-string-refs": 2;
            "react/no-unescaped-entities": 2;
            "react/no-unknown-property": 2;
            "react/no-unsafe": 0;
            "react/prop-types": 2;
            "react/react-in-jsx-scope": 2;
            "react/require-render-return": 2;
          };
        };
        all: {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
          };
          rules: Record<"boolean-prop-naming" | "button-has-type" | "checked-requires-onchange-or-readonly" | "default-props-match-prop-types" | "destructuring-assignment" | "display-name" | "forbid-component-props" | "forbid-dom-props" | "forbid-elements" | "forbid-foreign-prop-types" | "forbid-prop-types" | "prop-types" | "forward-ref-uses-ref" | "function-component-definition" | "hook-use-state" | "iframe-missing-sandbox" | "jsx-boolean-value" | "jsx-child-element-spacing" | "jsx-closing-bracket-location" | "jsx-closing-tag-location" | "jsx-curly-spacing" | "jsx-curly-newline" | "jsx-equals-spacing" | "jsx-filename-extension" | "jsx-first-prop-new-line" | "jsx-handler-names" | "jsx-indent" | "jsx-indent-props" | "jsx-key" | "jsx-max-depth" | "jsx-max-props-per-line" | "jsx-newline" | "jsx-no-bind" | "jsx-no-comment-textnodes" | "jsx-no-constructed-context-values" | "jsx-no-duplicate-props" | "jsx-no-leaked-render" | "jsx-no-literals" | "jsx-no-script-url" | "jsx-no-target-blank" | "jsx-no-useless-fragment" | "jsx-one-expression-per-line" | "jsx-no-undef" | "jsx-curly-brace-presence" | "jsx-pascal-case" | "jsx-fragments" | "jsx-props-no-multi-spaces" | "jsx-props-no-spreading" | "jsx-props-no-spread-multi" | "sort-default-props" | "jsx-sort-default-props" | "jsx-sort-props" | "jsx-tag-spacing" | "jsx-space-before-closing" | "jsx-uses-react" | "jsx-uses-vars" | "jsx-wrap-multilines" | "no-invalid-html-attribute" | "no-access-state-in-setstate" | "no-adjacent-inline-elements" | "no-array-index-key" | "no-arrow-function-lifecycle" | "no-children-prop" | "no-danger" | "no-danger-with-children" | "no-deprecated" | "no-direct-mutation-state" | "no-find-dom-node" | "no-is-mounted" | "no-multi-comp" | "no-namespace" | "no-set-state" | "no-string-refs" | "no-redundant-should-component-update" | "no-render-return-value" | "no-this-in-sfc" | "no-typos" | "no-unescaped-entities" | "no-unknown-property" | "no-unsafe" | "no-unstable-nested-components" | "no-unused-class-component-methods" | "no-unused-prop-types" | "no-unused-state" | "no-object-type-as-default-prop" | "prefer-es6-class" | "prefer-exact-props" | "prefer-read-only-props" | "prefer-stateless-function" | "react-in-jsx-scope" | "require-default-props" | "require-optimization" | "require-render-return" | "self-closing-comp" | "sort-comp" | "sort-prop-types" | "state-in-constructor" | "static-property-placement" | "style-prop-object" | "void-dom-elements-no-children" | "no-did-mount-set-state" | "no-did-update-set-state" | "no-will-update-set-state", 2 | "error">;
        };
        'jsx-runtime': {
          plugins: ["react"];
          parserOptions: {
            ecmaFeatures: {
              jsx: boolean;
            };
            jsxPragma: any;
          };
          rules: {
            "react/react-in-jsx-scope": 0;
            "react/jsx-uses-react": 0;
          };
        };
        flat: Record<string, eslint_plugin_react410.ReactFlatConfig>;
      } & {
        flat: Record<string, eslint_plugin_react410.ReactFlatConfig>;
      };
    };
  };
  rules: {
    "react/boolean-prop-naming": ["error", {
      validateNested: boolean;
    }];
    "react/button-has-type": "warn";
    "react/default-props-match-prop-types": "error";
    "react/destructuring-assignment": ["warn", string, {
      ignoreClassFields: boolean;
    }];
    "react/display-name": "warn";
    "react/forbid-component-props": "off";
    "react/forbid-dom-props": "off";
    "react/forbid-elements": "off";
    "react/forbid-foreign-prop-types": "off";
    "react/forbid-prop-types": "off";
    "react/function-component-definition": ["error", {
      namedComponents: string;
      unnamedComponents: string;
    }];
    "react/hook-use-state": "error";
    "react/iframe-missing-sandbox": "warn";
    "react/jsx-boolean-value": "warn";
    "react/jsx-child-element-spacing": "warn";
    "react/jsx-closing-bracket-location": "off";
    "react/jsx-closing-tag-location": "off";
    "react/jsx-curly-brace-presence": "off";
    "react/jsx-curly-newline": "off";
    "react/jsx-curly-spacing": "off";
    "react/jsx-equals-spacing": "off";
    "react/jsx-filename-extension": ["warn", {
      extensions: string[];
    }];
    "react/jsx-first-prop-new-line": "off";
    "react/jsx-fragments": ["warn", string];
    "react/jsx-handler-names": "warn";
    "react/jsx-indent": "off";
    "react/jsx-indent-props": "off";
    "react/jsx-key": "warn";
    "react/jsx-max-depth": "off";
    "react/jsx-max-props-per-line": "off";
    "react/jsx-newline": "off";
    "react/jsx-no-bind": ["warn", {
      ignoreDOMComponents: boolean;
      allowArrowFunctions: boolean;
    }];
    "react/jsx-no-comment-textnodes": "off";
    "react/jsx-no-constructed-context-values": "off";
    "react/jsx-no-duplicate-props": "error";
    "react/jsx-no-leaked-render": "error";
    "react/jsx-no-literals": "off";
    "react/jsx-no-script-url": "error";
    "react/jsx-no-target-blank": "error";
    "react/jsx-no-undef": "off";
    "react/jsx-no-useless-fragment": "off";
    "react/jsx-one-expression-per-line": "off";
    "react/jsx-pascal-case": "error";
    "react/jsx-props-no-multi-spaces": "off";
    "react/jsx-props-no-spreading": "off";
    "react/jsx-sort-default-props": "off";
    "react/jsx-sort-props": "off";
    "react/jsx-space-before-closing": "off";
    "react/jsx-tag-spacing": "off";
    "react/jsx-uses-react": "error";
    "react/jsx-uses-vars": "error";
    "react/jsx-wrap-multilines": "off";
    "react/no-access-state-in-setstate": "error";
    "react/no-adjacent-inline-elements": "off";
    "react/no-array-index-key": "error";
    "react/no-children-prop": "error";
    "react/no-danger": "off";
    "react/no-danger-with-children": "error";
    "react/no-deprecated": "error";
    "react/no-did-mount-set-state": "error";
    "react/no-did-update-set-state": "error";
    "react/no-direct-mutation-state": "error";
    "react/no-find-dom-node": "error";
    "react/no-invalid-html-attribute": "error";
    "react/no-is-mounted": "error";
    "react/no-multi-comp": "off";
    "react/no-namespace": "off";
    "react/no-object-type-as-default-prop": "error";
    "react/no-redundant-should-component-update": "error";
    "react/no-render-return-value": "error";
    "react/no-set-state": "off";
    "react/no-string-refs": "error";
    "react/no-this-in-sfc": "error";
    "react/no-typos": "warn";
    "react/no-unescaped-entities": "off";
    "react/no-unknown-property": "warn";
    "react/no-unsafe": "error";
    "react/no-unstable-nested-components": ["error", {
      allowAsProps: boolean;
    }];
    "react/no-unused-class-component-methods": "warn";
    "react/no-unused-prop-types": "warn";
    "react/no-unused-state": "warn";
    "react/no-will-update-set-state": "error";
    "react/prefer-es6-class": ["error", string];
    "react/prefer-exact-props": "off";
    "react/prefer-read-only-props": "error";
    "react/prefer-stateless-function": "error";
    "react/prop-types": "off";
    "react/react-in-jsx-scope": "off";
    "react/require-default-props": ["warn", {
      forbidDefaultForRequired: boolean;
      functions: string;
    }];
    "react/require-optimization": "off";
    "react/require-render-return": "error";
    "react/self-closing-comp": "error";
    "react/sort-comp": "off";
    "react/sort-default-props": "off";
    "react/sort-prop-types": "off";
    "react/state-in-constructor": "off";
    "react/static-property-placement": "off";
    "react/style-prop-object": "error";
    "react/void-dom-elements-no-children": "error";
  };
} | {
  name: string;
  plugins: {
    "react-hooks": typeof eslint_plugin_react_hooks412;
  };
  rules: {
    "react-hooks/rules-of-hooks": "error";
    "react-hooks/exhaustive-deps": "warn";
  };
} | {
  name: string;
  plugins: {
    "jsx-a11y": any;
  };
  rules: {
    "jsx-a11y/alt-text": "error";
    "jsx-a11y/anchor-ambiguous-text": "off";
    "jsx-a11y/anchor-has-content": "error";
    "jsx-a11y/anchor-is-valid": "error";
    "jsx-a11y/aria-activedescendant-has-tabindex": "error";
    "jsx-a11y/aria-props": "error";
    "jsx-a11y/aria-proptypes": "error";
    "jsx-a11y/aria-role": "error";
    "jsx-a11y/aria-unsupported-elements": "error";
    "jsx-a11y/autocomplete-valid": "error";
    "jsx-a11y/click-events-have-key-events": "error";
    "jsx-a11y/heading-has-content": "error";
    "jsx-a11y/html-has-lang": "error";
    "jsx-a11y/iframe-has-title": "error";
    "jsx-a11y/img-redundant-alt": "error";
    "jsx-a11y/interactive-supports-focus": "error";
    "jsx-a11y/label-has-associated-control": "error";
    "jsx-a11y/lang": "error";
    "jsx-a11y/media-has-caption": "error";
    "jsx-a11y/mouse-events-have-key-events": "error";
    "jsx-a11y/no-access-key": "error";
    "jsx-a11y/no-aria-hidden-on-focusable": "warn";
    "jsx-a11y/no-autofocus": "error";
    "jsx-a11y/no-distracting-elements": "error";
    "jsx-a11y/no-interactive-element-to-noninteractive-role": "error";
    "jsx-a11y/no-noninteractive-element-interactions": "error";
    "jsx-a11y/no-noninteractive-element-to-interactive-role": "error";
    "jsx-a11y/no-noninteractive-tabindex": "error";
    "jsx-a11y/no-redundant-roles": "error";
    "jsx-a11y/no-static-element-interactions": "error";
    "jsx-a11y/prefer-tag-over-role": "warn";
    "jsx-a11y/role-has-required-aria-props": "error";
    "jsx-a11y/role-supports-aria-props": "error";
    "jsx-a11y/scope": "error";
    "jsx-a11y/tabindex-no-positive": "error";
  };
} | {
  name: string;
  files: string[];
  plugins: {
    "@next/next": any;
  };
  rules: {
    "@next/next/google-font-display": "error";
    "@next/next/google-font-preconnect": "error";
    "@next/next/no-css-tags": "error";
    "@next/next/no-document-import-in-page": "error";
    "@next/next/no-head-import-in-document": "error";
    "@next/next/no-html-link-for-pages": "error";
    "@next/next/no-img-element": "error";
    "@next/next/no-page-custom-font": "error";
    "@next/next/no-sync-scripts": "error";
    "@next/next/no-title-in-document-head": "error";
    "@next/next/no-unwanted-polyfillio": "error";
    "@next/next/inline-script-id": "error";
    "@next/next/no-typos": "warn";
    "@next/next/next-script-for-ga": "error";
    "@next/next/no-duplicate-head": "error";
    "import-x/no-default-export"?: undefined;
    "import-x/no-anonymous-default-export"?: undefined;
  };
} | {
  name: string;
  files: string[];
  rules: {
    "import-x/no-default-export": "off";
    "import-x/no-anonymous-default-export": "off";
    "@next/next/google-font-display"?: undefined;
    "@next/next/google-font-preconnect"?: undefined;
    "@next/next/no-css-tags"?: undefined;
    "@next/next/no-document-import-in-page"?: undefined;
    "@next/next/no-head-import-in-document"?: undefined;
    "@next/next/no-html-link-for-pages"?: undefined;
    "@next/next/no-img-element"?: undefined;
    "@next/next/no-page-custom-font"?: undefined;
    "@next/next/no-sync-scripts"?: undefined;
    "@next/next/no-title-in-document-head"?: undefined;
    "@next/next/no-unwanted-polyfillio"?: undefined;
    "@next/next/inline-script-id"?: undefined;
    "@next/next/no-typos"?: undefined;
    "@next/next/next-script-for-ga"?: undefined;
    "@next/next/no-duplicate-head"?: undefined;
  };
  plugins?: undefined;
})[] | {
  name: string;
  plugins: {
    "@stylistic": {
      rules: _stylistic_eslint_plugin413.Rules;
      configs: eslint204.ESLint.Plugin["configs"] & _stylistic_eslint_plugin413.Configs;
    };
  };
  rules: {
    "@stylistic/array-bracket-newline": ["warn", {
      multiline: true;
    }];
    "@stylistic/array-bracket-spacing": "warn";
    "@stylistic/array-element-newline": ["warn", {
      consistent: true;
      multiline: true;
    }];
    "@stylistic/arrow-parens": ["warn", "always"];
    "@stylistic/arrow-spacing": ["warn", {
      before: true;
      after: true;
    }];
    "@stylistic/block-spacing": ["warn", "always"];
    "@stylistic/brace-style": ["warn", "1tbs", {
      allowSingleLine: true;
    }];
    "@stylistic/comma-dangle": ["warn", "never"];
    "@stylistic/comma-spacing": ["warn", {
      before: false;
      after: true;
    }];
    "@stylistic/comma-style": ["warn", "last"];
    "@stylistic/computed-property-spacing": "warn";
    "@stylistic/curly-newline": "warn";
    "@stylistic/dot-location": ["warn", "property"];
    "@stylistic/eol-last": "warn";
    "@stylistic/function-call-argument-newline": ["warn", "consistent"];
    "@stylistic/function-call-spacing": "warn";
    "@stylistic/function-paren-newline": ["off", "consistent"];
    "@stylistic/generator-star-spacing": ["warn", {
      before: false;
      after: true;
      method: {
        before: true;
        after: false;
      };
    }];
    "@stylistic/implicit-arrow-linebreak": "off";
    "@stylistic/indent": ["warn", number];
    "@stylistic/indent-binary-ops": ["warn", number];
    "@stylistic/jsx-child-element-spacing": "warn";
    "@stylistic/jsx-closing-bracket-location": ["warn", "tag-aligned"];
    "@stylistic/jsx-closing-tag-location": ["warn", "tag-aligned"];
    "@stylistic/jsx-curly-brace-presence": "off";
    "@stylistic/jsx-curly-newline": "off";
    "@stylistic/jsx-curly-spacing": ["warn", "never", {
      allowMultiline: false;
      spacing: {
        objectLiterals: "always";
      };
    }];
    "@stylistic/jsx-equals-spacing": ["warn", "never"];
    "@stylistic/jsx-first-prop-new-line": ["warn", "multiline"];
    "@stylistic/jsx-function-call-newline": "off";
    "@stylistic/jsx-indent-props": ["warn", number];
    "@stylistic/jsx-max-props-per-line": "off";
    "@stylistic/jsx-newline": ["warn", {
      prevent: true;
      allowMultilines: true;
    }];
    "@stylistic/jsx-one-expression-per-line": ["warn", {
      allow: "single-child";
    }];
    "@stylistic/jsx-pascal-case": "off";
    "@stylistic/jsx-props-no-multi-spaces": "off";
    "@stylistic/jsx-quotes": ["warn", "prefer-double"];
    "@stylistic/jsx-self-closing-comp": ["warn", {
      component: true;
      html: true;
    }];
    "@stylistic/jsx-sort-props": "off";
    "@stylistic/jsx-tag-spacing": "warn";
    "@stylistic/jsx-wrap-multilines": "warn";
    "@stylistic/key-spacing": "off";
    "@stylistic/keyword-spacing": ["warn", {
      before: true;
      after: true;
    }];
    "@stylistic/line-comment-position": "off";
    "@stylistic/linebreak-style": "off";
    "@stylistic/lines-around-comment": "off";
    "@stylistic/lines-between-class-members": ["warn", "always", {
      exceptAfterSingleLine: true;
    }];
    "@stylistic/max-len": ["warn", {
      code: number;
    }];
    "@stylistic/max-statements-per-line": "off";
    "@stylistic/multiline-ternary": ["warn", "always-multiline"];
    "@stylistic/new-parens": "warn";
    "@stylistic/newline-per-chained-call": "off";
    "@stylistic/no-confusing-arrow": "off";
    "@stylistic/no-extra-parens": "off";
    "@stylistic/no-extra-semi": "warn";
    "@stylistic/no-floating-decimal": "warn";
    "@stylistic/no-mixed-operators": "warn";
    "@stylistic/no-mixed-spaces-and-tabs": ["warn", "smart-tabs"];
    "@stylistic/no-multi-spaces": ["warn", {
      exceptions: {
        Property: true;
        VariableDeclarator: true;
        ImportDeclaration: true;
      };
    }];
    "@stylistic/no-multiple-empty-lines": ["warn", {
      max: number;
    }];
    "@stylistic/no-tabs": "off";
    "@stylistic/no-trailing-spaces": "warn";
    "@stylistic/no-whitespace-before-property": "warn";
    "@stylistic/nonblock-statement-body-position": "off";
    "@stylistic/object-curly-newline": ["warn", {
      ObjectExpression: {
        multiline: true;
      };
      ObjectPattern: {
        multiline: true;
      };
    }];
    "@stylistic/object-curly-spacing": ["warn", "always"];
    "@stylistic/object-property-newline": ["warn", {
      allowAllPropertiesOnSameLine: false;
    }];
    "@stylistic/one-var-declaration-per-line": ["warn", "initializations"];
    "@stylistic/operator-linebreak": ["warn", "before"];
    "@stylistic/padded-blocks": ["warn", "never"];
    "@stylistic/padding-line-between-statements": "off";
    "@stylistic/quote-props": ["warn", "as-needed"];
    "@stylistic/quotes": ["warn", "backtick", {
      avoidEscape: true;
    }];
    "@stylistic/rest-spread-spacing": ["warn", "never"];
    "@stylistic/semi": ["warn", "always"];
    "@stylistic/semi-spacing": ["warn", {
      before: false;
      after: true;
    }];
    "@stylistic/semi-style": ["warn", "last"];
    "@stylistic/space-before-blocks": "warn";
    "@stylistic/space-before-function-paren": ["warn", {
      anonymous: "never";
      named: "never";
      asyncArrow: "always";
    }];
    "@stylistic/space-in-parens": ["warn", "never"];
    "@stylistic/space-infix-ops": ["warn", {
      int32Hint: false;
    }];
    "@stylistic/space-unary-ops": ["warn", {
      words: true;
      nonwords: false;
    }];
    "@stylistic/spaced-comment": ["warn", "always", {
      exceptions: string[];
    }];
    "@stylistic/switch-colon-spacing": ["warn", {
      before: false;
      after: true;
    }];
    "@stylistic/template-curly-spacing": ["warn", "never"];
    "@stylistic/template-tag-spacing": ["warn", "never"];
    "@stylistic/type-annotation-spacing": "warn";
    "@stylistic/type-generic-spacing": "warn";
    "@stylistic/type-named-tuple-spacing": "warn";
    "@stylistic/wrap-iife": ["warn", "any"];
    "@stylistic/wrap-regex": "off";
    "@stylistic/yield-star-spacing": ["warn", {
      before: false;
      after: true;
    }];
  };
} | {
  name: string;
  files: string[];
  plugins: {
    "@typescript-eslint": _typescript_eslint_utils_ts_eslint0.FlatConfig.Plugin;
  };
  rules: {
    "class-methods-use-this": "off";
    "@typescript-eslint/class-methods-use-this": ["warn", {
      ignoreOverrideMethods: boolean;
      ignoreClassesThatImplementAnInterface: string;
    }];
    "default-param-last": "off";
    "@typescript-eslint/default-param-last": "error";
    "init-declarations": "off";
    "@typescript-eslint/init-declarations": "off";
    "max-params": "off";
    "@typescript-eslint/max-params": "error";
    "no-array-constructor": "off";
    "@typescript-eslint/no-array-constructor": "off";
    "no-dupe-class-members": "off";
    "@typescript-eslint/no-dupe-class-members": "error";
    "no-invalid-this": "off";
    "@typescript-eslint/no-invalid-this": "off";
    "no-loop-func": "off";
    "@typescript-eslint/no-loop-func": "error";
    "no-magic-numbers": "off";
    "@typescript-eslint/no-magic-numbers": "off";
    "no-redeclare": "off";
    "@typescript-eslint/no-redeclare": "error";
    "no-restricted-imports": "off";
    "@typescript-eslint/no-restricted-imports": "off";
    "no-shadow": "off";
    "@typescript-eslint/no-shadow": "error";
    "no-unused-expressions": "off";
    "@typescript-eslint/no-unused-expressions": "off";
    "no-unused-vars": "off";
    "@typescript-eslint/no-unused-vars": ["error", {
      vars: string;
      args: string;
      ignoreRestSiblings: boolean;
    }];
    "no-use-before-define": "off";
    "@typescript-eslint/no-use-before-define": ["error", {
      functions: boolean;
      classes: boolean;
    }];
    "no-useless-constructor": "off";
    "@typescript-eslint/no-useless-constructor": "error";
    "@typescript-eslint/ban-ts-comment": "off";
    "@typescript-eslint/consistent-type-imports": "error";
    "@typescript-eslint/explicit-function-return-type": "warn";
    "@typescript-eslint/explicit-member-accessibility": "off";
    "@typescript-eslint/explicit-module-boundary-types": ["warn"];
    "@typescript-eslint/member-ordering": "off";
    "@typescript-eslint/method-signature-style": ["off", string];
    "@typescript-eslint/no-duplicate-enum-values": "error";
    "@typescript-eslint/no-dynamic-delete": "warn";
    "@typescript-eslint/no-empty-object-type": ["warn", {
      allowInterfaces: string;
    }];
    "@typescript-eslint/no-explicit-any": ["warn", {
      ignoreRestArgs: boolean;
    }];
    "@typescript-eslint/no-extra-non-null-assertion": "error";
    "@typescript-eslint/no-extraneous-class": "off";
    "@typescript-eslint/no-import-type-side-effects": "error";
    "@typescript-eslint/no-invalid-void-type": "warn";
    "@typescript-eslint/no-misused-new": "error";
    "@typescript-eslint/no-namespace": ["error", {
      allowDeclarations: boolean;
      allowDefinitionFiles: boolean;
    }];
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error";
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error";
    "@typescript-eslint/no-non-null-assertion": "off";
    "@typescript-eslint/no-require-imports": "warn";
    "@typescript-eslint/no-restricted-types": "off";
    "@typescript-eslint/no-this-alias": "error";
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": "warn";
    "@typescript-eslint/no-unnecessary-type-constraint": "warn";
    "@typescript-eslint/no-unsafe-declaration-merging": "error";
    "@typescript-eslint/no-unsafe-function-type": "error";
    "@typescript-eslint/no-useless-empty-export": "error";
    "@typescript-eslint/no-wrapper-object-types": "warn";
    "@typescript-eslint/parameter-properties": "off";
    "@typescript-eslint/prefer-as-const": "warn";
    "@typescript-eslint/prefer-enum-initializers": "error";
    "@typescript-eslint/prefer-literal-enum-member": "error";
    "@typescript-eslint/prefer-namespace-keyword": "off";
    "@typescript-eslint/triple-slash-reference": ["error", {
      types: string;
    }];
    "@typescript-eslint/unified-signatures": "off";
    "@typescript-eslint/adjacent-overload-signatures": "error";
    "@typescript-eslint/array-type": ["error", {
      default: string;
    }];
    "@typescript-eslint/ban-tslint-comment": "error";
    "@typescript-eslint/class-literal-property-style": "off";
    "@typescript-eslint/consistent-generic-constructors": "error";
    "@typescript-eslint/consistent-indexed-object-style": "off";
    "@typescript-eslint/consistent-type-assertions": ["error", {
      assertionStyle: string;
    }];
    "@typescript-eslint/consistent-type-definitions": ["error", string];
    "@typescript-eslint/no-confusing-non-null-assertion": "error";
    "@typescript-eslint/no-inferrable-types": ["warn", {
      ignoreParameters: boolean;
      ignoreProperties: boolean;
    }];
    "@typescript-eslint/prefer-for-of": "warn";
    "@typescript-eslint/prefer-function-type": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "brace-style": "off";
    "comma-dangle": "off";
    "comma-spacing": "off";
    "default-param-last": "off";
    "dot-notation": "off";
    "func-call-spacing": "off";
    indent: "off";
    "init-declarations": "off";
    "keyword-spacing": "off";
    "lines-between-class-members": "off";
    "no-array-constructor": "off";
    "no-dupe-class-members": "off";
    "no-duplicate-imports": "off";
    "no-empty-function": "off";
    "no-extra-parens": "off";
    "no-extra-semi": "off";
    "no-implied-eval": "off";
    "no-invalid-this": "off";
    "no-loop-func": "off";
    "no-loss-of-precision": "off";
    "no-magic-numbers": "off";
    "no-redeclare": "off";
    "no-shadow": "off";
    "no-throw-literal": "off";
    "no-unused-expressions": "off";
    "no-unused-vars": "off";
    "no-use-before-define": "off";
    "no-useless-constructor": "off";
    quotes: "off";
    "require-await": "off";
    semi: "off";
    "space-before-function-paren": "off";
    "space-infix-ops": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "@typescript-eslint/explicit-function-return-type": "off";
  };
} | {
  name: string;
  files: string[];
  rules: {
    "consistent-return": "off";
    "@typescript-eslint/consistent-return": "off";
    "no-implied-eval": "off";
    "@typescript-eslint/no-implied-eval": "error";
    "no-throw-literal": "off";
    "@typescript-eslint/only-throw-error": "error";
    "prefer-destructuring": "off";
    "@typescript-eslint/prefer-destructuring": "error";
    "prefer-promise-reject-errors": "off";
    "@typescript-eslint/prefer-promise-reject-errors": "error";
    "require-await": "off";
    "@typescript-eslint/require-await": "error";
    "dot-notation": "off";
    "@typescript-eslint/dot-notation": "error";
    "@typescript-eslint/await-thenable": "error";
    "@typescript-eslint/consistent-type-exports": "off";
    "@typescript-eslint/naming-convention": "off";
    "@typescript-eslint/no-array-delete": "error";
    "@typescript-eslint/no-base-to-string": "error";
    "@typescript-eslint/no-confusing-void-expression": ["error", {
      ignoreArrowShorthand: boolean;
    }];
    "@typescript-eslint/no-deprecated": "warn";
    "@typescript-eslint/no-duplicate-type-constituents": "error";
    "@typescript-eslint/no-floating-promises": ["error", {
      ignoreIIFE: boolean;
    }];
    "@typescript-eslint/no-for-in-array": "error";
    "@typescript-eslint/no-meaningless-void-operator": "error";
    "@typescript-eslint/no-misused-promises": "error";
    "@typescript-eslint/no-misused-spread": "error";
    "@typescript-eslint/no-mixed-enums": "error";
    "@typescript-eslint/no-redundant-type-constituents": "error";
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn";
    "@typescript-eslint/no-unnecessary-condition": "warn";
    "@typescript-eslint/no-unnecessary-qualifier": "warn";
    "@typescript-eslint/no-unnecessary-template-expression": "warn";
    "@typescript-eslint/no-unnecessary-type-arguments": "warn";
    "@typescript-eslint/no-unnecessary-type-assertion": "warn";
    "@typescript-eslint/no-unnecessary-type-conversion": "warn";
    "@typescript-eslint/no-unnecessary-type-parameters": "warn";
    "@typescript-eslint/no-unsafe-argument": "off";
    "@typescript-eslint/no-unsafe-assignment": "off";
    "@typescript-eslint/no-unsafe-call": "off";
    "@typescript-eslint/no-unsafe-enum-comparison": "warn";
    "@typescript-eslint/no-unsafe-member-access": "off";
    "@typescript-eslint/no-unsafe-return": "off";
    "@typescript-eslint/no-unsafe-type-assertion": "warn";
    "@typescript-eslint/no-unsafe-unary-minus": "error";
    "@typescript-eslint/prefer-readonly": "off";
    "@typescript-eslint/prefer-readonly-parameter-types": "off";
    "@typescript-eslint/prefer-reduce-type-parameter": "warn";
    "@typescript-eslint/prefer-return-this-type": "error";
    "@typescript-eslint/promise-function-async": ["error", {
      allowedPromiseNames: string[];
      checkArrowFunctions: boolean;
      checkFunctionDeclarations: boolean;
      checkFunctionExpressions: boolean;
      checkMethodDeclarations: boolean;
    }];
    "@typescript-eslint/related-getter-setter-pairs": "warn";
    "@typescript-eslint/require-array-sort-compare": "warn";
    "@typescript-eslint/restrict-plus-operands": "error";
    "@typescript-eslint/restrict-template-expressions": "warn";
    "@typescript-eslint/return-await": "error";
    "@typescript-eslint/strict-boolean-expressions": "off";
    "@typescript-eslint/switch-exhaustiveness-check": "warn";
    "@typescript-eslint/unbound-method": ["warn", {
      ignoreStatic: boolean;
    }];
    "@typescript-eslint/use-unknown-in-catch-callback-variable": "warn";
    "@typescript-eslint/non-nullable-type-assertion-style": "warn";
    "@typescript-eslint/prefer-find": "error";
    "@typescript-eslint/prefer-includes": "error";
    "@typescript-eslint/prefer-nullish-coalescing": ["error", {
      ignoreConditionalTests: boolean;
      ignoreMixedLogicalExpressions: boolean;
    }];
    "@typescript-eslint/prefer-optional-chain": "error";
    "@typescript-eslint/prefer-regexp-exec": "error";
    "@typescript-eslint/prefer-string-starts-ends-with": "warn";
  };
} | {
  name: string;
  files: string[];
  plugins: {
    vitest: {
      meta: {
        name: string;
        version: string;
      };
      rules: {
        "prefer-lowercase-title": eslint204.Rule.RuleModule;
        "max-nested-describe": eslint204.Rule.RuleModule;
        "no-identical-title": eslint204.Rule.RuleModule;
        "no-focused-tests": eslint204.Rule.RuleModule;
        "no-conditional-tests": eslint204.Rule.RuleModule;
        "expect-expect": eslint204.Rule.RuleModule;
        "consistent-test-it": eslint204.Rule.RuleModule;
        "prefer-to-be": eslint204.Rule.RuleModule;
        "no-hooks": eslint204.Rule.RuleModule;
        "no-restricted-vi-methods": eslint204.Rule.RuleModule;
        "consistent-test-filename": eslint204.Rule.RuleModule;
        "max-expects": eslint204.Rule.RuleModule;
        "no-alias-methods": eslint204.Rule.RuleModule;
        "no-commented-out-tests": eslint204.Rule.RuleModule;
        "no-conditional-expect": eslint204.Rule.RuleModule;
        "no-conditional-in-test": eslint204.Rule.RuleModule;
        "no-disabled-tests": eslint204.Rule.RuleModule;
        "no-done-callback": eslint204.Rule.RuleModule;
        "no-duplicate-hooks": eslint204.Rule.RuleModule;
        "no-large-snapshots": eslint204.Rule.RuleModule;
        "no-interpolation-in-snapshots": eslint204.Rule.RuleModule;
        "no-mocks-import": eslint204.Rule.RuleModule;
        "no-restricted-matchers": eslint204.Rule.RuleModule;
        "no-standalone-expect": eslint204.Rule.RuleModule;
        "no-test-prefixes": eslint204.Rule.RuleModule;
        "no-test-return-statement": eslint204.Rule.RuleModule;
        "no-import-node-test": eslint204.Rule.RuleModule;
        "prefer-called-with": eslint204.Rule.RuleModule;
        "valid-title": eslint204.Rule.RuleModule;
        "valid-expect": eslint204.Rule.RuleModule;
        "prefer-to-be-falsy": eslint204.Rule.RuleModule;
        "prefer-to-be-object": eslint204.Rule.RuleModule;
        "prefer-to-be-truthy": eslint204.Rule.RuleModule;
        "prefer-to-have-length": eslint204.Rule.RuleModule;
        "prefer-equality-matcher": eslint204.Rule.RuleModule;
        "prefer-strict-equal": eslint204.Rule.RuleModule;
        "prefer-expect-resolves": eslint204.Rule.RuleModule;
        "prefer-each": eslint204.Rule.RuleModule;
        "prefer-hooks-on-top": eslint204.Rule.RuleModule;
        "prefer-hooks-in-order": eslint204.Rule.RuleModule;
        "require-local-test-context-for-concurrent-snapshots": eslint204.Rule.RuleModule;
        "prefer-mock-promise-shorthand": eslint204.Rule.RuleModule;
        "prefer-vi-mocked": eslint204.Rule.RuleModule;
        "prefer-snapshot-hint": eslint204.Rule.RuleModule;
        "valid-describe-callback": eslint204.Rule.RuleModule;
        "require-top-level-describe": eslint204.Rule.RuleModule;
        "require-to-throw-message": eslint204.Rule.RuleModule;
        "require-hook": eslint204.Rule.RuleModule;
        "prefer-todo": eslint204.Rule.RuleModule;
        "prefer-spy-on": eslint204.Rule.RuleModule;
        "prefer-comparison-matcher": eslint204.Rule.RuleModule;
        "prefer-describe-function-title": eslint204.Rule.RuleModule;
        "prefer-to-contain": eslint204.Rule.RuleModule;
        "prefer-expect-assertions": eslint204.Rule.RuleModule;
        "padding-around-after-all-blocks": eslint204.Rule.RuleModule;
        "padding-around-after-each-blocks": eslint204.Rule.RuleModule;
        "padding-around-all": eslint204.Rule.RuleModule;
        "padding-around-before-all-blocks": eslint204.Rule.RuleModule;
        "padding-around-before-each-blocks": eslint204.Rule.RuleModule;
        "padding-around-describe-blocks": eslint204.Rule.RuleModule;
        "padding-around-expect-groups": eslint204.Rule.RuleModule;
        "padding-around-test-blocks": eslint204.Rule.RuleModule;
        "valid-expect-in-promise": eslint204.Rule.RuleModule;
        "prefer-strict-boolean-matchers": eslint204.Rule.RuleModule;
        "require-mock-type-parameters": eslint204.Rule.RuleModule;
      };
      environments: {
        env: {
          globals: {
            suite: true;
            test: true;
            describe: true;
            it: true;
            expectTypeOf: true;
            assertType: true;
            expect: true;
            assert: true;
            chai: true;
            vitest: true;
            vi: true;
            beforeAll: true;
            afterAll: true;
            beforeEach: true;
            afterEach: true;
            onTestFailed: true;
            onTestFinished: true;
          };
        };
      };
      configs: {
        "legacy-recommended": {
          plugins: string[];
          rules: {};
        };
        "legacy-all": {
          plugins: string[];
          rules: {};
        };
        recommended: {
          name: string;
          plugins: {
            readonly vitest: eslint204.ESLint.Plugin;
          };
          rules: {
            readonly "vitest/expect-expect": "error";
            readonly "vitest/no-identical-title": "error";
            readonly "vitest/no-commented-out-tests": "error";
            readonly "vitest/valid-title": "error";
            readonly "vitest/valid-expect": "error";
            readonly "vitest/valid-describe-callback": "error";
            readonly "vitest/require-local-test-context-for-concurrent-snapshots": "error";
            readonly "vitest/no-import-node-test": "error";
          };
        };
        all: {
          name: string;
          plugins: {
            readonly vitest: eslint204.ESLint.Plugin;
          };
          rules: {
            readonly "vitest/prefer-lowercase-title": "warn";
            readonly "vitest/max-nested-describe": "warn";
            readonly "vitest/no-focused-tests": "warn";
            readonly "vitest/no-conditional-tests": "warn";
            readonly "vitest/consistent-test-it": "warn";
            readonly "vitest/no-hooks": "warn";
            readonly "vitest/no-restricted-vi-methods": "warn";
            readonly "vitest/consistent-test-filename": "warn";
            readonly "vitest/max-expects": "warn";
            readonly "vitest/no-alias-methods": "warn";
            readonly "vitest/no-conditional-expect": "warn";
            readonly "vitest/no-conditional-in-test": "warn";
            readonly "vitest/no-disabled-tests": "warn";
            readonly "vitest/no-done-callback": "warn";
            readonly "vitest/no-duplicate-hooks": "warn";
            readonly "vitest/no-large-snapshots": "warn";
            readonly "vitest/no-interpolation-in-snapshots": "warn";
            readonly "vitest/no-mocks-import": "warn";
            readonly "vitest/no-restricted-matchers": "warn";
            readonly "vitest/no-standalone-expect": "warn";
            readonly "vitest/no-test-prefixes": "warn";
            readonly "vitest/no-test-return-statement": "warn";
            readonly "vitest/prefer-called-with": "warn";
            readonly "vitest/prefer-to-be-falsy": "off";
            readonly "vitest/prefer-to-be-object": "warn";
            readonly "vitest/prefer-to-be-truthy": "off";
            readonly "vitest/prefer-to-have-length": "warn";
            readonly "vitest/prefer-equality-matcher": "warn";
            readonly "vitest/prefer-strict-equal": "warn";
            readonly "vitest/prefer-expect-resolves": "warn";
            readonly "vitest/prefer-each": "warn";
            readonly "vitest/prefer-hooks-on-top": "warn";
            readonly "vitest/prefer-hooks-in-order": "warn";
            readonly "vitest/prefer-mock-promise-shorthand": "warn";
            readonly "vitest/prefer-vi-mocked": "warn";
            readonly "vitest/prefer-snapshot-hint": "warn";
            readonly "vitest/require-top-level-describe": "warn";
            readonly "vitest/require-to-throw-message": "warn";
            readonly "vitest/require-hook": "warn";
            readonly "vitest/prefer-todo": "warn";
            readonly "vitest/prefer-spy-on": "warn";
            readonly "vitest/prefer-comparison-matcher": "warn";
            readonly "vitest/prefer-describe-function-title": "warn";
            readonly "vitest/prefer-to-contain": "warn";
            readonly "vitest/prefer-expect-assertions": "warn";
            readonly "vitest/prefer-to-be": "warn";
            readonly "vitest/padding-around-after-all-blocks": "warn";
            readonly "vitest/padding-around-after-each-blocks": "warn";
            readonly "vitest/padding-around-all": "warn";
            readonly "vitest/padding-around-before-all-blocks": "warn";
            readonly "vitest/padding-around-before-each-blocks": "warn";
            readonly "vitest/padding-around-describe-blocks": "warn";
            readonly "vitest/padding-around-expect-groups": "warn";
            readonly "vitest/padding-around-test-blocks": "warn";
            readonly "vitest/valid-expect-in-promise": "warn";
            readonly "vitest/expect-expect": "warn";
            readonly "vitest/no-identical-title": "warn";
            readonly "vitest/no-commented-out-tests": "warn";
            readonly "vitest/valid-title": "warn";
            readonly "vitest/valid-expect": "warn";
            readonly "vitest/valid-describe-callback": "warn";
            readonly "vitest/require-local-test-context-for-concurrent-snapshots": "warn";
            readonly "vitest/no-import-node-test": "warn";
            readonly "vitest/prefer-strict-boolean-matchers": "warn";
            readonly "vitest/require-mock-type-parameters": "warn";
          };
        };
        env: {
          name: string;
          languageOptions: {
            globals: {
              suite: "writable";
              test: "writable";
              describe: "writable";
              it: "writable";
              expectTypeOf: "writable";
              assertType: "writable";
              expect: "writable";
              assert: "writable";
              chai: "writable";
              vitest: "writable";
              vi: "writable";
              beforeAll: "writable";
              afterAll: "writable";
              beforeEach: "writable";
              afterEach: "writable";
              onTestFailed: "writable";
              onTestFinished: "writable";
            };
          };
        };
      };
    };
  };
  rules: {
    "vitest/consistent-test-filename": "off";
    "vitest/consistent-test-it": "error";
    "vitest/expect-expect": ["error", {
      assertFunctionNames: string[];
    }];
    "vitest/max-expects": "off";
    "vitest/max-nested-describe": "off";
    "vitest/no-alias-methods": "warn";
    "vitest/no-commented-out-tests": "warn";
    "vitest/no-conditional-expect": "warn";
    "vitest/no-conditional-in-test": "warn";
    "vitest/no-conditional-tests": "warn";
    "vitest/no-disabled-tests": "warn";
    "vitest/no-duplicate-hooks": "error";
    "vitest/no-focused-tests": "error";
    "vitest/no-hooks": "off";
    "vitest/no-identical-title": "error";
    "vitest/no-import-node-test": "error";
    "vitest/no-interpolation-in-snapshots": "error";
    "vitest/no-large-snapshots": ["warn", {
      maxSize: number;
    }];
    "vitest/no-mocks-import": "error";
    "vitest/no-restricted-matchers": "off";
    "vitest/no-restricted-vi-methods": "warn";
    "vitest/no-standalone-expect": "error";
    "vitest/no-test-prefixes": "error";
    "vitest/no-test-return-statement": "error";
    "vitest/prefer-called-with": "warn";
    "vitest/prefer-comparison-matcher": "warn";
    "vitest/prefer-describe-function-title": "off";
    "vitest/prefer-each": "warn";
    "vitest/prefer-equality-matcher": "warn";
    "vitest/prefer-expect-assertions": "off";
    "vitest/prefer-expect-resolves": "warn";
    "vitest/prefer-hooks-in-order": "warn";
    "vitest/prefer-hooks-on-top": "warn";
    "vitest/prefer-lowercase-title": "warn";
    "vitest/prefer-mock-promise-shorthand": "warn";
    "vitest/prefer-snapshot-hint": "warn";
    "vitest/prefer-spy-on": "warn";
    "vitest/prefer-strict-boolean-matchers": "warn";
    "vitest/prefer-strict-equal": "warn";
    "vitest/prefer-to-be": "warn";
    "vitest/prefer-to-be-falsy": "warn";
    "vitest/prefer-to-be-object": "warn";
    "vitest/prefer-to-be-truthy": "warn";
    "vitest/prefer-to-contain": "warn";
    "vitest/prefer-to-have-length": "warn";
    "vitest/prefer-todo": "warn";
    "vitest/prefer-vi-mocked": "warn";
    "vitest/require-local-test-context-for-concurrent-snapshots": "warn";
    "vitest/require-mock-type-parameters": "warn";
    "vitest/require-to-throw-message": "error";
    "vitest/require-top-level-describe": "error";
    "vitest/valid-describe-callback": "error";
    "vitest/valid-expect": "error";
    "vitest/valid-expect-in-promise": "error";
    "vitest/valid-title": "error";
  };
})[];
//#endregion
export { _default as base, _default$1 as default, _default$2 as jest, _default$3 as next, _default$4 as react, _default$5 as stylistic, _default$6 as typeAware, _default$7 as typescript, _default$8 as vitest };